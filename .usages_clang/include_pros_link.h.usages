22 serialization::archive 19 0 0 0 0 40 /home/bluecore/Desktop/Pros/Main Project 40 /home/bluecore/Desktop/Pros/Main Project 0 0 250 0 0 0 577 /**
 * \file pros/link.h
 *
 * Contains prototypes for functions related to the robot to robot communications.
 *
 * Visit https://pros.cs.purdue.edu/v5/api/c/link.html to learn
 * more.
 *
 * This file should not be modified by users, since it gets replaced whenever
 * a kernel upgrade occurs.
 *
 * \copyright Copyright (c) 2017-2023, Purdue University ACM SIGBots.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */ 1 1 17 4 18446744073709551615 1 # 19 1 19 2 18446744073709551615 6 ifndef 19 2 19 8 18446744073709551615 13 _PROS_LINK_H_ 19 9 19 22 18446744073709551615 1 # 20 1 20 2 18446744073709551615 6 define 20 2 20 8 18446744073709551615 13 _PROS_LINK_H_ 20 9 20 22 18446744073709551615 1 # 22 1 22 2 18446744073709551615 7 include 22 2 22 9 18446744073709551615 1 < 22 10 22 11 18446744073709551615 7 stdbool 22 11 22 18 18446744073709551615 1 . 22 18 22 19 18446744073709551615 1 h 22 19 22 20 18446744073709551615 1 > 22 20 22 21 18446744073709551615 1 # 23 1 23 2 18446744073709551615 7 include 23 2 23 9 18446744073709551615 1 < 23 10 23 11 18446744073709551615 6 stdint 23 11 23 17 18446744073709551615 1 . 23 17 23 18 18446744073709551615 1 h 23 18 23 19 18446744073709551615 1 > 23 19 23 20 18446744073709551615 1 # 25 1 25 2 18446744073709551615 5 ifdef 25 2 25 7 18446744073709551615 11 __cplusplus 25 8 25 19 18446744073709551615 6 extern 26 1 26 7 18446744073709551615 3 "C" 26 8 26 11 18446744073709551615 1 { 26 12 26 13 18446744073709551615 9 namespace 27 1 27 10 18446744073709551615 4 pros 27 11 27 15 0 1 { 27 16 27 17 18446744073709551615 1 # 28 1 28 2 18446744073709551615 5 endif 28 2 28 7 18446744073709551615 7 typedef 30 1 30 8 18446744073709551615 4 enum 30 9 30 13 18446744073709551615 11 link_type_e 30 14 30 25 1 1 { 30 26 30 27 18446744073709551615 15 E_LINK_RECIEVER 31 5 31 20 2 1 = 31 21 31 22 18446744073709551615 1 0 31 23 31 24 18446744073709551615 1 , 31 24 31 25 18446744073709551615 18 E_LINK_TRANSMITTER 32 5 32 23 3 1 , 32 23 32 24 18446744073709551615 9 E_LINK_RX 33 5 33 14 4 1 = 33 15 33 16 18446744073709551615 15 E_LINK_RECIEVER 33 17 33 32 2 1 , 33 32 33 33 18446744073709551615 9 E_LINK_TX 34 5 34 14 5 1 = 34 15 34 16 18446744073709551615 18 E_LINK_TRANSMITTER 34 17 34 35 3 1 } 35 1 35 2 18446744073709551615 13 link_type_e_t 35 3 35 16 6 1 ; 35 16 35 17 18446744073709551615 1 # 37 1 37 2 18446744073709551615 5 ifdef 37 2 37 7 18446744073709551615 21 PROS_USE_SIMPLE_NAMES 37 8 37 29 18446744073709551615 1 # 38 1 38 2 18446744073709551615 5 ifdef 38 2 38 7 18446744073709551615 11 __cplusplus 38 8 38 19 18446744073709551615 1 # 39 1 39 2 18446744073709551615 6 define 39 2 39 8 18446744073709551615 13 LINK_RECIEVER 39 9 39 22 18446744073709551615 4 pros 39 23 39 27 18446744073709551615 2 :: 39 27 39 29 18446744073709551615 15 E_LINK_RECIEVER 39 29 39 44 18446744073709551615 1 # 40 1 40 2 18446744073709551615 6 define 40 2 40 8 18446744073709551615 16 LINK_TRANSMITTER 40 9 40 25 18446744073709551615 4 pros 40 26 40 30 18446744073709551615 2 :: 40 30 40 32 18446744073709551615 18 E_LINK_TRANSMITTER 40 32 40 50 18446744073709551615 1 # 41 1 41 2 18446744073709551615 6 define 41 2 41 8 18446744073709551615 7 LINK_RX 41 9 41 16 18446744073709551615 4 pros 41 17 41 21 18446744073709551615 2 :: 41 21 41 23 18446744073709551615 9 E_LINK_RX 41 23 41 32 18446744073709551615 1 # 42 1 42 2 18446744073709551615 6 define 42 2 42 8 18446744073709551615 7 LINK_TX 42 9 42 16 18446744073709551615 4 pros 42 17 42 21 18446744073709551615 2 :: 42 21 42 23 18446744073709551615 9 E_LINK_TX 42 23 42 32 18446744073709551615 1 # 43 1 43 2 18446744073709551615 4 else 43 2 43 6 18446744073709551615 1 # 44 1 44 2 18446744073709551615 6 define 44 2 44 8 18446744073709551615 13 LINK_RECIEVER 44 9 44 22 18446744073709551615 15 E_LINK_RECIEVER 44 23 44 38 18446744073709551615 1 # 45 1 45 2 18446744073709551615 6 define 45 2 45 8 18446744073709551615 16 LINK_TRANSMITTER 45 9 45 25 18446744073709551615 18 E_LINK_TRANSMITTER 45 26 45 44 18446744073709551615 1 # 46 1 46 2 18446744073709551615 6 define 46 2 46 8 18446744073709551615 7 LINK_RX 46 9 46 16 18446744073709551615 9 E_LINK_RX 46 17 46 26 18446744073709551615 1 # 47 1 47 2 18446744073709551615 6 define 47 2 47 8 18446744073709551615 7 LINK_TX 47 9 47 16 18446744073709551615 9 E_LINK_TX 47 17 47 26 18446744073709551615 1 # 48 1 48 2 18446744073709551615 5 endif 48 2 48 7 18446744073709551615 1 # 49 1 49 2 18446744073709551615 5 endif 49 2 49 7 18446744073709551615 1 # 51 1 51 2 18446744073709551615 6 define 51 2 51 8 18446744073709551615 16 LINK_BUFFER_SIZE 51 9 51 25 18446744073709551615 3 512 51 26 51 29 18446744073709551615 1 # 53 1 53 2 18446744073709551615 5 ifdef 53 2 53 7 18446744073709551615 11 __cplusplus 53 8 53 19 18446744073709551615 9 namespace 54 1 54 10 18446744073709551615 1 c 54 11 54 12 7 1 { 54 13 54 14 18446744073709551615 1 # 55 1 55 2 18446744073709551615 5 endif 55 2 55 7 18446744073709551615 1048 /**
 * Initializes a link on a radio port, with an indicated type. There might be a
 * 1 to 2 second delay from when this function is called to when the link is initializes.
 * PROS currently only supports the use of one radio per brain.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a radio.
 * ENXIO - The sensor is still calibrating, or no link is connected via the radio.
 *
 * \param port 
 *      The port of the radio for the intended link.
 * \param link_id
 *      Unique link ID in the form of a string, needs to be different from other links in
 *      the area.
 * \param type
 *      Indicates whether the radio link on the brain is a transmitter or reciever,
 *      with the transmitter having double the transmitting bandwidth as the recieving
 *      end (1040 bytes/s vs 520 bytes/s).
 *
 * \return PROS_ERR if initialization fails, 1 if the initialization succeeds.
 */ 57 1 79 4 18446744073709551615 8 uint32_t 80 1 80 9 8 9 link_init 80 10 80 19 9 1 ( 80 19 80 20 9 7 uint8_t 80 20 80 27 10 4 port 80 28 80 32 11 1 , 80 32 80 33 9 5 const 80 34 80 39 18446744073709551615 4 char 80 40 80 44 18446744073709551615 1 * 80 44 80 45 18446744073709551615 7 link_id 80 46 80 53 12 1 , 80 53 80 54 9 13 link_type_e_t 80 55 80 68 6 4 type 80 69 80 73 13 1 ) 80 73 80 74 9 1 ; 80 74 80 75 18446744073709551615 1112 /**
 * Initializes a link on a radio port, with an indicated type and the ability for
 * vexlink to override the controller radio. There might be a 1 to 2 second delay
 * from when this function is called to when the link is initializes.
 * PROS currently only supports the use of one radio per brain.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a radio.
 * ENXIO - The sensor is still calibrating, or no link is connected via the radio.
 *
 * \param port 
 *      The port of the radio for the intended link.
 * \param link_id
 *      Unique link ID in the form of a string, needs to be different from other links in
 *      the area.
 * \param type
 *      Indicates whether the radio link on the brain is a transmitter or reciever,
 *      with the transmitter having double the transmitting bandwidth as the recieving
 *      end (1040 bytes/s vs 520 bytes/s).
 *
 * \return PROS_ERR if initialization fails, 1 if the initialization succeeds.
 */ 82 1 105 4 18446744073709551615 8 uint32_t 106 1 106 9 8 18 link_init_override 106 10 106 28 14 1 ( 106 28 106 29 14 7 uint8_t 106 29 106 36 10 4 port 106 37 106 41 15 1 , 106 41 106 42 14 5 const 106 43 106 48 18446744073709551615 4 char 106 49 106 53 18446744073709551615 1 * 106 53 106 54 18446744073709551615 7 link_id 106 55 106 62 16 1 , 106 62 106 63 14 13 link_type_e_t 106 64 106 77 6 4 type 106 78 106 82 17 1 ) 106 82 106 83 14 1 ; 106 83 106 84 18446744073709551615 511 /**
 * Checks if a radio link on a port is active or not.
 * 
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a radio.
 * ENXIO - The sensor is still calibrating, or no link is connected via the radio.
 * 
 * \param port 
 *      The port of the radio for the intended link.
 *
 * \return If a radio is connected to a port and it's connected to a link.
 */ 108 1 121 4 18446744073709551615 4 bool 122 1 122 5 18446744073709551615 14 link_connected 122 6 122 20 18 1 ( 122 20 122 21 18 7 uint8_t 122 21 122 28 10 4 port 122 29 122 33 19 1 ) 122 33 122 34 18 1 ; 122 34 122 35 18446744073709551615 535 /**
 * Returns the bytes of data available to be read  
 * 
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a radio.
 * ENXIO - The sensor is still calibrating, or no link is connected via the radio.
 * 
 * \param port 
 *      The port of the radio for the intended link.
 *
 * \return PROS_ERR if port is not a link/radio, else the bytes available to be
 * read by the user.
 */ 124 1 138 4 18446744073709551615 8 uint32_t 139 1 139 9 8 24 link_raw_receivable_size 139 10 139 34 20 1 ( 139 34 139 35 20 7 uint8_t 139 35 139 42 10 4 port 139 43 139 47 21 1 ) 139 47 139 48 20 1 ; 139 48 139 49 18446744073709551615 495 /**
 * Returns the bytes of data available in transmission buffer.
 * 
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a radio.
 * ENXIO - The sensor is still calibrating, or no link is connected via the radio.
 * 
 * \param port 
 *      The port of the radio for the intended link.
 *
 * \return PROS_ERR if port is not a link/radio, 
 */ 141 1 154 4 18446744073709551615 8 uint32_t 155 1 155 9 8 27 link_raw_transmittable_size 155 10 155 37 22 1 ( 155 37 155 38 22 7 uint8_t 155 38 155 45 10 4 port 155 46 155 50 23 1 ) 155 50 155 51 22 1 ; 155 51 155 52 18446744073709551615 845 /**
 * Send raw serial data through vexlink.
 * 
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a radio.
 * ENXIO - The sensor is still calibrating, or no link is connected via the radio.
 * EBUSY - The transmitter buffer is still busy with a previous transmission, and there is no 
 * room in the FIFO buffer (queue) to transmit the data.
 * EINVAL - The data given is NULL
 * 
 * \param port 
 *      The port of the radio for the intended link.
 * \param data
 *      Buffer with data to send
 * \param data_size
 *      Bytes of data to be read to the destination buffer
 * 
 * \return PROS_ERR if port is not a link, and the successfully transmitted 
 * data size if it succeeded.
 */ 157 1 178 4 18446744073709551615 8 uint32_t 179 1 179 9 8 17 link_transmit_raw 179 10 179 27 24 1 ( 179 27 179 28 24 7 uint8_t 179 28 179 35 10 4 port 179 36 179 40 25 1 , 179 40 179 41 24 4 void 179 42 179 46 18446744073709551615 1 * 179 46 179 47 18446744073709551615 4 data 179 48 179 52 26 1 , 179 52 179 53 24 8 uint16_t 179 54 179 62 27 9 data_size 179 63 179 72 28 1 ) 179 72 179 73 24 1 ; 179 73 179 74 18446744073709551615 788 /**
 * Receive raw serial data through vexlink.
 * 
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a radio.
 * ENXIO - The sensor is still calibrating, or no link is connected via the radio.
 * EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer 
 * or destination buffer. 
 * 
 * \param port 
 *      The port of the radio for the intended link.
 * \param dest
 *      Destination buffer to read data to
 * \param data_size
 *      Bytes of data to be read to the destination buffer
 * 
 * \return PROS_ERR if port is not a link, and the successfully received 
 * data size if it succeeded.
 */ 181 1 201 4 18446744073709551615 8 uint32_t 202 1 202 9 8 16 link_receive_raw 202 10 202 26 29 1 ( 202 26 202 27 29 7 uint8_t 202 27 202 34 10 4 port 202 35 202 39 30 1 , 202 39 202 40 29 4 void 202 41 202 45 18446744073709551615 1 * 202 45 202 46 18446744073709551615 4 dest 202 47 202 51 31 1 , 202 51 202 52 29 8 uint16_t 202 53 202 61 27 9 data_size 202 62 202 71 32 1 ) 202 71 202 72 29 1 ; 202 72 202 73 18446744073709551615 878 /**
 * Send packeted message through vexlink, with a checksum and start byte.
 * 
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a radio.
 * ENXIO - The sensor is still calibrating, or no link is connected via the radio.
 * EBUSY - The transmitter buffer is still busy with a previous transmission, and there is no 
 * room in the FIFO buffer (queue) to transmit the data.
 * EINVAL - The data given is NULL
 * 
 * \param port 
 *      The port of the radio for the intended link.
 * \param data
 *      Buffer with data to send
 * \param data_size
 *      Bytes of data to be read to the destination buffer
 * 
 * \return PROS_ERR if port is not a link, and the successfully transmitted 
 * data size if it succeeded.
 */ 204 1 225 4 18446744073709551615 8 uint32_t 226 1 226 9 8 13 link_transmit 226 10 226 23 33 1 ( 226 23 226 24 33 7 uint8_t 226 24 226 31 10 4 port 226 32 226 36 34 1 , 226 36 226 37 33 4 void 226 38 226 42 18446744073709551615 1 * 226 42 226 43 18446744073709551615 4 data 226 44 226 48 35 1 , 226 48 226 49 33 8 uint16_t 226 50 226 58 27 9 data_size 226 59 226 68 36 1 ) 226 68 226 69 33 1 ; 226 69 226 70 18446744073709551615 917 /**
 * Receive packeted message through vexlink, with a checksum and start byte.
 * 
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a radio.
 * ENXIO - The sensor is still calibrating, or no link is connected via the radio.
 * EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer 
 * or destination buffer. 
 * EBADMSG - Protocol error related to start byte, data size, or checksum.
 * 
 * \param port 
 *      The port of the radio for the intended link.
 * \param dest
 *      Destination buffer to read data to
 * \param data_size
 *      Bytes of data to be read to the destination buffer
 * 
 * \return PROS_ERR if port is not a link or protocol error, and the successfully 
 * transmitted data size if it succeeded.
 */ 228 1 249 4 18446744073709551615 8 uint32_t 250 1 250 9 8 12 link_receive 250 10 250 22 37 1 ( 250 22 250 23 37 7 uint8_t 250 23 250 30 10 4 port 250 31 250 35 38 1 , 250 35 250 36 37 4 void 250 37 250 41 18446744073709551615 1 * 250 41 250 42 18446744073709551615 4 dest 250 43 250 47 39 1 , 250 47 250 48 37 8 uint16_t 250 49 250 57 27 9 data_size 250 58 250 67 40 1 ) 250 67 250 68 37 1 ; 250 68 250 69 18446744073709551615 553 /**
 * Clear the receive buffer of the link, and discarding the data.
 * 
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a radio.
 * ENXIO - The sensor is still calibrating, or no link is connected via the radio.
 * 
 * \param port 
 *      The port of the radio for the intended link.
 * 
 * \return PROS_ERR if port is not a link, and the successfully received 
 * data size if it succeeded.
 */ 252 1 266 4 18446744073709551615 8 uint32_t 267 1 267 9 8 22 link_clear_receive_buf 267 10 267 32 41 1 ( 267 32 267 33 41 7 uint8_t 267 33 267 40 10 4 port 267 41 267 45 42 1 ) 267 45 267 46 41 1 ; 267 46 267 47 18446744073709551615 1 # 269 1 269 2 18446744073709551615 5 ifdef 269 2 269 7 18446744073709551615 11 __cplusplus 269 8 269 19 18446744073709551615 1 } 270 1 270 2 18446744073709551615 1 } 271 1 271 2 18446744073709551615 1 } 272 1 272 2 18446744073709551615 1 # 273 1 273 2 18446744073709551615 5 endif 273 2 273 7 18446744073709551615 1 # 275 1 275 2 18446744073709551615 5 endif 275 2 275 7 18446744073709551615 0 0 43 0 0 0 22 0 0 1 13 0 4 pros 5 1 13 0 16 link_type_e:pros 7 1 13 0 32 E_LINK_RECIEVER:link_type_e:pros 7 1 13 0 35 E_LINK_TRANSMITTER:link_type_e:pros 7 1 13 0 26 E_LINK_RX:link_type_e:pros 7 1 13 0 26 E_LINK_TX:link_type_e:pros 20 1 13 0 18 link_type_e_t:pros 22 1 13 0 6 c:pros 20 1 13 0 8 uint32_t 8 1 13 0 16 link_init:c:pros 20 1 13 0 7 uint8_t 10 1 13 0 66 80:28:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 10 1 13 0 66 80:46:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 10 1 13 0 66 80:69:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 8 1 13 0 25 link_init_override:c:pros 10 1 13 0 67 106:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 10 1 13 0 67 106:55:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 10 1 13 0 67 106:78:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 8 1 13 0 21 link_connected:c:pros 10 1 13 0 67 122:29:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 8 1 13 0 31 link_raw_receivable_size:c:pros 10 1 13 0 67 139:43:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 8 1 13 0 34 link_raw_transmittable_size:c:pros 10 1 13 0 67 155:46:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 8 1 13 0 24 link_transmit_raw:c:pros 10 1 13 0 67 179:36:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 10 1 13 0 67 179:48:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 20 1 13 0 8 uint16_t 10 1 13 0 67 179:63:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 8 1 13 0 23 link_receive_raw:c:pros 10 1 13 0 67 202:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 10 1 13 0 67 202:47:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 10 1 13 0 67 202:62:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 8 1 13 0 20 link_transmit:c:pros 10 1 13 0 67 226:32:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 10 1 13 0 67 226:44:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 10 1 13 0 67 226:59:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 8 1 13 0 19 link_receive:c:pros 10 1 13 0 67 250:31:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 10 1 13 0 67 250:43:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 10 1 13 0 67 250:58:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 8 1 13 0 29 link_clear_receive_buf:c:pros 10 1 13 0 67 267:41:/home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 0 0 1 0 0 0 60 /home/bluecore/Desktop/Pros/Main Project/include/pros/link.h 1698321180