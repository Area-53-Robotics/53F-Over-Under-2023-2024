22 serialization::archive 19 0 0 0 0 40 /home/bluecore/Desktop/Pros/Main Project 40 /home/bluecore/Desktop/Pros/Main Project 0 0 544 0 0 0 627 /**
 * \file pros/rtos.h
 *
 * Contains declarations for the PROS RTOS kernel for use by typical VEX
 * programmers.
 *
 * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html to
 * learn more.
 *
 * This file should not be modified by users, since it gets replaced whenever
 * a kernel upgrade occurs.
 *
 * \copyright Copyright (c) 2017-2023, Purdue University ACM SIGBots.
 * All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */ 1 1 19 4 18446744073709551615 1 # 21 1 21 2 18446744073709551615 6 ifndef 21 2 21 8 18446744073709551615 13 _PROS_RTOS_H_ 21 9 21 22 18446744073709551615 1 # 22 1 22 2 18446744073709551615 6 define 22 2 22 8 18446744073709551615 13 _PROS_RTOS_H_ 22 9 22 22 18446744073709551615 1 # 24 1 24 2 18446744073709551615 7 include 24 2 24 9 18446744073709551615 1 < 24 10 24 11 18446744073709551615 7 stdbool 24 11 24 18 18446744073709551615 1 . 24 18 24 19 18446744073709551615 1 h 24 19 24 20 18446744073709551615 1 > 24 20 24 21 18446744073709551615 1 # 25 1 25 2 18446744073709551615 7 include 25 2 25 9 18446744073709551615 1 < 25 10 25 11 18446744073709551615 6 stdint 25 11 25 17 18446744073709551615 1 . 25 17 25 18 18446744073709551615 1 h 25 18 25 19 18446744073709551615 1 > 25 19 25 20 18446744073709551615 1 # 27 1 27 2 18446744073709551615 5 ifdef 27 2 27 7 18446744073709551615 11 __cplusplus 27 8 27 19 18446744073709551615 6 extern 28 1 28 7 18446744073709551615 3 "C" 28 8 28 11 18446744073709551615 1 { 28 12 28 13 18446744073709551615 9 namespace 29 1 29 10 18446744073709551615 4 pros 29 11 29 15 0 1 { 29 16 29 17 18446744073709551615 1 # 30 1 30 2 18446744073709551615 5 endif 30 2 30 7 18446744073709551615 75 // The highest priority that can be assigned to a task. Beware of deadlock. 32 1 32 76 18446744073709551615 1 # 33 1 33 2 18446744073709551615 6 define 33 2 33 8 18446744073709551615 17 TASK_PRIORITY_MAX 33 9 33 26 18446744073709551615 2 16 33 27 33 29 18446744073709551615 54 // The lowest priority that can be assigned to a task. 35 1 35 55 18446744073709551615 79 // This may cause severe performance problems and is generally not recommended. 36 1 36 80 18446744073709551615 1 # 37 1 37 2 18446744073709551615 6 define 37 2 37 8 18446744073709551615 17 TASK_PRIORITY_MIN 37 9 37 26 18446744073709551615 1 1 37 27 37 28 18446744073709551615 66 // The default task priority, which should be used for most tasks. 39 1 39 67 18446744073709551615 60 // Default tasks such as autonomous() inherit this priority. 40 1 40 61 18446744073709551615 1 # 41 1 41 2 18446744073709551615 6 define 41 2 41 8 18446744073709551615 21 TASK_PRIORITY_DEFAULT 41 9 41 30 18446744073709551615 1 8 41 31 41 32 18446744073709551615 73 // The recommended stack size for a new task. This stack size is used for 43 1 43 74 18446744073709551615 75 // default tasks such as autonomous(). This equates to 32,768 bytes, or 128 44 1 44 76 18446744073709551615 53 // times the default stack size for a task in PROS 2. 45 1 45 54 18446744073709551615 1 # 46 1 46 2 18446744073709551615 6 define 46 2 46 8 18446744073709551615 24 TASK_STACK_DEPTH_DEFAULT 46 9 46 33 18446744073709551615 6 0x2000 46 34 46 40 18446744073709551615 80 // The minimal stack size for a task. This equates to 2048 bytes, or 8 times the 48 1 48 81 18446744073709551615 43 // default stack size for a task in PROS 2. 49 1 49 44 18446744073709551615 1 # 50 1 50 2 18446744073709551615 6 define 50 2 50 8 18446744073709551615 20 TASK_STACK_DEPTH_MIN 50 9 50 29 18446744073709551615 5 0x200 50 30 50 35 18446744073709551615 61 // The maximum number of characters allowed in a task's name. 52 1 52 62 18446744073709551615 1 # 53 1 53 2 18446744073709551615 6 define 53 2 53 8 18446744073709551615 17 TASK_NAME_MAX_LEN 53 9 53 26 18446744073709551615 2 32 53 27 53 29 18446744073709551615 78 // The maximum timeout value that can be given to, for instance, a mutex grab. 55 1 55 79 18446744073709551615 1 # 56 1 56 2 18446744073709551615 6 define 56 2 56 8 18446744073709551615 11 TIMEOUT_MAX 56 9 56 20 18446744073709551615 1 ( 56 21 56 22 18446744073709551615 1 ( 56 22 56 23 18446744073709551615 8 uint32_t 56 23 56 31 18446744073709551615 1 ) 56 31 56 32 18446744073709551615 12 0xffffffffUL 56 32 56 44 18446744073709551615 1 ) 56 44 56 45 18446744073709551615 7 typedef 58 1 58 8 18446744073709551615 4 void 58 9 58 13 18446744073709551615 1 * 58 13 58 14 18446744073709551615 6 task_t 58 15 58 21 1 1 ; 58 21 58 22 18446744073709551615 7 typedef 59 1 59 8 18446744073709551615 4 void 59 9 59 13 18446744073709551615 1 ( 59 14 59 15 18446744073709551615 1 * 59 15 59 16 18446744073709551615 9 task_fn_t 59 16 59 25 2 1 ) 59 25 59 26 18446744073709551615 1 ( 59 26 59 27 18446744073709551615 4 void 59 27 59 31 18446744073709551615 1 * 59 31 59 32 18446744073709551615 1 ) 59 32 59 33 18446744073709551615 1 ; 59 33 59 34 18446744073709551615 7 typedef 61 1 61 8 18446744073709551615 4 enum 61 9 61 13 18446744073709551615 1 { 61 14 61 15 18446744073709551615 20 E_TASK_STATE_RUNNING 62 2 62 22 3 1 = 62 23 62 24 18446744073709551615 1 0 62 25 62 26 18446744073709551615 1 , 62 26 62 27 18446744073709551615 18 E_TASK_STATE_READY 63 2 63 20 4 1 , 63 20 63 21 18446744073709551615 20 E_TASK_STATE_BLOCKED 64 2 64 22 5 1 , 64 22 64 23 18446744073709551615 22 E_TASK_STATE_SUSPENDED 65 2 65 24 6 1 , 65 24 65 25 18446744073709551615 20 E_TASK_STATE_DELETED 66 2 66 22 7 1 , 66 22 66 23 18446744073709551615 20 E_TASK_STATE_INVALID 67 2 67 22 8 1 } 68 1 68 2 18446744073709551615 14 task_state_e_t 68 3 68 17 9 1 ; 68 17 68 18 18446744073709551615 7 typedef 70 1 70 8 18446744073709551615 4 enum 70 9 70 13 18446744073709551615 1 { 70 14 70 15 18446744073709551615 20 E_NOTIFY_ACTION_NONE 71 2 71 22 10 1 , 71 22 71 23 18446744073709551615 20 E_NOTIFY_ACTION_BITS 72 2 72 22 11 1 , 72 22 72 23 18446744073709551615 20 E_NOTIFY_ACTION_INCR 73 2 73 22 12 1 , 73 22 73 23 18446744073709551615 22 E_NOTIFY_ACTION_OWRITE 74 2 74 24 13 1 , 74 24 74 25 18446744073709551615 25 E_NOTIFY_ACTION_NO_OWRITE 75 2 75 27 14 1 } 76 1 76 2 18446744073709551615 17 notify_action_e_t 76 3 76 20 15 1 ; 76 20 76 21 18446744073709551615 1 # 78 1 78 2 18446744073709551615 5 ifdef 78 2 78 7 18446744073709551615 21 PROS_USE_SIMPLE_NAMES 78 8 78 29 18446744073709551615 1 # 79 1 79 2 18446744073709551615 5 ifdef 79 2 79 7 18446744073709551615 11 __cplusplus 79 8 79 19 18446744073709551615 1 # 80 1 80 2 18446744073709551615 6 define 80 2 80 8 18446744073709551615 18 TASK_STATE_RUNNING 80 9 80 27 18446744073709551615 4 pros 80 28 80 32 18446744073709551615 2 :: 80 32 80 34 18446744073709551615 20 E_TASK_STATE_RUNNING 80 34 80 54 18446744073709551615 1 # 81 1 81 2 18446744073709551615 6 define 81 2 81 8 18446744073709551615 16 TASK_STATE_READY 81 9 81 25 18446744073709551615 4 pros 81 26 81 30 18446744073709551615 2 :: 81 30 81 32 18446744073709551615 18 E_TASK_STATE_READY 81 32 81 50 18446744073709551615 1 # 82 1 82 2 18446744073709551615 6 define 82 2 82 8 18446744073709551615 18 TASK_STATE_BLOCKED 82 9 82 27 18446744073709551615 4 pros 82 28 82 32 18446744073709551615 2 :: 82 32 82 34 18446744073709551615 20 E_TASK_STATE_BLOCKED 82 34 82 54 18446744073709551615 1 # 83 1 83 2 18446744073709551615 6 define 83 2 83 8 18446744073709551615 20 TASK_STATE_SUSPENDED 83 9 83 29 18446744073709551615 4 pros 83 30 83 34 18446744073709551615 2 :: 83 34 83 36 18446744073709551615 22 E_TASK_STATE_SUSPENDED 83 36 83 58 18446744073709551615 1 # 84 1 84 2 18446744073709551615 6 define 84 2 84 8 18446744073709551615 18 TASK_STATE_DELETED 84 9 84 27 18446744073709551615 4 pros 84 28 84 32 18446744073709551615 2 :: 84 32 84 34 18446744073709551615 20 E_TASK_STATE_DELETED 84 34 84 54 18446744073709551615 1 # 85 1 85 2 18446744073709551615 6 define 85 2 85 8 18446744073709551615 18 TASK_STATE_INVALID 85 9 85 27 18446744073709551615 4 pros 85 28 85 32 18446744073709551615 2 :: 85 32 85 34 18446744073709551615 20 E_TASK_STATE_INVALID 85 34 85 54 18446744073709551615 1 # 86 1 86 2 18446744073709551615 6 define 86 2 86 8 18446744073709551615 18 NOTIFY_ACTION_NONE 86 9 86 27 18446744073709551615 4 pros 86 28 86 32 18446744073709551615 2 :: 86 32 86 34 18446744073709551615 20 E_NOTIFY_ACTION_NONE 86 34 86 54 18446744073709551615 1 # 87 1 87 2 18446744073709551615 6 define 87 2 87 8 18446744073709551615 18 NOTIFY_ACTION_BITS 87 9 87 27 18446744073709551615 4 pros 87 28 87 32 18446744073709551615 2 :: 87 32 87 34 18446744073709551615 20 E_NOTIFY_ACTION_BITS 87 34 87 54 18446744073709551615 1 # 88 1 88 2 18446744073709551615 6 define 88 2 88 8 18446744073709551615 18 NOTIFY_ACTION_INCR 88 9 88 27 18446744073709551615 4 pros 88 28 88 32 18446744073709551615 2 :: 88 32 88 34 18446744073709551615 20 E_NOTIFY_ACTION_INCR 88 34 88 54 18446744073709551615 1 # 89 1 89 2 18446744073709551615 6 define 89 2 89 8 18446744073709551615 20 NOTIFY_ACTION_OWRITE 89 9 89 29 18446744073709551615 4 pros 89 30 89 34 18446744073709551615 2 :: 89 34 89 36 18446744073709551615 22 E_NOTIFY_ACTION_OWRITE 89 36 89 58 18446744073709551615 1 # 90 1 90 2 18446744073709551615 6 define 90 2 90 8 18446744073709551615 23 NOTIFY_ACTION_NO_OWRITE 90 9 90 32 18446744073709551615 4 pros 90 33 90 37 18446744073709551615 2 :: 90 37 90 39 18446744073709551615 25 E_NOTIFY_ACTION_NO_OWRITE 90 39 90 64 18446744073709551615 1 # 91 1 91 2 18446744073709551615 4 else 91 2 91 6 18446744073709551615 1 # 92 1 92 2 18446744073709551615 6 define 92 2 92 8 18446744073709551615 18 TASK_STATE_RUNNING 92 9 92 27 18446744073709551615 20 E_TASK_STATE_RUNNING 92 28 92 48 18446744073709551615 1 # 93 1 93 2 18446744073709551615 6 define 93 2 93 8 18446744073709551615 16 TASK_STATE_READY 93 9 93 25 18446744073709551615 18 E_TASK_STATE_READY 93 26 93 44 18446744073709551615 1 # 94 1 94 2 18446744073709551615 6 define 94 2 94 8 18446744073709551615 18 TASK_STATE_BLOCKED 94 9 94 27 18446744073709551615 20 E_TASK_STATE_BLOCKED 94 28 94 48 18446744073709551615 1 # 95 1 95 2 18446744073709551615 6 define 95 2 95 8 18446744073709551615 20 TASK_STATE_SUSPENDED 95 9 95 29 18446744073709551615 22 E_TASK_STATE_SUSPENDED 95 30 95 52 18446744073709551615 1 # 96 1 96 2 18446744073709551615 6 define 96 2 96 8 18446744073709551615 18 TASK_STATE_DELETED 96 9 96 27 18446744073709551615 20 E_TASK_STATE_DELETED 96 28 96 48 18446744073709551615 1 # 97 1 97 2 18446744073709551615 6 define 97 2 97 8 18446744073709551615 18 TASK_STATE_INVALID 97 9 97 27 18446744073709551615 20 E_TASK_STATE_INVALID 97 28 97 48 18446744073709551615 1 # 98 1 98 2 18446744073709551615 6 define 98 2 98 8 18446744073709551615 18 NOTIFY_ACTION_NONE 98 9 98 27 18446744073709551615 20 E_NOTIFY_ACTION_NONE 98 28 98 48 18446744073709551615 1 # 99 1 99 2 18446744073709551615 6 define 99 2 99 8 18446744073709551615 18 NOTIFY_ACTION_BITS 99 9 99 27 18446744073709551615 20 E_NOTIFY_ACTION_BITS 99 28 99 48 18446744073709551615 1 # 100 1 100 2 18446744073709551615 6 define 100 2 100 8 18446744073709551615 18 NOTIFY_ACTION_INCR 100 9 100 27 18446744073709551615 20 E_NOTIFY_ACTION_INCR 100 28 100 48 18446744073709551615 1 # 101 1 101 2 18446744073709551615 6 define 101 2 101 8 18446744073709551615 20 NOTIFY_ACTION_OWRITE 101 9 101 29 18446744073709551615 22 E_NOTIFY_ACTION_OWRITE 101 30 101 52 18446744073709551615 1 # 102 1 102 2 18446744073709551615 6 define 102 2 102 8 18446744073709551615 23 NOTIFY_ACTION_NO_OWRITE 102 9 102 32 18446744073709551615 25 E_NOTIFY_ACTION_NO_OWRITE 102 33 102 58 18446744073709551615 1 # 103 1 103 2 18446744073709551615 5 endif 103 2 103 7 18446744073709551615 1 # 104 1 104 2 18446744073709551615 5 endif 104 2 104 7 18446744073709551615 7 typedef 106 1 106 8 18446744073709551615 4 void 106 9 106 13 18446744073709551615 1 * 106 13 106 14 18446744073709551615 7 mutex_t 106 15 106 22 16 1 ; 106 22 106 23 18446744073709551615 44 /**
 * Refers to the current task handle
 */ 108 1 110 4 18446744073709551615 1 # 111 1 111 2 18446744073709551615 5 ifdef 111 2 111 7 18446744073709551615 11 __cplusplus 111 8 111 19 18446744073709551615 1 # 112 1 112 2 18446744073709551615 6 define 112 2 112 8 18446744073709551615 12 CURRENT_TASK 112 9 112 21 18446744073709551615 1 ( 112 22 112 23 18446744073709551615 1 ( 112 23 112 24 18446744073709551615 4 pros 112 24 112 28 18446744073709551615 2 :: 112 28 112 30 18446744073709551615 6 task_t 112 30 112 36 18446744073709551615 1 ) 112 36 112 37 18446744073709551615 4 NULL 112 37 112 41 18446744073709551615 1 ) 112 41 112 42 18446744073709551615 1 # 113 1 113 2 18446744073709551615 4 else 113 2 113 6 18446744073709551615 1 # 114 1 114 2 18446744073709551615 6 define 114 2 114 8 18446744073709551615 12 CURRENT_TASK 114 9 114 21 18446744073709551615 1 ( 114 22 114 23 18446744073709551615 1 ( 114 23 114 24 18446744073709551615 6 task_t 114 24 114 30 18446744073709551615 1 ) 114 30 114 31 18446744073709551615 4 NULL 114 31 114 35 18446744073709551615 1 ) 114 35 114 36 18446744073709551615 1 # 115 1 115 2 18446744073709551615 5 endif 115 2 115 7 18446744073709551615 1 # 117 1 117 2 18446744073709551615 5 ifdef 117 2 117 7 18446744073709551615 11 __cplusplus 117 8 117 19 18446744073709551615 9 namespace 118 1 118 10 18446744073709551615 1 c 118 11 118 12 17 1 { 118 13 118 14 18446744073709551615 1 # 119 1 119 2 18446744073709551615 5 endif 119 2 119 7 18446744073709551615 130 /**
 * Gets the number of milliseconds since PROS initialized.
 *
 * \return The number of milliseconds since PROS initialized
 */ 121 1 125 4 18446744073709551615 8 uint32_t 126 1 126 9 18 6 millis 126 10 126 16 19 1 ( 126 16 126 17 19 4 void 126 17 126 21 18446744073709551615 1 ) 126 21 126 22 19 1 ; 126 22 126 23 18446744073709551615 131 /**
 * Gets the number of microseconds since PROS initialized,
 * 
 * \return The number of microseconds since PROS initialized
 */ 128 1 132 4 18446744073709551615 8 uint64_t 133 1 133 9 20 6 micros 133 10 133 16 21 1 ( 133 16 133 17 21 4 void 133 17 133 21 18446744073709551615 1 ) 133 21 133 22 21 1 ; 133 22 133 23 18446744073709551615 1208 /**
 * Creates a new task and add it to the list of tasks that are ready to run.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENOMEM - The stack cannot be used as the TCB was not created.
 *
 * \param function
 *        Pointer to the task entry function
 * \param parameters
 *        Pointer to memory that will be used as a parameter for the task being
 *        created. This memory should not typically come from stack, but rather
 *        from dynamically (i.e., malloc'd) or statically allocated memory.
 * \param prio
 *        The priority at which the task should run.
 *        TASK_PRIO_DEFAULT plus/minus 1 or 2 is typically used.
 * \param stack_depth
 *        The number of words (i.e. 4 * stack_depth) available on the task's
 *        stack. TASK_STACK_DEPTH_DEFAULT is typically sufficienct.
 * \param name
 *        A descriptive name for the task.  This is mainly used to facilitate
 *        debugging. The name may be up to 32 characters long.
 *
 * \return A handle by which the newly created task can be referenced. If an
 * error occurred, NULL will be returned and errno can be checked for hints as
 * to why task_create failed.
 */ 135 1 161 4 18446744073709551615 6 task_t 162 1 162 7 1 11 task_create 162 8 162 19 22 1 ( 162 19 162 20 22 9 task_fn_t 162 20 162 29 2 8 function 162 30 162 38 23 1 , 162 38 162 39 22 4 void 162 40 162 44 18446744073709551615 1 * 162 44 162 45 18446744073709551615 5 const 162 46 162 51 18446744073709551615 10 parameters 162 52 162 62 24 1 , 162 62 162 63 22 8 uint32_t 162 64 162 72 18 4 prio 162 73 162 77 25 1 , 162 77 162 78 22 5 const 162 79 162 84 18446744073709551615 8 uint16_t 162 85 162 93 26 11 stack_depth 162 94 162 105 27 1 , 162 105 162 106 22 5 const 163 20 163 25 18446744073709551615 4 char 163 26 163 30 18446744073709551615 1 * 163 30 163 31 18446744073709551615 5 const 163 32 163 37 18446744073709551615 4 name 163 38 163 42 28 1 ) 163 42 163 43 22 1 ; 163 43 163 44 18446744073709551615 423 /**
 * Removes a task from the RTOS real time kernel's management. The task being
 * deleted will be removed from all ready, blocked, suspended and event lists.
 *
 * Memory dynamically allocated by the task is not automatically freed, and
 * should be freed before the task is deleted.
 *
 * \param task
 *        The handle of the task to be deleted.  Passing NULL will cause the
 *        calling task to be deleted.
 */ 165 1 175 4 18446744073709551615 4 void 176 1 176 5 18446744073709551615 11 task_delete 176 6 176 17 29 1 ( 176 17 176 18 29 6 task_t 176 18 176 24 1 4 task 176 25 176 29 30 1 ) 176 29 176 30 29 1 ; 176 30 176 31 18446744073709551615 364 /**
 * Delays a task for a given number of milliseconds.
 *
 * This is not the best method to have a task execute code at predefined
 * intervals, as the delay time is measured from when the delay is requested.
 * To delay cyclically, use task_delay_until().
 *
 * \param milliseconds
 *        The number of milliseconds to wait (1000 milliseconds per second)
 */ 178 1 187 4 18446744073709551615 4 void 188 1 188 5 18446744073709551615 10 task_delay 188 6 188 16 31 1 ( 188 16 188 17 31 5 const 188 17 188 22 18446744073709551615 8 uint32_t 188 23 188 31 18 12 milliseconds 188 32 188 44 32 1 ) 188 44 188 45 31 1 ; 188 45 188 46 18446744073709551615 4 void 190 1 190 5 18446744073709551615 5 delay 190 6 190 11 33 1 ( 190 11 190 12 33 5 const 190 12 190 17 18446744073709551615 8 uint32_t 190 18 190 26 18 12 milliseconds 190 27 190 39 34 1 ) 190 39 190 40 33 1 ; 190 40 190 41 18446744073709551615 546 /**
 * Delays a task until a specified time.  This function can be used by periodic
 * tasks to ensure a constant execution frequency.
 *
 * The task will be woken up at the time *prev_time + delta, and *prev_time will
 * be updated to reflect the time at which the task will unblock.
 *
 * \param prev_time
 *        A pointer to the location storing the setpoint time. This should
 *        typically be initialized to the return value of millis().
 * \param delta
 *        The number of milliseconds to wait (1000 milliseconds per second)
 */ 192 1 204 4 18446744073709551615 4 void 205 1 205 5 18446744073709551615 16 task_delay_until 205 6 205 22 35 1 ( 205 22 205 23 35 8 uint32_t 205 23 205 31 18 1 * 205 31 205 32 18446744073709551615 5 const 205 33 205 38 18446744073709551615 9 prev_time 205 39 205 48 36 1 , 205 48 205 49 35 5 const 205 50 205 55 18446744073709551615 8 uint32_t 205 56 205 64 18 5 delta 205 65 205 70 37 1 ) 205 70 205 71 35 1 ; 205 71 205 72 18446744073709551615 136 /**
 * Gets the priority of the specified task.
 *
 * \param task
 *        The task to check
 *
 * \return The priority of the task
 */ 207 1 214 4 18446744073709551615 8 uint32_t 215 1 215 9 18 17 task_get_priority 215 10 215 27 38 1 ( 215 27 215 28 38 6 task_t 215 28 215 34 1 4 task 215 35 215 39 39 1 ) 215 39 215 40 38 1 ; 215 40 215 41 18446744073709551615 327 /**
 * Sets the priority of the specified task.
 *
 * If the specified task's state is available to be scheduled (e.g. not blocked)
 * and new priority is higher than the currently running task, a context switch
 * may occur.
 *
 * \param task
 *        The task to set
 * \param prio
 *        The new priority of the task
 */ 217 1 228 4 18446744073709551615 4 void 229 1 229 5 18446744073709551615 17 task_set_priority 229 6 229 23 40 1 ( 229 23 229 24 40 6 task_t 229 24 229 30 1 4 task 229 31 229 35 41 1 , 229 35 229 36 40 8 uint32_t 229 37 229 45 18 4 prio 229 46 229 50 42 1 ) 229 50 229 51 40 1 ; 229 51 229 52 18446744073709551615 130 /**
 * Gets the state of the specified task.
 *
 * \param task
 *        The task to check
 *
 * \return The state of the task
 */ 231 1 238 4 18446744073709551615 14 task_state_e_t 239 1 239 15 9 14 task_get_state 239 16 239 30 43 1 ( 239 30 239 31 43 6 task_t 239 31 239 37 1 4 task 239 38 239 42 44 1 ) 239 42 239 43 43 1 ; 239 43 239 44 18446744073709551615 125 /**
 * Suspends the specified task, making it ineligible to be scheduled.
 *
 * \param task
 *        The task to suspend
 */ 241 1 246 4 18446744073709551615 4 void 247 1 247 5 18446744073709551615 12 task_suspend 247 6 247 18 45 1 ( 247 18 247 19 45 6 task_t 247 19 247 25 1 4 task 247 26 247 30 46 1 ) 247 30 247 31 45 1 ; 247 31 247 32 18446744073709551615 121 /**
 * Resumes the specified task, making it eligible to be scheduled.
 *
 * \param task
 *        The task to resume
 */ 249 1 254 4 18446744073709551615 4 void 255 1 255 5 18446744073709551615 11 task_resume 255 6 255 17 47 1 ( 255 17 255 18 47 6 task_t 255 18 255 24 1 4 task 255 25 255 29 48 1 ) 255 29 255 30 47 1 ; 255 30 255 31 18446744073709551615 378 /**
 * Gets the number of tasks the kernel is currently managing, including all
 * ready, blocked, or suspended tasks. A task that has been deleted, but not yet
 * reaped by the idle task will also be included in the count. Tasks recently
 * created may take one context switch to be counted.
 *
 * \return The number of tasks that are currently being managed by the kernel.
 */ 257 1 264 4 18446744073709551615 8 uint32_t 265 1 265 9 18 14 task_get_count 265 10 265 24 49 1 ( 265 24 265 25 49 4 void 265 25 265 29 18446744073709551615 1 ) 265 29 265 30 49 1 ; 265 30 265 31 18446744073709551615 141 /**
 * Gets the name of the specified task.
 *
 * \param task
 *        The task to check
 *
 * \return A pointer to the name of the task
 */ 267 1 274 4 18446744073709551615 4 char 275 1 275 5 18446744073709551615 1 * 275 5 275 6 50 13 task_get_name 275 7 275 20 50 1 ( 275 20 275 21 50 6 task_t 275 21 275 27 1 4 task 275 28 275 32 51 1 ) 275 32 275 33 50 1 ; 275 33 275 34 18446744073709551615 256 /**
 * Gets a task handle from the specified name
 *
 * The operation takes a relatively long time and should be used sparingly.
 *
 * \param name
 *        The name to query
 *
 * \return A task handle with a matching name, or NULL if none were found.
 */ 277 1 286 4 18446744073709551615 6 task_t 287 1 287 7 1 16 task_get_by_name 287 8 287 24 52 1 ( 287 24 287 25 52 5 const 287 25 287 30 18446744073709551615 4 char 287 31 287 35 18446744073709551615 1 * 287 35 287 36 18446744073709551615 4 name 287 37 287 41 53 1 ) 287 41 287 42 52 1 ; 287 42 287 43 18446744073709551615 173 /**
 * Get the currently running task handle. This could be useful if a task
 * wants to tell another task about itself.
 *
 * \return The currently running task handle.
 */ 289 1 294 4 18446744073709551615 6 task_t 295 1 295 7 1 16 task_get_current 295 8 295 24 54 1 ( 295 24 295 25 54 1 ) 295 25 295 26 54 1 ; 295 26 295 27 18446744073709551615 262 /**
 * Sends a simple notification to task and increments the notification counter.
 *
 * See https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html for
 * details.
 *
 * \param task
 *        The task to notify
 *
 * \return Always returns true.
 */ 297 1 307 4 18446744073709551615 8 uint32_t 308 1 308 9 18 11 task_notify 308 10 308 21 55 1 ( 308 21 308 22 55 6 task_t 308 22 308 28 1 4 task 308 29 308 33 56 1 ) 308 33 308 34 55 1 ; 308 34 308 35 18446744073709551615 340 /**
 * 
 * Utilizes task notifications to wait until specified task is complete and deleted,
 * then continues to execute the program. Analogous to std::thread::join in C++.
 *
 * See https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html for
 * details.
 * 
 * \param task
 *        The task to wait on.
 * 
 * \return void
 */ 310 1 322 4 18446744073709551615 4 void 323 1 323 5 18446744073709551615 9 task_join 323 6 323 15 57 1 ( 323 15 323 16 57 6 task_t 323 16 323 22 1 4 task 323 23 323 27 58 1 ) 323 27 323 28 57 1 ; 323 28 323 29 18446744073709551615 859 /**
 * Sends a notification to a task, optionally performing some action. Will also
 * retrieve the value of the notification in the target task before modifying
 * the notification value.
 *
 * See https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html for
 * details.
 *
 * \param task
 *        The task to notify
 * \param value
 *        The value used in performing the action
 * \param action
 *        An action to optionally perform on the receiving task's notification
 *        value
 * \param prev_value
 *        A pointer to store the previous value of the target task's
 *        notification, may be NULL
 *
 * \return Dependent on the notification action.
 * For NOTIFY_ACTION_NO_WRITE: return 0 if the value could be written without
 * needing to overwrite, 1 otherwise.
 * For all other NOTIFY_ACTION values: always return 0
 */ 325 1 348 4 18446744073709551615 8 uint32_t 349 1 349 9 18 15 task_notify_ext 349 10 349 25 59 1 ( 349 25 349 26 59 6 task_t 349 26 349 32 1 4 task 349 33 349 37 60 1 , 349 37 349 38 59 8 uint32_t 349 39 349 47 18 5 value 349 48 349 53 61 1 , 349 53 349 54 59 17 notify_action_e_t 349 55 349 72 15 6 action 349 73 349 79 62 1 , 349 79 349 80 59 8 uint32_t 349 81 349 89 18 1 * 349 89 349 90 18446744073709551615 10 prev_value 349 91 349 101 63 1 ) 349 101 349 102 59 1 ; 349 102 349 103 18446744073709551615 513 /**
 * Waits for a notification to be nonzero.
 *
 * See https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html for
 * details.
 *
 * \param clear_on_exit
 *        If true (1), then the notification value is cleared.
 *        If false (0), then the notification value is decremented.
 * \param timeout
 *        Specifies the amount of time to be spent waiting for a notification
 *        to occur.
 *
 * \return The value of the task's notification value before it is decremented
 * or cleared
 */ 351 1 366 4 18446744073709551615 8 uint32_t 367 1 367 9 18 16 task_notify_take 367 10 367 26 64 1 ( 367 26 367 27 64 4 bool 367 27 367 31 18446744073709551615 13 clear_on_exit 367 32 367 45 65 1 , 367 45 367 46 64 8 uint32_t 367 47 367 55 18 7 timeout 367 56 367 63 66 1 ) 367 63 367 64 64 1 ; 367 64 367 65 18446744073709551615 264 /**
 * Clears the notification for a task.
 *
 * See https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html for
 * details.
 *
 * \param task
 *        The task to clear
 *
 * \return False if there was not a notification waiting, true if there was
 */ 369 1 379 4 18446744073709551615 4 bool 380 1 380 5 18446744073709551615 17 task_notify_clear 380 6 380 23 67 1 ( 380 23 380 24 67 6 task_t 380 24 380 30 1 4 task 380 31 380 35 68 1 ) 380 35 380 36 67 1 ; 380 36 380 37 18446744073709551615 289 /**
 * Creates a mutex.
 *
 * See https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes
 * for details.
 *
 * \return A handle to a newly created mutex. If an error occurred, NULL will be
 * returned and errno can be checked for hints as to why mutex_create failed.
 */ 382 1 390 4 18446744073709551615 7 mutex_t 391 1 391 8 16 12 mutex_create 391 9 391 21 69 1 ( 391 21 391 22 69 4 void 391 22 391 26 18446744073709551615 1 ) 391 26 391 27 69 1 ; 391 27 391 28 18446744073709551615 627 /**
 * Takes and locks a mutex, waiting for up to a certain number of milliseconds
 * before timing out.
 *
 * See https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes
 * for details.
 *
 * \param mutex
 *        Mutex to attempt to lock.
 * \param timeout
 *        Time to wait before the mutex becomes available. A timeout of 0 can
 *        be used to poll the mutex. TIMEOUT_MAX can be used to block
 *        indefinitely.
 *
 * \return True if the mutex was successfully taken, false otherwise. If false
 * is returned, then errno is set with a hint about why the the mutex
 * couldn't be taken.
 */ 393 1 410 4 18446744073709551615 4 bool 411 1 411 5 18446744073709551615 10 mutex_take 411 6 411 16 70 1 ( 411 16 411 17 70 7 mutex_t 411 17 411 24 16 5 mutex 411 25 411 30 71 1 , 411 30 411 31 70 8 uint32_t 411 32 411 40 18 7 timeout 411 41 411 48 72 1 ) 411 48 411 49 70 1 ; 411 49 411 50 18446744073709551615 349 /**
 * Unlocks a mutex.
 *
 * See https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes
 * for details.
 *
 * \param mutex
 *        Mutex to unlock.
 *
 * \return True if the mutex was successfully returned, false otherwise. If
 * false is returned, then errno is set with a hint about why the mutex
 * couldn't be returned.
 */ 413 1 425 4 18446744073709551615 4 bool 426 1 426 5 18446744073709551615 10 mutex_give 426 6 426 16 73 1 ( 426 16 426 17 73 7 mutex_t 426 17 426 24 16 5 mutex 426 25 426 30 74 1 ) 426 30 426 31 73 1 ; 426 31 426 32 18446744073709551615 72 /**
 * Deletes a mutex
 *
 * \param mutex
 *        Mutex to unlock.
 */ 428 1 433 4 18446744073709551615 4 void 434 1 434 5 18446744073709551615 12 mutex_delete 434 6 434 18 75 1 ( 434 18 434 19 75 7 mutex_t 434 19 434 26 16 5 mutex 434 27 434 32 76 1 ) 434 32 434 33 75 1 ; 434 33 434 34 18446744073709551615 1 # 436 1 436 2 18446744073709551615 5 ifdef 436 2 436 7 18446744073709551615 11 __cplusplus 436 8 436 19 18446744073709551615 1 } 437 1 437 2 18446744073709551615 14 // namespace c 437 4 437 18 18446744073709551615 1 } 438 1 438 2 18446744073709551615 17 // namespace pros 438 4 438 21 18446744073709551615 1 } 439 1 439 2 18446744073709551615 1 # 440 1 440 2 18446744073709551615 5 endif 440 2 440 7 18446744073709551615 1 # 442 1 442 2 18446744073709551615 5 endif 442 2 442 7 18446744073709551615 16 // _PROS_RTOS_H_ 442 9 442 25 18446744073709551615 0 0 77 0 0 0 22 0 0 1 13 0 4 pros 20 1 13 0 11 task_t:pros 20 1 13 0 14 task_fn_t:pros 7 1 13 0 40 E_TASK_STATE_RUNNING:task_state_e_t:pros 7 1 13 0 38 E_TASK_STATE_READY:task_state_e_t:pros 7 1 13 0 40 E_TASK_STATE_BLOCKED:task_state_e_t:pros 7 1 13 0 42 E_TASK_STATE_SUSPENDED:task_state_e_t:pros 7 1 13 0 40 E_TASK_STATE_DELETED:task_state_e_t:pros 7 1 13 0 40 E_TASK_STATE_INVALID:task_state_e_t:pros 20 1 13 0 19 task_state_e_t:pros 7 1 13 0 43 E_NOTIFY_ACTION_NONE:notify_action_e_t:pros 7 1 13 0 43 E_NOTIFY_ACTION_BITS:notify_action_e_t:pros 7 1 13 0 43 E_NOTIFY_ACTION_INCR:notify_action_e_t:pros 7 1 13 0 45 E_NOTIFY_ACTION_OWRITE:notify_action_e_t:pros 7 1 13 0 48 E_NOTIFY_ACTION_NO_OWRITE:notify_action_e_t:pros 20 1 13 0 22 notify_action_e_t:pros 20 1 13 0 12 mutex_t:pros 22 1 13 0 6 c:pros 20 1 13 0 8 uint32_t 8 1 13 0 13 millis:c:pros 20 1 13 0 8 uint64_t 8 1 13 0 13 micros:c:pros 8 1 13 0 18 task_create:c:pros 10 1 13 0 67 162:30:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 10 1 13 0 67 162:52:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 10 1 13 0 67 162:73:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 20 1 13 0 8 uint16_t 10 1 13 0 67 162:94:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 10 1 13 0 67 163:38:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 18 task_delete:c:pros 10 1 13 0 67 176:25:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 17 task_delay:c:pros 10 1 13 0 67 188:32:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 12 delay:c:pros 10 1 13 0 67 190:27:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 23 task_delay_until:c:pros 10 1 13 0 67 205:39:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 10 1 13 0 67 205:65:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 24 task_get_priority:c:pros 10 1 13 0 67 215:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 24 task_set_priority:c:pros 10 1 13 0 67 229:31:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 10 1 13 0 67 229:46:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 21 task_get_state:c:pros 10 1 13 0 67 239:38:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 19 task_suspend:c:pros 10 1 13 0 67 247:26:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 18 task_resume:c:pros 10 1 13 0 67 255:25:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 21 task_get_count:c:pros 8 1 13 0 20 task_get_name:c:pros 10 1 13 0 67 275:28:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 23 task_get_by_name:c:pros 10 1 13 0 67 287:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 23 task_get_current:c:pros 8 1 13 0 18 task_notify:c:pros 10 1 13 0 67 308:29:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 16 task_join:c:pros 10 1 13 0 67 323:23:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 22 task_notify_ext:c:pros 10 1 13 0 67 349:33:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 10 1 13 0 67 349:48:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 10 1 13 0 67 349:73:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 10 1 13 0 67 349:91:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 23 task_notify_take:c:pros 10 1 13 0 67 367:32:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 10 1 13 0 67 367:56:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 24 task_notify_clear:c:pros 10 1 13 0 67 380:31:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 19 mutex_create:c:pros 8 1 13 0 17 mutex_take:c:pros 10 1 13 0 67 411:25:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 10 1 13 0 67 411:41:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 17 mutex_give:c:pros 10 1 13 0 67 426:25:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 8 1 13 0 19 mutex_delete:c:pros 10 1 13 0 67 434:27:/home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 0 0 1 0 0 0 60 /home/bluecore/Desktop/Pros/Main Project/include/pros/rtos.h 1698321188