22 serialization::archive 19 0 0 0 0 40 /home/bluecore/Desktop/Pros/Main Project 40 /home/bluecore/Desktop/Pros/Main Project 0 0 166 0 0 0 589 /**
 * \file pros/rotation.hpp
 *
 * Contains prototypes for functions related to the VEX Rotation Sensor.
 *
 * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/rotation.html to learn
 * more.
 *
 * This file should not be modified by users, since it gets replaced whenever
 * a kernel upgrade occurs.
 *
 * \copyright Copyright (c) 2017-2023, Purdue University ACM SIGBots.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */ 1 1 17 4 18446744073709551615 1 # 18 1 18 2 18446744073709551615 6 ifndef 18 2 18 8 18446744073709551615 19 _PROS_ROTATION_HPP_ 18 9 18 28 18446744073709551615 1 # 19 1 19 2 18446744073709551615 6 define 19 2 19 8 18446744073709551615 19 _PROS_ROTATION_HPP_ 19 9 19 28 18446744073709551615 1 # 21 1 21 2 18446744073709551615 7 include 21 2 21 9 18446744073709551615 1 < 21 10 21 11 18446744073709551615 7 cstdint 21 11 21 18 18446744073709551615 1 > 21 18 21 19 18446744073709551615 1 # 23 1 23 2 18446744073709551615 7 include 23 2 23 9 18446744073709551615 17 "pros/rotation.h" 23 10 23 27 18446744073709551615 9 namespace 25 1 25 10 18446744073709551615 4 pros 25 11 25 15 0 1 { 25 16 25 17 18446744073709551615 5 class 26 1 26 6 18446744073709551615 8 Rotation 26 7 26 15 1 1 { 26 16 26 17 18446744073709551615 5 const 27 2 27 7 18446744073709551615 3 std 27 8 27 11 2 2 :: 27 11 27 13 18446744073709551615 7 uint8_t 27 13 27 20 3 5 _port 27 21 27 26 3 1 ; 27 26 27 27 18446744073709551615 6 public 29 2 29 8 18446744073709551615 1 : 29 8 29 9 18446744073709551615 8 Rotation 30 2 30 10 1 1 ( 30 10 30 11 1 5 const 30 11 30 16 18446744073709551615 3 std 30 17 30 20 2 2 :: 30 20 30 22 18446744073709551615 7 uint8_t 30 22 30 29 4 4 port 30 30 30 34 4 1 ) 30 34 30 35 1 1 : 30 36 30 37 1 5 _port 30 38 30 43 3 1 ( 30 43 30 44 1 4 port 30 44 30 48 4 1 ) 30 48 30 49 1 1 { 30 49 30 50 18446744073709551615 1 } 30 50 30 51 18446744073709551615 1 ; 30 51 30 52 18446744073709551615 8 Rotation 32 2 32 10 1 1 ( 32 10 32 11 1 5 const 32 11 32 16 18446744073709551615 3 std 32 17 32 20 2 2 :: 32 20 32 22 18446744073709551615 7 uint8_t 32 22 32 29 5 4 port 32 30 32 34 5 1 , 32 34 32 35 1 5 const 32 36 32 41 18446744073709551615 4 bool 32 42 32 46 18446744073709551615 12 reverse_flag 32 47 32 59 6 1 ) 32 59 32 60 1 1 ; 32 60 32 61 18446744073709551615 467 /**
	 * Reset the Rotation Sensor
	 *
	 * Reset the current absolute position to be the same as the
	 * Rotation Sensor angle.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - The given value is not within the range of V5 ports (1-21).
	 * ENODEV - The port cannot be configured as an Rotation Sensor
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 34 2 47 5 18446744073709551615 7 virtual 48 2 48 9 18446744073709551615 3 std 48 10 48 13 2 2 :: 48 13 48 15 7 7 int32_t 48 15 48 22 7 5 reset 48 23 48 28 7 1 ( 48 28 48 29 7 1 ) 48 29 48 30 7 1 ; 48 30 48 31 18446744073709551615 913 /**
	 * Set the Rotation Sensor's refresh interval in milliseconds.
	 *
	 * The rate may be specified in increments of 5ms, and will be rounded down to
	 * the nearest increment. The minimum allowable refresh rate is 5ms. The default
	 * rate is 10ms.
	 *
	 * As values are copied into the shared memory buffer only at 10ms intervals,
	 * setting this value to less than 10ms does not mean that you can poll the
	 * sensor's values any faster. However, it will guarantee that the data is as
	 * recent as possible.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - The given value is not within the range of V5 ports (1-21).
	 * ENODEV - The port cannot be configured as an Rotation Sensor
	 *
	 * \param rate The data refresh interval in milliseconds
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 50 2 70 5 18446744073709551615 7 virtual 71 2 71 9 18446744073709551615 3 std 71 10 71 13 2 2 :: 71 13 71 15 8 7 int32_t 71 15 71 22 8 13 set_data_rate 71 23 71 36 8 1 ( 71 36 71 37 8 3 std 71 37 71 40 2 2 :: 71 40 71 42 18446744073709551615 8 uint32_t 71 42 71 50 9 4 rate 71 51 71 55 9 1 ) 71 55 71 56 8 5 const 71 57 71 62 18446744073709551615 1 ; 71 62 71 63 18446744073709551615 476 /**
	 * Set the Rotation Sensor position reading to a desired rotation value
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - The given value is not within the range of V5 ports (1-21).
	 * ENODEV - The port cannot be configured as an Rotation Sensor
	 *
	 * \param position
	 * 		  The position in terms of ticks
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 73 2 85 5 18446744073709551615 7 virtual 86 2 86 9 18446744073709551615 3 std 86 10 86 13 2 2 :: 86 13 86 15 10 7 int32_t 86 15 86 22 10 12 set_position 86 23 86 35 10 1 ( 86 35 86 36 10 3 std 86 36 86 39 2 2 :: 86 39 86 41 18446744073709551615 8 uint32_t 86 41 86 49 11 8 position 86 50 86 58 11 1 ) 86 58 86 59 10 1 ; 86 59 86 60 18446744073709551615 461 /**
	 * Reset the Rotation Sensor to a desired rotation value
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - The given value is not within the range of V5 ports (1-21).
	 * ENODEV - The port cannot be configured as an Rotation Sensor
	 *
	 * \param position
	 * 		  The position in terms of ticks
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 88 2 100 5 18446744073709551615 7 virtual 101 2 101 9 18446744073709551615 3 std 101 10 101 13 2 2 :: 101 13 101 15 12 7 int32_t 101 15 101 22 12 14 reset_position 101 23 101 37 12 1 ( 101 37 101 38 12 4 void 101 38 101 42 18446744073709551615 1 ) 101 42 101 43 12 1 ; 101 43 101 44 18446744073709551615 392 /**
	 * Get the Rotation Sensor's current position in centidegrees
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - The given value is not within the range of V5 ports (1-21).
	 * ENODEV - The port cannot be configured as an Rotation Sensor
	 *
	 * \return The position value or PROS_ERR if the operation failed, setting
	 * errno.
	 */ 103 2 113 5 18446744073709551615 7 virtual 114 2 114 9 18446744073709551615 3 std 114 10 114 13 2 2 :: 114 13 114 15 13 7 int32_t 114 15 114 22 13 12 get_position 114 23 114 35 13 1 ( 114 35 114 36 13 1 ) 114 36 114 37 13 1 ; 114 37 114 38 18446744073709551615 469 /**
	 * Get the Rotation Sensor's current velocity in centidegrees per second
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - The given value is not within the range of V5 ports (1-21).
	 * ENODEV - The port cannot be configured as an Rotation Sensor
	 *
	 * \param  port
	 * 				 The V5 Rotation Sensor port number from 1-21
	 * \return The
	 value or PROS_ERR_F if the operation failed, setting
	 * errno.
	 */ 116 2 129 5 18446744073709551615 7 virtual 130 2 130 9 18446744073709551615 3 std 130 10 130 13 2 2 :: 130 13 130 15 14 7 int32_t 130 15 130 22 14 12 get_velocity 130 23 130 35 14 1 ( 130 35 130 36 14 1 ) 130 36 130 37 14 1 ; 130 37 130 38 18446744073709551615 389 /**
	 * Get the Rotation Sensor's current position in centidegrees
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - The given value is not within the range of V5 ports (1-21).
	 * ENODEV - The port cannot be configured as an Rotation Sensor
	 *
	 * \return The angle value or PROS_ERR if the operation failed, setting
	 * errno.
	 */ 132 2 142 5 18446744073709551615 7 virtual 143 2 143 9 18446744073709551615 3 std 143 10 143 13 2 2 :: 143 13 143 15 15 7 int32_t 143 15 143 22 15 9 get_angle 143 23 143 32 15 1 ( 143 32 143 33 15 1 ) 143 33 143 34 15 1 ; 143 34 143 35 18446744073709551615 511 /**
	 * Set the Rotation Sensor's direction reversed flag
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - The given value is not within the range of V5 ports (1-21).
	 * ENODEV - The port cannot be configured as an Rotation Sensor
	 *
	 * \param  value
	 * 				 Determines if the direction of the rotational sensor is
	 * 				 reversed or not.
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 145 2 159 5 18446744073709551615 7 virtual 160 2 160 9 18446744073709551615 3 std 160 10 160 13 2 2 :: 160 13 160 15 16 7 int32_t 160 15 160 22 16 12 set_reversed 160 23 160 35 16 1 ( 160 35 160 36 16 4 bool 160 36 160 40 18446744073709551615 5 value 160 41 160 46 17 1 ) 160 46 160 47 16 1 ; 160 47 160 48 18446744073709551615 389 /**
	 * Reverse the Rotation Sensor's direction.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - The given value is not within the range of V5 ports (1-21).
	 * ENODEV - The port cannot be configured as an Rotation Sensor
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 162 2 172 5 18446744073709551615 7 virtual 173 2 173 9 18446744073709551615 3 std 173 10 173 13 2 2 :: 173 13 173 15 18 7 int32_t 173 15 173 22 18 7 reverse 173 23 173 30 18 1 ( 173 30 173 31 18 1 ) 173 31 173 32 18 1 ; 173 32 173 33 18446744073709551615 369 /**
	 * Get the Rotation Sensor's reversed flag
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - The given value is not within the range of V5 ports (1-21).
	 * ENODEV - The port cannot be configured as an Rotation Sensor
	 *
	 * \return Reversed value or PROS_ERR if the operation failed, setting
	 * errno.
	 */ 175 2 185 5 18446744073709551615 7 virtual 186 2 186 9 18446744073709551615 3 std 186 10 186 13 2 2 :: 186 13 186 15 19 7 int32_t 186 15 186 22 19 12 get_reversed 186 23 186 35 19 1 ( 186 35 186 36 19 1 ) 186 36 186 37 19 1 ; 186 37 186 38 18446744073709551615 1 } 187 1 187 2 18446744073709551615 1 ; 187 2 187 3 18446744073709551615 1 } 188 1 188 2 18446744073709551615 17 // namespace pros 188 4 188 21 18446744073709551615 1 # 190 1 190 2 18446744073709551615 5 endif 190 2 190 7 18446744073709551615 0 0 20 0 0 0 22 0 0 1 13 0 4 pros 4 1 13 0 13 Rotation:pros 22 1 13 0 3 std 6 1 13 0 19 _port:Rotation:pros 10 1 13 0 72 30:30:/home/bluecore/Desktop/Pros/Main Project/include/pros/rotation.hpp 10 1 13 0 72 32:30:/home/bluecore/Desktop/Pros/Main Project/include/pros/rotation.hpp 10 1 13 0 72 32:47:/home/bluecore/Desktop/Pros/Main Project/include/pros/rotation.hpp 21 1 13 0 19 reset:Rotation:pros 21 1 13 0 27 set_data_rate:Rotation:pros 10 1 13 0 72 71:51:/home/bluecore/Desktop/Pros/Main Project/include/pros/rotation.hpp 21 1 13 0 26 set_position:Rotation:pros 10 1 13 0 72 86:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/rotation.hpp 21 1 13 0 28 reset_position:Rotation:pros 21 1 13 0 26 get_position:Rotation:pros 21 1 13 0 26 get_velocity:Rotation:pros 21 1 13 0 23 get_angle:Rotation:pros 21 1 13 0 26 set_reversed:Rotation:pros 10 1 13 0 73 160:41:/home/bluecore/Desktop/Pros/Main Project/include/pros/rotation.hpp 21 1 13 0 21 reverse:Rotation:pros 21 1 13 0 26 get_reversed:Rotation:pros 0 0 1 0 0 0 66 /home/bluecore/Desktop/Pros/Main Project/include/pros/rotation.hpp 1698321178