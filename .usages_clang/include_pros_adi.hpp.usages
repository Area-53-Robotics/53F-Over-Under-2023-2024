22 serialization::archive 19 0 0 0 0 40 /home/bluecore/Desktop/Pros/Main Project 40 /home/bluecore/Desktop/Pros/Main Project 0 0 763 0 0 0 556 /**
 * \file pros/adi.hpp
 *
 * Contains prototypes for interfacing with the ADI.
 *
 * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/adi.html to learn more.
 *
 * This file should not be modified by users, since it gets replaced whenever
 * a kernel upgrade occurs.
 *
 * \copyright Copyright (c) 2017-2023, Purdue University ACM SIGBots.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */ 1 1 16 4 18446744073709551615 1 # 18 1 18 2 18446744073709551615 6 ifndef 18 2 18 8 18446744073709551615 14 _PROS_ADI_HPP_ 18 9 18 23 18446744073709551615 1 # 19 1 19 2 18446744073709551615 6 define 19 2 19 8 18446744073709551615 14 _PROS_ADI_HPP_ 19 9 19 23 18446744073709551615 1 # 21 1 21 2 18446744073709551615 7 include 21 2 21 9 18446744073709551615 1 < 21 10 21 11 18446744073709551615 7 cstdint 21 11 21 18 18446744073709551615 1 > 21 18 21 19 18446744073709551615 1 # 22 1 22 2 18446744073709551615 7 include 22 2 22 9 18446744073709551615 1 < 22 10 22 11 18446744073709551615 5 tuple 22 11 22 16 18446744073709551615 1 > 22 16 22 17 18446744073709551615 1 # 23 1 23 2 18446744073709551615 7 include 23 2 23 9 18446744073709551615 1 < 23 10 23 11 18446744073709551615 7 utility 23 11 23 18 18446744073709551615 1 > 23 18 23 19 18446744073709551615 1 # 24 1 24 2 18446744073709551615 7 include 24 2 24 9 18446744073709551615 1 < 24 10 24 11 18446744073709551615 6 vector 24 11 24 17 18446744073709551615 1 > 24 17 24 18 18446744073709551615 1 # 26 1 26 2 18446744073709551615 7 include 26 2 26 9 18446744073709551615 12 "pros/adi.h" 26 10 26 22 18446744073709551615 9 namespace 28 1 28 10 18446744073709551615 4 pros 28 11 28 15 0 1 { 28 16 28 17 18446744073709551615 88 /** type definition for the pair of smart port and adi port for the basic adi devices */ 30 1 30 89 18446744073709551615 5 using 31 1 31 6 18446744073709551615 19 ext_adi_port_pair_t 31 7 31 26 1 1 = 31 27 31 28 18446744073709551615 3 std 31 29 31 32 2 2 :: 31 32 31 34 18446744073709551615 4 pair 31 34 31 38 3 1 < 31 38 31 39 18446744073709551615 3 std 31 39 31 42 2 2 :: 31 42 31 44 18446744073709551615 7 uint8_t 31 44 31 51 1 1 , 31 51 31 52 18446744073709551615 3 std 31 53 31 56 2 2 :: 31 56 31 58 18446744073709551615 7 uint8_t 31 58 31 65 1 1 > 31 65 31 66 18446744073709551615 1 ; 31 66 31 67 18446744073709551615 98 /** type definition for the triplet of smart port and two adi ports for the two wire adi devices*/ 33 1 33 99 18446744073709551615 5 using 34 1 34 6 18446744073709551615 20 ext_adi_port_tuple_t 34 7 34 27 4 1 = 34 28 34 29 18446744073709551615 3 std 34 30 34 33 2 2 :: 34 33 34 35 18446744073709551615 5 tuple 34 35 34 40 5 1 < 34 40 34 41 18446744073709551615 3 std 34 41 34 44 2 2 :: 34 44 34 46 18446744073709551615 7 uint8_t 34 46 34 53 4 1 , 34 53 34 54 18446744073709551615 3 std 34 55 34 58 2 2 :: 34 58 34 60 18446744073709551615 7 uint8_t 34 60 34 67 4 1 , 34 67 34 68 18446744073709551615 3 std 34 69 34 72 2 2 :: 34 72 34 74 18446744073709551615 7 uint8_t 34 74 34 81 4 1 > 34 81 34 82 18446744073709551615 1 ; 34 82 34 83 18446744073709551615 5 class 36 1 36 6 18446744073709551615 7 ADIPort 36 7 36 14 6 1 { 36 15 36 16 18446744073709551615 6 public 37 2 37 8 18446744073709551615 1 : 37 8 37 9 18446744073709551615 474 /**
	 * Configures an ADI port to act as a given sensor type.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param adi_port
	 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 * \param type
	 *        The configuration type for the port
	 */ 38 2 50 5 18446744073709551615 8 explicit 51 2 51 10 18446744073709551615 7 ADIPort 51 11 51 18 6 1 ( 51 18 51 19 6 3 std 51 19 51 22 2 2 :: 51 22 51 24 18446744073709551615 7 uint8_t 51 24 51 31 7 8 adi_port 51 32 51 40 7 1 , 51 40 51 41 6 19 adi_port_config_e_t 51 42 51 61 8 4 type 51 62 51 66 9 1 = 51 67 51 68 18446744073709551615 20 E_ADI_TYPE_UNDEFINED 51 69 51 89 10 1 ) 51 89 51 90 6 1 ; 51 90 51 91 18446744073709551615 549 /**
	 * Configures an ADI port on an adi expander to act as a given sensor type.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param port_pair
	 *        The pair of the smart port number (from 1-22) and the ADI port number
	 * 		  (from 1-8, 'a'-'h', 'A'-'H') to configure
	 * \param type
	 * 		  The configuration type for the port
	 */ 53 2 66 5 18446744073709551615 7 ADIPort 67 2 67 9 6 1 ( 67 9 67 10 6 19 ext_adi_port_pair_t 67 10 67 29 1 9 port_pair 67 30 67 39 11 1 , 67 39 67 40 6 19 adi_port_config_e_t 67 41 67 60 8 4 type 67 61 67 65 12 1 = 67 66 67 67 18446744073709551615 20 E_ADI_TYPE_UNDEFINED 67 68 67 88 10 1 ) 67 88 67 89 6 1 ; 67 89 67 90 18446744073709551615 116 /**
	 * Gets the configuration for the given ADI port.
	 *
	 * \return The ADI configuration for the given port
	 */ 69 2 73 5 18446744073709551615 3 std 74 2 74 5 2 2 :: 74 5 74 7 13 7 int32_t 74 7 74 14 13 10 get_config 74 15 74 25 13 1 ( 74 25 74 26 13 1 ) 74 26 74 27 13 5 const 74 28 74 33 18446744073709551615 1 ; 74 33 74 34 18446744073709551615 103 /**
	 * Gets the value for the given ADI port.
	 *
	 * \return The value stored for the given port
	 */ 76 2 80 5 18446744073709551615 3 std 81 2 81 5 2 2 :: 81 5 81 7 14 7 int32_t 81 7 81 14 14 9 get_value 81 15 81 24 14 1 ( 81 24 81 25 14 1 ) 81 25 81 26 14 5 const 81 27 81 32 18446744073709551615 1 ; 81 32 81 33 18446744073709551615 239 /**
	 * Configures an ADI port to act as a given sensor type.
	 *
	 * \param type
	 *        The configuration type for the port
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 83 2 91 5 18446744073709551615 3 std 92 2 92 5 2 2 :: 92 5 92 7 15 7 int32_t 92 7 92 14 15 10 set_config 92 15 92 25 15 1 ( 92 25 92 26 15 19 adi_port_config_e_t 92 26 92 45 8 4 type 92 46 92 50 16 1 ) 92 50 92 51 15 5 const 92 52 92 57 18446744073709551615 1 ; 92 57 92 58 18446744073709551615 355 /**
	 * Sets the value for the given ADI port.
	 *
	 * This only works on ports configured as outputs, and the behavior will
	 * change depending on the configuration of the port.
	 *
	 * \param value
	 *        The value to set the ADI port to
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 94 2 105 5 18446744073709551615 3 std 106 2 106 5 2 2 :: 106 5 106 7 17 7 int32_t 106 7 106 14 17 9 set_value 106 15 106 24 17 1 ( 106 24 106 25 17 3 std 106 25 106 28 2 2 :: 106 28 106 30 18446744073709551615 7 int32_t 106 30 106 37 18 5 value 106 38 106 43 18 1 ) 106 43 106 44 17 5 const 106 45 106 50 18446744073709551615 1 ; 106 50 106 51 18446744073709551615 9 protected 108 2 108 11 18446744073709551615 1 : 108 11 108 12 18446744073709551615 3 std 109 2 109 5 2 2 :: 109 5 109 7 18446744073709551615 7 uint8_t 109 7 109 14 19 11 _smart_port 109 15 109 26 19 1 ; 109 26 109 27 18446744073709551615 3 std 110 2 110 5 2 2 :: 110 5 110 7 18446744073709551615 7 uint8_t 110 7 110 14 20 9 _adi_port 110 15 110 24 20 1 ; 110 24 110 25 18446744073709551615 1 } 111 1 111 2 18446744073709551615 1 ; 111 2 111 3 18446744073709551615 5 class 113 1 113 6 18446744073709551615 11 ADIAnalogIn 113 7 113 18 21 1 : 113 19 113 20 18446744073709551615 9 protected 113 21 113 30 18446744073709551615 7 ADIPort 113 31 113 38 6 1 { 113 39 113 40 18446744073709551615 6 public 114 2 114 8 18446744073709551615 1 : 114 8 114 9 18446744073709551615 513 /**
	 * Configures an ADI port to act as an Analog Input.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param adi_port
	 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 115 2 128 5 18446744073709551615 8 explicit 129 2 129 10 18446744073709551615 11 ADIAnalogIn 129 11 129 22 21 1 ( 129 22 129 23 21 3 std 129 23 129 26 2 2 :: 129 26 129 28 18446744073709551615 7 uint8_t 129 28 129 35 22 8 adi_port 129 36 129 44 22 1 ) 129 44 129 45 21 1 ; 129 45 129 46 18446744073709551615 591 /**
	 * Configures an ADI port on an adi expander to act as an Analog Input.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param port_pair
	 *        The pair of the smart port number (from 1-22) and the
	 * 		  ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 131 2 145 5 18446744073709551615 11 ADIAnalogIn 146 2 146 13 21 1 ( 146 13 146 14 21 19 ext_adi_port_pair_t 146 14 146 33 1 9 port_pair 146 34 146 43 23 1 ) 146 43 146 44 21 1 ; 146 44 146 45 18446744073709551615 953 /**
	 * Calibrates the analog sensor on the specified port and returns the new
	 * calibration value.
	 *
	 * This method assumes that the true sensor value is not actively changing at
	 * this time and computes an average from approximately 500 samples, 1 ms
	 * apart, for a 0.5 s period of calibration. The average value thus calculated
	 * is returned and stored for later calls to the
	 * pros::ADIAnalogIn::get_value_calibrated() and
	 * pros::ADIAnalogIn::get_value_calibrated_HR() functions. These functions
	 * will return the difference between this value and the current sensor value
	 * when called.
	 *
	 * Do not use this function when the sensor value might be unstable (gyro
	 * rotation, accelerometer movement).
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as an analog input
	 *
	 * \return The average sensor value computed by this function
	 */ 148 2 169 5 18446744073709551615 3 std 170 2 170 5 2 2 :: 170 5 170 7 24 7 int32_t 170 7 170 14 24 9 calibrate 170 15 170 24 24 1 ( 170 24 170 25 24 1 ) 170 25 170 26 24 5 const 170 27 170 32 18446744073709551615 1 ; 170 32 170 33 18446744073709551615 599 /**
	 * Gets the 12 bit calibrated value of an analog input port.
	 *
	 * The pros::ADIAnalogIn::calibrate() function must be run first. This
	 * function is inappropriate for sensor values intended for integration, as
	 * round-off error can accumulate causing drift over time. Use
	 * pros::ADIAnalogIn::get_value_calibrated_HR() instead.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as an analog input
	 *
	 * \return The difference of the sensor value from its calibrated default from
	 * -4095 to 4095
	 */ 172 2 186 5 18446744073709551615 3 std 187 2 187 5 2 2 :: 187 5 187 7 25 7 int32_t 187 7 187 14 25 20 get_value_calibrated 187 15 187 35 25 1 ( 187 35 187 36 25 1 ) 187 36 187 37 25 5 const 187 38 187 43 18446744073709551615 1 ; 187 43 187 44 18446744073709551615 867 /**
	 * Gets the 16 bit calibrated value of an analog input port.
	 *
	 * The pros::ADIAnalogIn::calibrate() function must be run first. This is
	 * intended for integrated sensor values such as gyros and accelerometers to
	 * reduce drift due to round-off, and should not be used on a sensor such as a
	 * line tracker or potentiometer.
	 *
	 * The value returned actually has 16 bits of "precision", even though the ADC
	 * only reads 12 bits, so that error induced by the average value being
	 * between two values when integrated over time is trivial. Think of the value
	 * as the true value times 16.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as an analog input
	 *
	 * \return The difference of the sensor value from its calibrated default from
	 * -16384 to 16384
	 */ 189 2 208 5 18446744073709551615 3 std 209 2 209 5 2 2 :: 209 5 209 7 26 7 int32_t 209 7 209 14 26 23 get_value_calibrated_HR 209 15 209 38 26 1 ( 209 38 209 39 26 1 ) 209 39 209 40 26 5 const 209 41 209 46 18446744073709551615 1 ; 209 46 209 47 18446744073709551615 478 /**
	 * Gets the 12-bit value of the specified port.
	 *
	 * The value returned is undefined if the analog pin has been switched to a
	 * different mode.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as an analog input
	 *
	 * \return The analog sensor value, where a value of 0 reflects an input
	 * voltage of nearly 0 V and a value of 4095 reflects an input voltage of
	 * nearly 5 V
	 */ 211 2 224 5 18446744073709551615 5 using 225 2 225 7 18446744073709551615 7 ADIPort 225 8 225 15 6 2 :: 225 15 225 17 18446744073709551615 9 get_value 225 17 225 26 27 1 ; 225 26 225 27 18446744073709551615 1 } 226 1 226 2 18446744073709551615 1 ; 226 2 226 3 18446744073709551615 40 // using ADIPotentiometer = ADIAnalogIn; 228 1 228 41 18446744073709551615 5 using 229 1 229 6 18446744073709551615 13 ADILineSensor 229 7 229 20 28 1 = 229 21 229 22 18446744073709551615 11 ADIAnalogIn 229 23 229 34 21 1 ; 229 34 229 35 18446744073709551615 5 using 230 1 230 6 18446744073709551615 14 ADILightSensor 230 7 230 21 29 1 = 230 22 230 23 18446744073709551615 11 ADIAnalogIn 230 24 230 35 21 1 ; 230 35 230 36 18446744073709551615 5 using 231 1 231 6 18446744073709551615 16 ADIAccelerometer 231 7 231 23 30 1 = 231 24 231 25 18446744073709551615 11 ADIAnalogIn 231 26 231 37 21 1 ; 231 37 231 38 18446744073709551615 5 class 233 1 233 6 18446744073709551615 12 ADIAnalogOut 233 7 233 19 31 1 : 233 20 233 21 18446744073709551615 7 private 233 22 233 29 18446744073709551615 7 ADIPort 233 30 233 37 6 1 { 233 38 233 39 18446744073709551615 6 public 234 2 234 8 18446744073709551615 1 : 234 8 234 9 18446744073709551615 408 /**
	 * Configures an ADI port to act as an Analog Output.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param adi_port
	 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 */ 235 2 245 5 18446744073709551615 8 explicit 246 2 246 10 18446744073709551615 12 ADIAnalogOut 246 11 246 23 31 1 ( 246 23 246 24 31 3 std 246 24 246 27 2 2 :: 246 27 246 29 18446744073709551615 7 uint8_t 246 29 246 36 32 8 adi_port 246 37 246 45 32 1 ) 246 45 246 46 31 1 ; 246 46 246 47 18446744073709551615 490 /**
	 * Configures an ADI port on an adi_expander to act as an Analog Output.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param port_pair
	 *        The pair of the smart port number (from 1-22) and the
	 * 		  ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 *
	 */ 248 2 260 5 18446744073709551615 12 ADIAnalogOut 261 2 261 14 31 1 ( 261 14 261 15 31 19 ext_adi_port_pair_t 261 15 261 34 1 9 port_pair 261 35 261 44 33 1 ) 261 44 261 45 31 1 ; 261 45 261 46 18446744073709551615 508 /**
	 * Sets the value for the given ADI port.
	 *
	 * This only works on ports configured as outputs, and the behavior will
	 * change depending on the configuration of the port.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as an analog output
	 *
	 * \param value
	 *        The value to set the ADI port to
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 263 2 278 5 18446744073709551615 5 using 279 2 279 7 18446744073709551615 7 ADIPort 279 8 279 15 6 2 :: 279 15 279 17 18446744073709551615 9 set_value 279 17 279 26 34 1 ; 279 26 279 27 18446744073709551615 1 } 280 1 280 2 18446744073709551615 1 ; 280 2 280 3 18446744073709551615 5 class 282 1 282 6 18446744073709551615 13 ADIDigitalOut 282 7 282 20 35 1 : 282 21 282 22 18446744073709551615 7 private 282 23 282 30 18446744073709551615 7 ADIPort 282 31 282 38 6 1 { 282 39 282 40 18446744073709551615 6 public 283 2 283 8 18446744073709551615 1 : 283 8 283 9 18446744073709551615 472 /**
	 * Configures an ADI port to act as a Digital Output.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param adi_port
	 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 * \param init_state
	 *        The initial state for the port
	 */ 284 2 296 5 18446744073709551615 8 explicit 297 2 297 10 18446744073709551615 13 ADIDigitalOut 297 11 297 24 35 1 ( 297 24 297 25 35 3 std 297 25 297 28 2 2 :: 297 28 297 30 18446744073709551615 7 uint8_t 297 30 297 37 36 8 adi_port 297 38 297 46 36 1 , 297 46 297 47 35 4 bool 297 48 297 52 18446744073709551615 10 init_state 297 53 297 63 37 1 = 297 64 297 65 18446744073709551615 3 LOW 297 66 297 69 37 1 ) 297 69 297 70 35 1 ; 297 70 297 71 18446744073709551615 550 /**
	 * Configures an ADI port on an adi_expander to act as a Digital Output.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param port_pair
	 *        The pair of the smart port number (from 1-22) and the
	 * 		  ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 * \param init_state
	 *        The initial state for the port
	 */ 299 2 312 5 18446744073709551615 13 ADIDigitalOut 313 2 313 15 35 1 ( 313 15 313 16 35 19 ext_adi_port_pair_t 313 16 313 35 1 9 port_pair 313 36 313 45 38 1 , 313 45 313 46 35 4 bool 313 47 313 51 18446744073709551615 10 init_state 313 52 313 62 39 1 = 313 63 313 64 18446744073709551615 3 LOW 313 65 313 68 39 1 ) 313 68 313 69 35 1 ; 313 69 313 70 18446744073709551615 502 /**
	 * Sets the value for the given ADI port.
	 *
	 * This only works on ports configured as outputs, and the behavior will
	 * change depending on the configuration of the port.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a digital output
	 *
	 * \param value
	 *        The value to set the ADI port to
	 *
	 * \return if the operation was successful or PROS_ERR if the operation failed, setting errno.
	 */ 315 2 329 5 18446744073709551615 5 using 330 2 330 7 18446744073709551615 7 ADIPort 330 8 330 15 6 2 :: 330 15 330 17 18446744073709551615 9 set_value 330 17 330 26 34 1 ; 330 26 330 27 18446744073709551615 1 } 331 1 331 2 18446744073709551615 1 ; 331 2 331 3 18446744073709551615 5 class 333 1 333 6 18446744073709551615 12 ADIDigitalIn 333 7 333 19 40 1 : 333 20 333 21 18446744073709551615 7 private 333 22 333 29 18446744073709551615 7 ADIPort 333 30 333 37 6 1 { 333 38 333 39 18446744073709551615 6 public 334 2 334 8 18446744073709551615 1 : 334 8 334 9 18446744073709551615 407 /**
	 * Configures an ADI port to act as a Digital Input.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param adi_port
	 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 */ 335 2 345 5 18446744073709551615 8 explicit 346 2 346 10 18446744073709551615 12 ADIDigitalIn 346 11 346 23 40 1 ( 346 23 346 24 40 3 std 346 24 346 27 2 2 :: 346 27 346 29 18446744073709551615 7 uint8_t 346 29 346 36 41 8 adi_port 346 37 346 45 41 1 ) 346 45 346 46 40 1 ; 346 46 346 47 18446744073709551615 485 /**
	 * Configures an ADI port on an adi_expander to act as a Digital Input.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param port_pair
	 *        The pair of the smart port number (from 1-22) and the
	 *  	  ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 */ 348 2 359 5 18446744073709551615 12 ADIDigitalIn 360 2 360 14 40 1 ( 360 14 360 15 40 19 ext_adi_port_pair_t 360 15 360 34 1 9 port_pair 360 35 360 44 42 1 ) 360 44 360 45 40 1 ; 360 45 360 46 18446744073709551615 826 /**
	 * Gets a rising-edge case for a digital button press.
	 *
	 * This function is not thread-safe.
	 * Multiple tasks polling a single button may return different results under
	 * the same circumstances, so only one task should call this function for any
	 * given button. E.g., Task A calls this function for buttons 1 and 2. Task B
	 * may call this function for button 3, but should not for buttons 1 or 2. A
	 * typical use-case for this function is to call inside opcontrol to detect
	 * new button presses, and not in any other tasks.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a digital input
	 *
	 * \return 1 if the button is pressed and had not been pressed the last time
	 * this function was called, 0 otherwise.
	 */ 362 2 379 5 18446744073709551615 3 std 380 2 380 5 2 2 :: 380 5 380 7 43 7 int32_t 380 7 380 14 43 13 get_new_press 380 15 380 28 43 1 ( 380 28 380 29 43 1 ) 380 29 380 30 43 5 const 380 31 380 36 18446744073709551615 1 ; 380 36 380 37 18446744073709551615 255 /**
	 * Gets the value for the given ADI port.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a digital input
	 *
	 * \return The value stored for the given port
	 */ 382 2 390 5 18446744073709551615 5 using 391 2 391 7 18446744073709551615 7 ADIPort 391 8 391 15 6 2 :: 391 15 391 17 18446744073709551615 9 get_value 391 17 391 26 27 1 ; 391 26 391 27 18446744073709551615 1 } 392 1 392 2 18446744073709551615 1 ; 392 2 392 3 18446744073709551615 5 using 394 1 394 6 18446744073709551615 9 ADIButton 394 7 394 16 44 1 = 394 17 394 18 18446744073709551615 12 ADIDigitalIn 394 19 394 31 40 1 ; 394 31 394 32 18446744073709551615 5 class 396 1 396 6 18446744073709551615 8 ADIMotor 396 7 396 15 45 1 : 396 16 396 17 18446744073709551615 7 private 396 18 396 25 18446744073709551615 7 ADIPort 396 26 396 33 6 1 { 396 34 396 35 18446744073709551615 6 public 397 2 397 8 18446744073709551615 1 : 397 8 397 9 18446744073709551615 399 /**
	 * Configures an ADI port to act as a Motor.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param adi_port
	 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 */ 398 2 408 5 18446744073709551615 8 explicit 409 2 409 10 18446744073709551615 8 ADIMotor 409 11 409 19 45 1 ( 409 19 409 20 45 3 std 409 20 409 23 2 2 :: 409 23 409 25 18446744073709551615 7 uint8_t 409 25 409 32 46 8 adi_port 409 33 409 41 46 1 ) 409 41 409 42 45 1 ; 409 42 409 43 18446744073709551615 477 /**
	 * Configures an ADI port on an adi_expander to act as a Motor.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param port_pair
	 *        The pair of the smart port number (from 1-22) and the
	 *  	  ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 */ 411 2 422 5 18446744073709551615 8 ADIMotor 423 2 423 10 45 1 ( 423 10 423 11 45 19 ext_adi_port_pair_t 423 11 423 30 1 9 port_pair 423 31 423 40 47 1 ) 423 40 423 41 45 1 ; 423 41 423 42 18446744073709551615 297 /**
	 * Stops the motor on the given port.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a motor
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 425 2 434 5 18446744073709551615 3 std 435 2 435 5 2 2 :: 435 5 435 7 48 7 int32_t 435 7 435 14 48 4 stop 435 15 435 19 48 1 ( 435 19 435 20 48 1 ) 435 20 435 21 48 5 const 435 22 435 27 18446744073709551615 1 ; 435 27 435 28 18446744073709551615 437 /**
	 * Sets the speed of the motor on the given port.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a motor
	 *
	 * \param value
	 *        The new signed speed; -127 is full reverse and 127 is full forward,
	 *        with 0 being off
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 437 2 450 5 18446744073709551615 5 using 451 2 451 7 18446744073709551615 7 ADIPort 451 8 451 15 6 2 :: 451 15 451 17 18446744073709551615 9 set_value 451 17 451 26 34 1 ; 451 26 451 27 18446744073709551615 278 /**
	 * Gets the last set speed of the motor on the given port.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a motor
	 *
	 * \return The last set speed of the motor on the given port
	 */ 453 2 461 5 18446744073709551615 5 using 462 2 462 7 18446744073709551615 7 ADIPort 462 8 462 15 6 2 :: 462 15 462 17 18446744073709551615 9 get_value 462 17 462 26 27 1 ; 462 26 462 27 18446744073709551615 1 } 463 1 463 2 18446744073709551615 1 ; 463 2 463 3 18446744073709551615 5 class 465 1 465 6 18446744073709551615 10 ADIEncoder 465 7 465 17 49 1 : 465 18 465 19 18446744073709551615 7 private 465 20 465 27 18446744073709551615 7 ADIPort 465 28 465 35 6 1 { 465 36 465 37 18446744073709551615 6 public 466 2 466 8 18446744073709551615 1 : 466 8 466 9 18446744073709551615 592 /**
	 * Configures a set of ADI ports to act as an Encoder.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param adi_port_top
	 *        The  "top" wire from the encoder sensor with the removable cover side up
	 * \param adi_port_bottom
	 *       The "bottom" wire from the encoder sensor
	 * \param reverse
	 *        If "true", the sensor will count in the opposite direction
	 */ 467 2 481 5 18446744073709551615 10 ADIEncoder 482 2 482 12 49 1 ( 482 12 482 13 49 3 std 482 13 482 16 2 2 :: 482 16 482 18 18446744073709551615 7 uint8_t 482 18 482 25 50 12 adi_port_top 482 26 482 38 50 1 , 482 38 482 39 49 3 std 482 40 482 43 2 2 :: 482 43 482 45 18446744073709551615 7 uint8_t 482 45 482 52 51 15 adi_port_bottom 482 53 482 68 51 1 , 482 68 482 69 49 4 bool 482 70 482 74 18446744073709551615 8 reversed 482 75 482 83 52 1 = 482 84 482 85 18446744073709551615 5 false 482 86 482 91 18446744073709551615 1 ) 482 91 482 92 49 1 ; 482 92 482 93 18446744073709551615 628 /**
	 * Configures a set of ADI ports on an adi_expander to act as an Encoder.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param port_tuple
	 *        The tuple of the smart port number, the "top" wire from the encoder
	 * 		  sensor with the removable cover side up, and the "bottom" wire from
	 * 		  the encoder sensor
	 * \param reverse
	 *        If "true", the sensor will count in the opposite direction
	 */ 484 2 498 5 18446744073709551615 10 ADIEncoder 499 2 499 12 49 1 ( 499 12 499 13 49 20 ext_adi_port_tuple_t 499 13 499 33 4 10 port_tuple 499 34 499 44 53 1 , 499 44 499 45 49 4 bool 499 46 499 50 18446744073709551615 8 reversed 499 51 499 59 54 1 = 499 60 499 61 18446744073709551615 5 false 499 62 499 67 18446744073709551615 1 ) 499 67 499 68 49 1 ; 499 68 499 69 18446744073709551615 85 // Delete copy constructor to prevent a compilation error from the constructor above. 501 2 501 87 18446744073709551615 10 ADIEncoder 502 2 502 12 49 1 ( 502 12 502 13 49 10 ADIEncoder 502 13 502 23 49 1 & 502 24 502 25 18446744073709551615 1 ) 502 25 502 26 49 1 = 502 27 502 28 49 6 delete 502 29 502 35 18446744073709551615 1 ; 502 35 502 36 18446744073709551615 445 /**
	 * Sets the encoder value to zero.
	 *
	 * It is safe to use this method while an encoder is enabled. It is not
	 * necessary to call this method before stopping or starting an encoder.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a motor
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 504 2 516 5 18446744073709551615 3 std 517 2 517 5 2 2 :: 517 5 517 7 55 7 int32_t 517 7 517 14 55 5 reset 517 15 517 20 55 1 ( 517 20 517 21 55 1 ) 517 21 517 22 55 5 const 517 23 517 28 18446744073709551615 1 ; 517 28 517 29 18446744073709551615 346 /**
	 * Gets the number of ticks recorded by the encoder.
	 *
	 * There are 360 ticks in one revolution.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a motor
	 *
	 * \return The signed and cumulative number of counts since the last start or
	 * reset
	 */ 519 2 530 5 18446744073709551615 3 std 531 2 531 5 2 2 :: 531 5 531 7 56 7 int32_t 531 7 531 14 56 9 get_value 531 15 531 24 56 1 ( 531 24 531 25 56 1 ) 531 25 531 26 56 5 const 531 27 531 32 18446744073709551615 1 ; 531 32 531 33 18446744073709551615 1 } 532 1 532 2 18446744073709551615 1 ; 532 2 532 3 18446744073709551615 5 class 534 1 534 6 18446744073709551615 13 ADIUltrasonic 534 7 534 20 57 1 : 534 21 534 22 18446744073709551615 7 private 534 23 534 30 18446744073709551615 7 ADIPort 534 31 534 38 6 1 { 534 39 534 40 18446744073709551615 6 public 535 2 535 8 18446744073709551615 1 : 535 8 535 9 18446744073709551615 625 /**
	 * Configures a set of ADI ports to act as an Ultrasonic sensor.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param port_ping
	 *        The port connected to the orange OUTPUT cable. This should be in port
	 *        1, 3, 5, or 7 ('A', 'C', 'E', 'G').
	 * \param port_echo
	 *        The port connected to the yellow INPUT cable. This should be in the
	 *        next highest port following port_ping.
	 */ 536 2 550 5 18446744073709551615 13 ADIUltrasonic 551 2 551 15 57 1 ( 551 15 551 16 57 3 std 551 16 551 19 2 2 :: 551 19 551 21 18446744073709551615 7 uint8_t 551 21 551 28 58 13 adi_port_ping 551 29 551 42 58 1 , 551 42 551 43 57 3 std 551 44 551 47 2 2 :: 551 47 551 49 18446744073709551615 7 uint8_t 551 49 551 56 59 13 adi_port_echo 551 57 551 70 59 1 ) 551 70 551 71 57 1 ; 551 71 551 72 18446744073709551615 615 /**
	 * Configures a set of ADI ports on an adi_expander to act as an Ultrasonic sensor.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param port_tuple
	 *        The tuple of the smart port number, the port connected to the orange
	 * 		  OUTPUT cable (1, 3, 5, 7 or 'A', 'C', 'E', 'G'), and the port
	 * 		  connected to the yellow INPUT cable (the next) highest port
	 * 		  following port_ping).
	 */ 553 2 566 5 18446744073709551615 13 ADIUltrasonic 567 2 567 15 57 1 ( 567 15 567 16 57 20 ext_adi_port_tuple_t 567 16 567 36 4 10 port_tuple 567 37 567 47 60 1 ) 567 47 567 48 57 1 ; 567 48 567 49 18446744073709551615 555 /**
	 * Gets the current ultrasonic sensor value in centimeters.
	 *
	 * If no object was found, zero is returned. If the ultrasonic sensor was
	 * never started, the return value is undefined. Round and fluffy objects can
	 * cause inaccurate values to be returned.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as an ultrasonic
	 *
	 * \return The distance to the nearest object in m^-4 (10000 indicates 1
	 * meter), measured from the sensor's mounting points.
	 */ 569 2 582 5 18446744073709551615 3 std 583 2 583 5 2 2 :: 583 5 583 7 61 7 int32_t 583 7 583 14 61 9 get_value 583 15 583 24 61 1 ( 583 24 583 25 61 1 ) 583 25 583 26 61 5 const 583 27 583 32 18446744073709551615 1 ; 583 32 583 33 18446744073709551615 1 } 584 1 584 2 18446744073709551615 1 ; 584 2 584 3 18446744073709551615 5 class 586 1 586 6 18446744073709551615 7 ADIGyro 586 7 586 14 62 1 : 586 15 586 16 18446744073709551615 7 private 586 17 586 24 18446744073709551615 7 ADIPort 586 25 586 32 6 1 { 586 33 586 34 18446744073709551615 6 public 587 2 587 8 18446744073709551615 1 : 587 8 587 9 18446744073709551615 1042 /**
	 * Initializes a gyroscope on the given port. If the given port has not
	 * previously been configured as a gyro, then this function starts a 1300ms
	 * calibration period.
	 *
	 * It is highly recommended that an ADIGyro object be created in initialize()
	 * when the robot is stationary to ensure proper calibration. If an ADIGyro
	 * object is declared at the global scope, a hardcoded 1300ms delay at the
	 * beginning of initialize will be necessary to ensure that the gyro's
	 * returned values are correct at the beginning of autonomous/opcontrol.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param adi_port
	 *        The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H')
	 * \param multiplier
	 *        A scalar value that will be multiplied by the gyro heading value
	 *        supplied by the ADI
	 */ 588 2 609 5 18446744073709551615 8 explicit 610 2 610 10 18446744073709551615 7 ADIGyro 610 11 610 18 62 1 ( 610 18 610 19 62 3 std 610 19 610 22 2 2 :: 610 22 610 24 18446744073709551615 7 uint8_t 610 24 610 31 63 8 adi_port 610 32 610 40 63 1 , 610 40 610 41 62 6 double 610 42 610 48 18446744073709551615 10 multiplier 610 49 610 59 64 1 = 610 60 610 61 18446744073709551615 1 1 610 62 610 63 18446744073709551615 1 ) 610 63 610 64 62 1 ; 610 64 610 65 18446744073709551615 1116 /**
	 * Initializes a gyroscope on the given port of an adi expander. If the given
	 * port has not previously been configured as a gyro, then this function starts
	 * a 1300ms calibration period.
	 *
	 * It is highly recommended that an ADIGyro object be created in initialize()
	 * when the robot is stationary to ensure proper calibration. If an ADIGyro
	 * object is declared at the global scope, a hardcoded 1300ms delay at the
	 * beginning of initialize will be necessary to ensure that the gyro's
	 * returned values are correct at the beginning of autonomous/opcontrol.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param port_pair
	 *        The pair of the smart port number (from 1-22) and the
	 *  	  ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 * \param multiplier
	 *        A scalar value that will be multiplied by the gyro heading value
	 *        supplied by the ADI
	 */ 612 2 634 5 18446744073709551615 7 ADIGyro 635 2 635 9 62 1 ( 635 9 635 10 62 19 ext_adi_port_pair_t 635 10 635 29 1 9 port_pair 635 30 635 39 65 1 , 635 39 635 40 62 6 double 635 41 635 47 18446744073709551615 10 multiplier 635 48 635 58 66 1 = 635 59 635 60 18446744073709551615 1 1 635 61 635 62 18446744073709551615 1 ) 635 62 635 63 62 1 ; 635 63 635 64 18446744073709551615 500 /**
	 * Gets the current gyro angle in tenths of a degree. Unless a multiplier is
	 * applied to the gyro, the return value will be a whole number representing
	 * the number of degrees of rotation times 10.
	 *
	 * There are 360 degrees in a circle, thus the gyro will return 3600 for one
	 * whole rotation.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a gyro
	 *
	 * \return The gyro angle in degrees.
	 */ 637 2 650 5 18446744073709551615 6 double 651 2 651 8 18446744073709551615 9 get_value 651 9 651 18 67 1 ( 651 18 651 19 67 1 ) 651 19 651 20 67 5 const 651 21 651 26 18446744073709551615 1 ; 651 26 651 27 18446744073709551615 297 /**
	 * Resets the gyroscope value to zero.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a gyro
	 *
	 * \return 1 if the operation was successful or PROS_ERR if the operation
	 * failed, setting errno.
	 */ 653 2 662 5 18446744073709551615 3 std 663 2 663 5 2 2 :: 663 5 663 7 68 7 int32_t 663 7 663 14 68 5 reset 663 15 663 20 68 1 ( 663 20 663 21 68 1 ) 663 21 663 22 68 5 const 663 23 663 28 18446744073709551615 1 ; 663 28 663 29 18446744073709551615 1 } 664 1 664 2 18446744073709551615 1 ; 664 2 664 3 18446744073709551615 5 class 666 1 666 6 18446744073709551615 16 ADIPotentiometer 666 7 666 23 69 1 : 666 24 666 25 18446744073709551615 6 public 666 26 666 32 18446744073709551615 11 ADIAnalogIn 666 33 666 44 21 1 { 666 45 666 46 18446744073709551615 6 public 667 2 667 8 18446744073709551615 1 : 667 8 667 9 18446744073709551615 532 /**
	 * Configures an ADI port to act as a Potentiometer.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param adi_port
	 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 * \param potentiometer_type
 	 *        An adi_potentiometer_type_e_t enum value specifying the potentiometer version type
	 */ 668 2 680 5 18446744073709551615 16 ADIPotentiometer 681 2 681 18 69 1 ( 681 18 681 19 69 3 std 681 19 681 22 2 2 :: 681 22 681 24 18446744073709551615 7 uint8_t 681 24 681 31 70 8 adi_port 681 32 681 40 70 1 , 681 40 681 41 69 26 adi_potentiometer_type_e_t 681 42 681 68 71 18 potentiometer_type 681 69 681 87 72 1 = 681 88 681 89 18446744073709551615 13 E_ADI_POT_EDR 681 90 681 103 73 1 ) 681 103 681 104 69 1 ; 681 104 681 105 18446744073709551615 609 /**
	 * Configures an ADI port on an adi_expander to act as a Potentiometer.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param adi_port
	 *        The pair of the smart port number (from 1-22) and the
	 *  	  ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 * \param potentiometer_type
 	 *        An adi_potentiometer_type_e_t enum value specifying the potentiometer version type
	 */ 683 2 696 5 18446744073709551615 16 ADIPotentiometer 697 2 697 18 69 1 ( 697 18 697 19 69 19 ext_adi_port_pair_t 697 19 697 38 1 9 port_pair 697 39 697 48 74 1 , 697 48 697 49 69 26 adi_potentiometer_type_e_t 697 50 697 76 71 18 potentiometer_type 697 77 697 95 75 1 = 697 96 697 97 18446744073709551615 13 E_ADI_POT_EDR 697 98 697 111 73 1 ) 697 111 697 112 69 1 ; 697 112 697 113 18446744073709551615 532 /**
	 * Gets the current potentiometer angle in tenths of a degree.
	 *
	 * The original potentiometer rotates 250 degrees thus returning an angle between 0-250 degrees.
	 * Potentiometer V2 rotates 330 degrees thus returning an angle between 0-330 degrees.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - The given value is not within the range of ADI Ports
	 * EADDRINUSE - The port is not configured as a potentiometer

	 * \return The potentiometer angle in degrees.
	 */ 699 2 711 5 18446744073709551615 6 double 712 2 712 8 18446744073709551615 9 get_angle 712 9 712 18 76 1 ( 712 18 712 19 76 1 ) 712 19 712 20 76 5 const 712 21 712 26 18446744073709551615 1 ; 712 26 712 27 18446744073709551615 478 /**
	 * Gets the 12-bit value of the specified port.
	 *
	 * The value returned is undefined if the analog pin has been switched to a
	 * different mode.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a potentiometer
	 *
	 * \return The analog sensor value, where a value of 0 reflects an input
	 * voltage of nearly 0 V and a value of 4095 reflects an input voltage of
	 * nearly 5 V
	 */ 714 2 727 5 18446744073709551615 5 using 728 2 728 7 18446744073709551615 11 ADIAnalogIn 728 8 728 19 21 2 :: 728 19 728 21 18446744073709551615 9 get_value 728 21 728 30 27 1 ; 728 30 728 31 18446744073709551615 902 /**
	 * Calibrates the potentiometer on the specified port and returns the new
	 * calibration value.
	 *
	 * This method assumes that the potentiometer value is not actively changing at
	 * this time and computes an average from approximately 500 samples, 1 ms
	 * apart, for a 0.5 s period of calibration. The average value thus calculated
	 * is returned and stored for later calls to the
	 * pros::ADIPotentiometer::get_value_calibrated() function. This function
	 * will return the difference between this value and the current sensor value
	 * when called.
	 *
	 * Do not use this function when the potentiometer value might be unstable (rotating the potentiometer)
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a potentiometer
	 *
	 * \return The average potentiometer value computed by this function
	 */ 730 2 749 5 18446744073709551615 5 using 750 2 750 7 18446744073709551615 11 ADIAnalogIn 750 8 750 19 21 2 :: 750 19 750 21 18446744073709551615 9 calibrate 750 21 750 30 77 1 ; 750 30 750 31 18446744073709551615 407 /**
	 * Gets the 12 bit calibrated value of a potentiometer port.
	 *
	 * The pros::ADIPotentiometer::calibrate() function must be run first.
	 *
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENODEV - The port is not configured as a potentiometer
	 *
	 * \return The difference of the potentiometer value from its calibrated default from
	 * -4095 to 4095
	 */ 752 2 763 5 18446744073709551615 5 using 764 2 764 7 18446744073709551615 11 ADIAnalogIn 764 8 764 19 21 2 :: 764 19 764 21 18446744073709551615 20 get_value_calibrated 764 21 764 41 78 1 ; 764 41 764 42 18446744073709551615 1 } 765 1 765 2 18446744073709551615 1 ; 765 2 765 3 18446744073709551615 5 class 767 1 767 6 18446744073709551615 6 ADILed 767 7 767 13 79 1 : 767 14 767 15 18446744073709551615 9 protected 767 16 767 25 18446744073709551615 7 ADIPort 767 26 767 33 6 1 { 767 34 767 35 18446744073709551615 6 public 768 2 768 8 18446744073709551615 1 : 768 8 768 9 18446744073709551615 466 /**
	 * @brief Configures an ADI port to act as a LED.
	 * 
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param adi_port
	 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 * \param length
	 *        The number of LEDs in the chain
	 */ 769 2 781 5 18446744073709551615 6 ADILed 782 2 782 8 79 1 ( 782 8 782 9 79 3 std 782 9 782 12 2 2 :: 782 12 782 14 18446744073709551615 7 uint8_t 782 14 782 21 80 8 adi_port 782 22 782 30 80 1 , 782 30 782 31 79 3 std 782 32 782 35 2 2 :: 782 35 782 37 18446744073709551615 8 uint32_t 782 37 782 45 81 6 length 782 46 782 52 81 1 ) 782 52 782 53 79 1 ; 782 53 782 54 18446744073709551615 539 /**
	 * @brief Configures an ADI port on a adi_expander to act as a LED.
	 * 
	 * This function uses the following values of errno when an error state is
	 * reached:
	 * ENXIO - Either the ADI port value or the smart port value is not within its
	 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
	 *
	 * \param port_pair
	 *        The pair of the smart port number (from 1-22) and the
	 *  	  ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
	 * \param length
	 * 	  The number of LEDs in the chain
	 */ 784 2 797 5 18446744073709551615 6 ADILed 798 2 798 8 79 1 ( 798 8 798 9 79 19 ext_adi_port_pair_t 798 9 798 28 1 9 port_pair 798 29 798 38 82 1 , 798 38 798 39 79 3 std 798 40 798 43 2 2 :: 798 43 798 45 18446744073709551615 8 uint32_t 798 45 798 53 83 6 length 798 54 798 60 83 1 ) 798 60 798 61 79 1 ; 798 61 798 62 18446744073709551615 273 /**
	 * @brief Operator overload to access the buffer in the ADILed class, it is 
	 * recommended that you call .update(); after doing any operations with this.
	 * 
	 * @param i 0 indexed pixel of the lED
	 * @return uint32_t& the address of the buffer at i to modify
	 */ 800 2 806 5 18446744073709551615 3 std 807 2 807 5 2 2 :: 807 5 807 7 84 8 uint32_t 807 7 807 15 84 1 & 807 15 807 16 84 8 operator 807 17 807 25 84 1 [ 807 25 807 26 84 1 ] 807 26 807 27 84 1 ( 807 28 807 29 84 6 size_t 807 29 807 35 85 1 i 807 36 807 37 86 1 ) 807 37 807 38 84 1 ; 807 38 807 39 18446744073709551615 374 /**
	* @brief Clear the entire led strip of color
	*
	* This function uses the following values of errno when an error state is
	* reached:
	* ENXIO - The given value is not within the range of ADI Ports
	* EINVAL - A parameter is out of bounds/incorrect
	* EADDRINUSE - The port is not configured for ADI output
	*
	* @return PROS_SUCCESS if successful, PROS_ERR if not
	*/ 809 2 819 4 18446744073709551615 3 std 820 2 820 5 2 2 :: 820 5 820 7 87 7 int32_t 820 7 820 14 87 9 clear_all 820 15 820 24 87 1 ( 820 24 820 25 87 1 ) 820 25 820 26 87 1 ; 820 26 820 27 18446744073709551615 3 std 821 2 821 5 2 2 :: 821 5 821 7 88 7 int32_t 821 7 821 14 88 5 clear 821 15 821 20 88 1 ( 821 20 821 21 88 1 ) 821 21 821 22 88 1 ; 821 22 821 23 18446744073709551615 418 /**
	* @brief Force the LED strip to update with the current buffered values, this
	* should be called after any changes to the buffer using the [] operator.
	*
	* This function uses the following values of errno when an error state is
	* reached:
	* EINVAL - A parameter is out of bounds/incorrect
	* EADDRINUSE - The port is not configured for ADI output
	*
	* @return PROS_SUCCESS if successful, PROS_ERR if not
	*/ 823 2 833 4 18446744073709551615 3 std 834 2 834 5 2 2 :: 834 5 834 7 89 7 int32_t 834 7 834 14 89 6 update 834 15 834 21 89 1 ( 834 21 834 22 89 1 ) 834 22 834 23 89 5 const 834 24 834 29 18446744073709551615 1 ; 834 29 834 30 18446744073709551615 368 /**
	* @brief Set the entire led strip to one color
	*
	* This function uses the following values of errno when an error state is
	* reached:
	* EINVAL - A parameter is out of bounds/incorrect
	* EADDRINUSE - The port is not configured for ADI output
	*
	* @param color color to set all the led strip value to
	* @return PROS_SUCCESS if successful, PROS_ERR if not
	*/ 836 2 846 4 18446744073709551615 3 std 847 2 847 5 2 2 :: 847 5 847 7 90 7 int32_t 847 7 847 14 90 7 set_all 847 15 847 22 90 1 ( 847 22 847 23 90 8 uint32_t 847 23 847 31 91 5 color 847 32 847 37 92 1 ) 847 37 847 38 90 1 ; 847 38 847 39 18446744073709551615 413 /**
	* @brief Set one pixel on the led strip
	*
	* This function uses the following values of errno when an error state is
	* reached:
	* EINVAL - A parameter is out of bounds/incorrect
	* EADDRINUSE - The port is not configured for ADI output
	*
	* @param color color to clear all the led strip to
	* @param pixel_position position of the pixel to clear
	* @return PROS_SUCCESS if successful, PROS_ERR if not
	*/ 849 2 860 4 18446744073709551615 3 std 861 2 861 5 2 2 :: 861 5 861 7 93 7 int32_t 861 7 861 14 93 9 set_pixel 861 15 861 24 93 1 ( 861 24 861 25 93 8 uint32_t 861 25 861 33 91 5 color 861 34 861 39 94 1 , 861 39 861 40 93 8 uint32_t 861 41 861 49 91 14 pixel_position 861 50 861 64 95 1 ) 861 64 861 65 93 1 ; 861 65 861 66 18446744073709551615 363 /**
	* @brief Clear one pixel on the led strip
	*
	* This function uses the following values of errno when an error state is
	* reached:
	* EINVAL - A parameter is out of bounds/incorrect
	* EADDRINUSE - The port is not configured for ADI output
	*
	* @param pixel_position position of the pixel to clear
	* @return PROS_SUCCESS if successful, PROS_ERR if not
	*/ 863 2 873 4 18446744073709551615 3 std 874 2 874 5 2 2 :: 874 5 874 7 96 7 int32_t 874 7 874 14 96 11 clear_pixel 874 15 874 26 96 1 ( 874 26 874 27 96 8 uint32_t 874 27 874 35 91 14 pixel_position 874 36 874 50 97 1 ) 874 50 874 51 96 1 ; 874 51 874 52 18446744073709551615 302 /**
	* @brief Get the length of the led strip
	*
	* This function uses the following values of errno when an error state is
	* reached:
	* EINVAL - A parameter is out of bounds/incorrect
	* EADDRINUSE - The port is not configured for ADI output
	*
	* @return The length (in pixels) of the LED strip
	*/ 876 2 885 4 18446744073709551615 3 std 886 2 886 5 2 2 :: 886 5 886 7 98 7 int32_t 886 7 886 14 98 6 length 886 15 886 21 98 1 ( 886 21 886 22 98 1 ) 886 22 886 23 98 1 ; 886 23 886 24 18446744073709551615 9 protected 888 2 888 11 18446744073709551615 1 : 888 11 888 12 18446744073709551615 3 std 889 2 889 5 2 2 :: 889 5 889 7 18446744073709551615 6 vector 889 7 889 13 99 1 < 889 13 889 14 18446744073709551615 8 uint32_t 889 14 889 22 91 1 > 889 22 889 23 18446744073709551615 7 _buffer 889 24 889 31 100 1 ; 889 31 889 32 18446744073709551615 1 } 890 1 890 2 18446744073709551615 1 ; 890 2 890 3 18446744073709551615 19 // Alias for ADILed 892 1 892 20 18446744073709551615 5 using 893 1 893 6 18446744073709551615 6 ADILED 893 7 893 13 101 1 = 893 14 893 15 18446744073709551615 6 ADILed 893 16 893 22 79 1 ; 893 22 893 23 18446744073709551615 1 } 895 1 895 2 18446744073709551615 17 // namespace pros 895 4 895 21 18446744073709551615 1 # 897 1 897 2 18446744073709551615 5 endif 897 2 897 7 18446744073709551615 17 // _PROS_ADI_HPP_ 897 9 897 26 18446744073709551615 0 0 102 0 0 0 22 0 0 1 13 0 4 pros 36 1 13 0 24 ext_adi_port_pair_t:pros 22 1 13 0 3 std 31 1 13 0 8 pair:std 36 1 13 0 25 ext_adi_port_tuple_t:pros 31 1 13 0 9 tuple:std 4 1 13 0 12 ADIPort:pros 10 1 13 0 67 51:32:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 20 1 13 0 24 adi_port_config_e_t:pros 10 1 13 0 67 51:62:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 7 1 13 0 43 E_ADI_TYPE_UNDEFINED:adi_port_config_e:pros 10 1 13 0 67 67:30:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 67 67:61:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 23 get_config:ADIPort:pros 21 1 13 0 22 get_value:ADIPort:pros 21 1 13 0 23 set_config:ADIPort:pros 10 1 13 0 67 92:46:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 22 set_value:ADIPort:pros 10 1 13 0 68 106:38:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 6 1 13 0 24 _smart_port:ADIPort:pros 6 1 13 0 22 _adi_port:ADIPort:pros 4 1 13 0 16 ADIAnalogIn:pros 10 1 13 0 68 129:36:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 146:34:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 26 calibrate:ADIAnalogIn:pros 21 1 13 0 37 get_value_calibrated:ADIAnalogIn:pros 21 1 13 0 40 get_value_calibrated_HR:ADIAnalogIn:pros 49 1 13 0 9 get_value 36 1 13 0 18 ADILineSensor:pros 36 1 13 0 19 ADILightSensor:pros 36 1 13 0 21 ADIAccelerometer:pros 4 1 13 0 17 ADIAnalogOut:pros 10 1 13 0 68 246:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 261:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 49 1 13 0 9 set_value 4 1 13 0 18 ADIDigitalOut:pros 10 1 13 0 68 297:38:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 297:53:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 313:36:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 313:52:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 4 1 13 0 17 ADIDigitalIn:pros 10 1 13 0 68 346:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 360:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 31 get_new_press:ADIDigitalIn:pros 36 1 13 0 14 ADIButton:pros 4 1 13 0 13 ADIMotor:pros 10 1 13 0 68 409:33:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 423:31:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 18 stop:ADIMotor:pros 4 1 13 0 15 ADIEncoder:pros 10 1 13 0 68 482:26:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 482:53:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 482:75:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 499:34:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 499:51:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 21 reset:ADIEncoder:pros 21 1 13 0 25 get_value:ADIEncoder:pros 4 1 13 0 18 ADIUltrasonic:pros 10 1 13 0 68 551:29:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 551:57:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 567:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 28 get_value:ADIUltrasonic:pros 4 1 13 0 12 ADIGyro:pros 10 1 13 0 68 610:32:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 610:49:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 635:30:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 635:48:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 22 get_value:ADIGyro:pros 21 1 13 0 18 reset:ADIGyro:pros 4 1 13 0 21 ADIPotentiometer:pros 10 1 13 0 68 681:32:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 20 1 13 0 31 adi_potentiometer_type_e_t:pros 10 1 13 0 68 681:69:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 7 1 13 0 43 E_ADI_POT_EDR:adi_potentiometer_type_e:pros 10 1 13 0 68 697:39:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 697:77:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 31 get_angle:ADIPotentiometer:pros 49 1 13 0 9 calibrate 49 1 13 0 20 get_value_calibrated 4 1 13 0 11 ADILed:pros 10 1 13 0 68 782:22:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 782:46:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 798:29:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 798:54:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 22 operator[]:ADILed:pros 20 1 13 0 6 size_t 10 1 13 0 68 807:36:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 21 clear_all:ADILed:pros 21 1 13 0 17 clear:ADILed:pros 21 1 13 0 18 update:ADILed:pros 21 1 13 0 19 set_all:ADILed:pros 20 1 13 0 8 uint32_t 10 1 13 0 68 847:32:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 21 set_pixel:ADILed:pros 10 1 13 0 68 861:34:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 10 1 13 0 68 861:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 23 clear_pixel:ADILed:pros 10 1 13 0 68 874:36:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 21 1 13 0 18 length:ADILed:pros 31 1 13 0 10 vector:std 6 1 13 0 19 _buffer:ADILed:pros 36 1 13 0 11 ADILED:pros 0 0 1 0 0 0 61 /home/bluecore/Desktop/Pros/Main Project/include/pros/adi.hpp 1698321178