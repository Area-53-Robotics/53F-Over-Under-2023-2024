22 serialization::archive 19 0 0 0 0 40 /home/bluecore/Desktop/Pros/Main Project 40 /home/bluecore/Desktop/Pros/Main Project 0 0 680 0 0 0 656 /**
 * \file pros/misc.h
 *
 * Contains prototypes for miscellaneous functions pertaining to the controller,
 * battery, and competition control.
 *
 * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/controller.html to
 * learn more.
 *
 * This file should not be modified by users, since it gets replaced whenever
 * a kernel upgrade occurs.
 *
 * \copyright Copyright (c) 2017-2023, Purdue University ACM SIGBots.
 * All rights reservered.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */ 1 1 19 4 18446744073709551615 1 # 21 1 21 2 18446744073709551615 6 ifndef 21 2 21 8 18446744073709551615 13 _PROS_MISC_H_ 21 9 21 22 18446744073709551615 1 # 22 1 22 2 18446744073709551615 6 define 22 2 22 8 18446744073709551615 13 _PROS_MISC_H_ 22 9 22 22 18446744073709551615 1 # 24 1 24 2 18446744073709551615 7 include 24 2 24 9 18446744073709551615 1 < 24 10 24 11 18446744073709551615 6 stdint 24 11 24 17 18446744073709551615 1 . 24 17 24 18 18446744073709551615 1 h 24 18 24 19 18446744073709551615 1 > 24 19 24 20 18446744073709551615 1 # 26 1 26 2 18446744073709551615 6 define 26 2 26 8 18446744073709551615 12 NUM_V5_PORTS 26 9 26 21 18446744073709551615 1 ( 26 22 26 23 18446744073709551615 2 22 26 23 26 25 18446744073709551615 1 ) 26 25 26 26 18446744073709551615 80 /******************************************************************************/ 28 1 28 81 18446744073709551615 80 /**                             V5 Competition                               **/ 29 1 29 81 18446744073709551615 80 /******************************************************************************/ 30 1 30 81 18446744073709551615 1 # 31 1 31 2 18446744073709551615 6 define 31 2 31 8 18446744073709551615 20 COMPETITION_DISABLED 31 9 31 29 18446744073709551615 1 ( 31 30 31 31 18446744073709551615 1 1 31 31 31 32 18446744073709551615 2 << 31 33 31 35 18446744073709551615 1 0 31 36 31 37 18446744073709551615 1 ) 31 37 31 38 18446744073709551615 1 # 32 1 32 2 18446744073709551615 6 define 32 2 32 8 18446744073709551615 22 COMPETITION_AUTONOMOUS 32 9 32 31 18446744073709551615 1 ( 32 32 32 33 18446744073709551615 1 1 32 33 32 34 18446744073709551615 2 << 32 35 32 37 18446744073709551615 1 1 32 38 32 39 18446744073709551615 1 ) 32 39 32 40 18446744073709551615 1 # 33 1 33 2 18446744073709551615 6 define 33 2 33 8 18446744073709551615 21 COMPETITION_CONNECTED 33 9 33 30 18446744073709551615 1 ( 33 31 33 32 18446744073709551615 1 1 33 32 33 33 18446744073709551615 2 << 33 34 33 36 18446744073709551615 1 2 33 37 33 38 18446744073709551615 1 ) 33 38 33 39 18446744073709551615 176 /**
 * Get the current status of the competition control.
 *
 * \return The competition control status as a mask of bits with
 * COMPETITION_{ENABLED,AUTONOMOUS,CONNECTED}.
 */ 35 1 40 4 18446744073709551615 1 # 41 1 41 2 18446744073709551615 5 ifdef 41 2 41 7 18446744073709551615 11 __cplusplus 41 8 41 19 18446744073709551615 6 extern 42 1 42 7 18446744073709551615 3 "C" 42 8 42 11 18446744073709551615 1 { 42 12 42 13 18446744073709551615 9 namespace 43 1 43 10 18446744073709551615 4 pros 43 11 43 15 0 1 { 43 16 43 17 18446744073709551615 9 namespace 44 1 44 10 18446744073709551615 1 c 44 11 44 12 1 1 { 44 13 44 14 18446744073709551615 1 # 45 1 45 2 18446744073709551615 5 endif 45 2 45 7 18446744073709551615 7 uint8_t 46 1 46 8 2 22 competition_get_status 46 9 46 31 3 1 ( 46 31 46 32 3 4 void 46 32 46 36 18446744073709551615 1 ) 46 36 46 37 3 1 ; 46 37 46 38 18446744073709551615 1 # 47 1 47 2 18446744073709551615 5 ifdef 47 2 47 7 18446744073709551615 11 __cplusplus 47 8 47 19 18446744073709551615 1 } 48 1 48 2 18446744073709551615 1 } 49 1 49 2 18446744073709551615 1 } 50 1 50 2 18446744073709551615 1 # 51 1 51 2 18446744073709551615 5 endif 51 2 51 7 18446744073709551615 1 # 52 1 52 2 18446744073709551615 6 define 52 2 52 8 18446744073709551615 23 competition_is_disabled 52 9 52 32 18446744073709551615 1 ( 52 32 52 33 18446744073709551615 1 ) 52 33 52 34 18446744073709551615 1 ( 52 35 52 36 18446744073709551615 1 ( 52 36 52 37 18446744073709551615 22 competition_get_status 52 37 52 59 18446744073709551615 1 ( 52 59 52 60 18446744073709551615 1 ) 52 60 52 61 18446744073709551615 1 & 52 62 52 63 18446744073709551615 20 COMPETITION_DISABLED 52 64 52 84 18446744073709551615 1 ) 52 84 52 85 18446744073709551615 2 != 52 86 52 88 18446744073709551615 1 0 52 89 52 90 18446744073709551615 1 ) 52 90 52 91 18446744073709551615 1 # 53 1 53 2 18446744073709551615 6 define 53 2 53 8 18446744073709551615 24 competition_is_connected 53 9 53 33 18446744073709551615 1 ( 53 33 53 34 18446744073709551615 1 ) 53 34 53 35 18446744073709551615 1 ( 53 36 53 37 18446744073709551615 1 ( 53 37 53 38 18446744073709551615 22 competition_get_status 53 38 53 60 18446744073709551615 1 ( 53 60 53 61 18446744073709551615 1 ) 53 61 53 62 18446744073709551615 1 & 53 63 53 64 18446744073709551615 21 COMPETITION_CONNECTED 53 65 53 86 18446744073709551615 1 ) 53 86 53 87 18446744073709551615 2 != 53 88 53 90 18446744073709551615 1 0 53 91 53 92 18446744073709551615 1 ) 53 92 53 93 18446744073709551615 1 # 54 1 54 2 18446744073709551615 6 define 54 2 54 8 18446744073709551615 25 competition_is_autonomous 54 9 54 34 18446744073709551615 1 ( 54 34 54 35 18446744073709551615 1 ) 54 35 54 36 18446744073709551615 1 ( 54 37 54 38 18446744073709551615 1 ( 54 38 54 39 18446744073709551615 22 competition_get_status 54 39 54 61 18446744073709551615 1 ( 54 61 54 62 18446744073709551615 1 ) 54 62 54 63 18446744073709551615 1 & 54 64 54 65 18446744073709551615 22 COMPETITION_AUTONOMOUS 54 66 54 88 18446744073709551615 1 ) 54 88 54 89 18446744073709551615 2 != 54 90 54 92 18446744073709551615 1 0 54 93 54 94 18446744073709551615 1 ) 54 94 54 95 18446744073709551615 80 /******************************************************************************/ 56 1 56 81 18446744073709551615 80 /**                              V5 Controller                               **/ 57 1 57 81 18446744073709551615 80 /******************************************************************************/ 58 1 58 81 18446744073709551615 1 # 59 1 59 2 18446744073709551615 5 ifdef 59 2 59 7 18446744073709551615 11 __cplusplus 59 8 59 19 18446744073709551615 6 extern 60 1 60 7 18446744073709551615 3 "C" 60 8 60 11 18446744073709551615 1 { 60 12 60 13 18446744073709551615 9 namespace 61 1 61 10 18446744073709551615 4 pros 61 11 61 15 0 1 { 61 16 61 17 18446744073709551615 1 # 62 1 62 2 18446744073709551615 5 endif 62 2 62 7 18446744073709551615 7 typedef 64 1 64 8 18446744073709551615 4 enum 64 9 64 13 18446744073709551615 1 { 64 14 64 15 18446744073709551615 19 E_CONTROLLER_MASTER 64 16 64 35 4 1 = 64 36 64 37 18446744073709551615 1 0 64 38 64 39 18446744073709551615 1 , 64 39 64 40 18446744073709551615 20 E_CONTROLLER_PARTNER 64 41 64 61 5 1 } 64 62 64 63 18446744073709551615 17 controller_id_e_t 64 64 64 81 6 1 ; 64 81 64 82 18446744073709551615 7 typedef 66 1 66 8 18446744073709551615 4 enum 66 9 66 13 18446744073709551615 1 { 66 14 66 15 18446744073709551615 26 E_CONTROLLER_ANALOG_LEFT_X 67 2 67 28 7 1 = 67 29 67 30 18446744073709551615 1 0 67 31 67 32 18446744073709551615 1 , 67 32 67 33 18446744073709551615 26 E_CONTROLLER_ANALOG_LEFT_Y 68 2 68 28 8 1 , 68 28 68 29 18446744073709551615 27 E_CONTROLLER_ANALOG_RIGHT_X 69 2 69 29 9 1 , 69 29 69 30 18446744073709551615 27 E_CONTROLLER_ANALOG_RIGHT_Y 70 2 70 29 10 1 } 71 1 71 2 18446744073709551615 21 controller_analog_e_t 71 3 71 24 11 1 ; 71 24 71 25 18446744073709551615 7 typedef 73 1 73 8 18446744073709551615 4 enum 73 9 73 13 18446744073709551615 1 { 73 14 73 15 18446744073709551615 23 E_CONTROLLER_DIGITAL_L1 74 2 74 25 12 1 = 74 26 74 27 18446744073709551615 1 6 74 28 74 29 18446744073709551615 1 , 74 29 74 30 18446744073709551615 23 E_CONTROLLER_DIGITAL_L2 75 2 75 25 13 1 , 75 25 75 26 18446744073709551615 23 E_CONTROLLER_DIGITAL_R1 76 2 76 25 14 1 , 76 25 76 26 18446744073709551615 23 E_CONTROLLER_DIGITAL_R2 77 2 77 25 15 1 , 77 25 77 26 18446744073709551615 23 E_CONTROLLER_DIGITAL_UP 78 2 78 25 16 1 , 78 25 78 26 18446744073709551615 25 E_CONTROLLER_DIGITAL_DOWN 79 2 79 27 17 1 , 79 27 79 28 18446744073709551615 25 E_CONTROLLER_DIGITAL_LEFT 80 2 80 27 18 1 , 80 27 80 28 18446744073709551615 26 E_CONTROLLER_DIGITAL_RIGHT 81 2 81 28 19 1 , 81 28 81 29 18446744073709551615 22 E_CONTROLLER_DIGITAL_X 82 2 82 24 20 1 , 82 24 82 25 18446744073709551615 22 E_CONTROLLER_DIGITAL_B 83 2 83 24 21 1 , 83 24 83 25 18446744073709551615 22 E_CONTROLLER_DIGITAL_Y 84 2 84 24 22 1 , 84 24 84 25 18446744073709551615 22 E_CONTROLLER_DIGITAL_A 85 2 85 24 23 1 } 86 1 86 2 18446744073709551615 22 controller_digital_e_t 86 3 86 25 24 1 ; 86 25 86 26 18446744073709551615 1 # 88 1 88 2 18446744073709551615 5 ifdef 88 2 88 7 18446744073709551615 21 PROS_USE_SIMPLE_NAMES 88 8 88 29 18446744073709551615 1 # 89 1 89 2 18446744073709551615 5 ifdef 89 2 89 7 18446744073709551615 11 __cplusplus 89 8 89 19 18446744073709551615 1 # 90 1 90 2 18446744073709551615 6 define 90 2 90 8 18446744073709551615 17 CONTROLLER_MASTER 90 9 90 26 18446744073709551615 4 pros 90 27 90 31 18446744073709551615 2 :: 90 31 90 33 18446744073709551615 19 E_CONTROLLER_MASTER 90 33 90 52 18446744073709551615 1 # 91 1 91 2 18446744073709551615 6 define 91 2 91 8 18446744073709551615 18 CONTROLLER_PARTNER 91 9 91 27 18446744073709551615 4 pros 91 28 91 32 18446744073709551615 2 :: 91 32 91 34 18446744073709551615 20 E_CONTROLLER_PARTNER 91 34 91 54 18446744073709551615 1 # 92 1 92 2 18446744073709551615 6 define 92 2 92 8 18446744073709551615 13 ANALOG_LEFT_X 92 9 92 22 18446744073709551615 4 pros 92 23 92 27 18446744073709551615 2 :: 92 27 92 29 18446744073709551615 26 E_CONTROLLER_ANALOG_LEFT_X 92 29 92 55 18446744073709551615 1 # 93 1 93 2 18446744073709551615 6 define 93 2 93 8 18446744073709551615 13 ANALOG_LEFT_Y 93 9 93 22 18446744073709551615 4 pros 93 23 93 27 18446744073709551615 2 :: 93 27 93 29 18446744073709551615 26 E_CONTROLLER_ANALOG_LEFT_Y 93 29 93 55 18446744073709551615 1 # 94 1 94 2 18446744073709551615 6 define 94 2 94 8 18446744073709551615 14 ANALOG_RIGHT_X 94 9 94 23 18446744073709551615 4 pros 94 24 94 28 18446744073709551615 2 :: 94 28 94 30 18446744073709551615 27 E_CONTROLLER_ANALOG_RIGHT_X 94 30 94 57 18446744073709551615 1 # 95 1 95 2 18446744073709551615 6 define 95 2 95 8 18446744073709551615 14 ANALOG_RIGHT_Y 95 9 95 23 18446744073709551615 4 pros 95 24 95 28 18446744073709551615 2 :: 95 28 95 30 18446744073709551615 27 E_CONTROLLER_ANALOG_RIGHT_Y 95 30 95 57 18446744073709551615 1 # 96 1 96 2 18446744073709551615 6 define 96 2 96 8 18446744073709551615 10 DIGITAL_L1 96 9 96 19 18446744073709551615 4 pros 96 20 96 24 18446744073709551615 2 :: 96 24 96 26 18446744073709551615 23 E_CONTROLLER_DIGITAL_L1 96 26 96 49 18446744073709551615 1 # 97 1 97 2 18446744073709551615 6 define 97 2 97 8 18446744073709551615 10 DIGITAL_L2 97 9 97 19 18446744073709551615 4 pros 97 20 97 24 18446744073709551615 2 :: 97 24 97 26 18446744073709551615 23 E_CONTROLLER_DIGITAL_L2 97 26 97 49 18446744073709551615 1 # 98 1 98 2 18446744073709551615 6 define 98 2 98 8 18446744073709551615 10 DIGITAL_R1 98 9 98 19 18446744073709551615 4 pros 98 20 98 24 18446744073709551615 2 :: 98 24 98 26 18446744073709551615 23 E_CONTROLLER_DIGITAL_R1 98 26 98 49 18446744073709551615 1 # 99 1 99 2 18446744073709551615 6 define 99 2 99 8 18446744073709551615 10 DIGITAL_R2 99 9 99 19 18446744073709551615 4 pros 99 20 99 24 18446744073709551615 2 :: 99 24 99 26 18446744073709551615 23 E_CONTROLLER_DIGITAL_R2 99 26 99 49 18446744073709551615 1 # 100 1 100 2 18446744073709551615 6 define 100 2 100 8 18446744073709551615 10 DIGITAL_UP 100 9 100 19 18446744073709551615 4 pros 100 20 100 24 18446744073709551615 2 :: 100 24 100 26 18446744073709551615 23 E_CONTROLLER_DIGITAL_UP 100 26 100 49 18446744073709551615 1 # 101 1 101 2 18446744073709551615 6 define 101 2 101 8 18446744073709551615 12 DIGITAL_DOWN 101 9 101 21 18446744073709551615 4 pros 101 22 101 26 18446744073709551615 2 :: 101 26 101 28 18446744073709551615 25 E_CONTROLLER_DIGITAL_DOWN 101 28 101 53 18446744073709551615 1 # 102 1 102 2 18446744073709551615 6 define 102 2 102 8 18446744073709551615 12 DIGITAL_LEFT 102 9 102 21 18446744073709551615 4 pros 102 22 102 26 18446744073709551615 2 :: 102 26 102 28 18446744073709551615 25 E_CONTROLLER_DIGITAL_LEFT 102 28 102 53 18446744073709551615 1 # 103 1 103 2 18446744073709551615 6 define 103 2 103 8 18446744073709551615 13 DIGITAL_RIGHT 103 9 103 22 18446744073709551615 4 pros 103 23 103 27 18446744073709551615 2 :: 103 27 103 29 18446744073709551615 26 E_CONTROLLER_DIGITAL_RIGHT 103 29 103 55 18446744073709551615 1 # 104 1 104 2 18446744073709551615 6 define 104 2 104 8 18446744073709551615 9 DIGITAL_X 104 9 104 18 18446744073709551615 4 pros 104 19 104 23 18446744073709551615 2 :: 104 23 104 25 18446744073709551615 22 E_CONTROLLER_DIGITAL_X 104 25 104 47 18446744073709551615 1 # 105 1 105 2 18446744073709551615 6 define 105 2 105 8 18446744073709551615 9 DIGITAL_B 105 9 105 18 18446744073709551615 4 pros 105 19 105 23 18446744073709551615 2 :: 105 23 105 25 18446744073709551615 22 E_CONTROLLER_DIGITAL_B 105 25 105 47 18446744073709551615 1 # 106 1 106 2 18446744073709551615 6 define 106 2 106 8 18446744073709551615 9 DIGITAL_Y 106 9 106 18 18446744073709551615 4 pros 106 19 106 23 18446744073709551615 2 :: 106 23 106 25 18446744073709551615 22 E_CONTROLLER_DIGITAL_Y 106 25 106 47 18446744073709551615 1 # 107 1 107 2 18446744073709551615 6 define 107 2 107 8 18446744073709551615 9 DIGITAL_A 107 9 107 18 18446744073709551615 4 pros 107 19 107 23 18446744073709551615 2 :: 107 23 107 25 18446744073709551615 22 E_CONTROLLER_DIGITAL_A 107 25 107 47 18446744073709551615 1 # 108 1 108 2 18446744073709551615 4 else 108 2 108 6 18446744073709551615 1 # 109 1 109 2 18446744073709551615 6 define 109 2 109 8 18446744073709551615 17 CONTROLLER_MASTER 109 9 109 26 18446744073709551615 19 E_CONTROLLER_MASTER 109 27 109 46 18446744073709551615 1 # 110 1 110 2 18446744073709551615 6 define 110 2 110 8 18446744073709551615 18 CONTROLLER_PARTNER 110 9 110 27 18446744073709551615 20 E_CONTROLLER_PARTNER 110 28 110 48 18446744073709551615 1 # 111 1 111 2 18446744073709551615 6 define 111 2 111 8 18446744073709551615 13 ANALOG_LEFT_X 111 9 111 22 18446744073709551615 26 E_CONTROLLER_ANALOG_LEFT_X 111 23 111 49 18446744073709551615 1 # 112 1 112 2 18446744073709551615 6 define 112 2 112 8 18446744073709551615 13 ANALOG_LEFT_Y 112 9 112 22 18446744073709551615 26 E_CONTROLLER_ANALOG_LEFT_Y 112 23 112 49 18446744073709551615 1 # 113 1 113 2 18446744073709551615 6 define 113 2 113 8 18446744073709551615 14 ANALOG_RIGHT_X 113 9 113 23 18446744073709551615 27 E_CONTROLLER_ANALOG_RIGHT_X 113 24 113 51 18446744073709551615 1 # 114 1 114 2 18446744073709551615 6 define 114 2 114 8 18446744073709551615 14 ANALOG_RIGHT_Y 114 9 114 23 18446744073709551615 27 E_CONTROLLER_ANALOG_RIGHT_Y 114 24 114 51 18446744073709551615 1 # 115 1 115 2 18446744073709551615 6 define 115 2 115 8 18446744073709551615 10 DIGITAL_L1 115 9 115 19 18446744073709551615 23 E_CONTROLLER_DIGITAL_L1 115 20 115 43 18446744073709551615 1 # 116 1 116 2 18446744073709551615 6 define 116 2 116 8 18446744073709551615 10 DIGITAL_L2 116 9 116 19 18446744073709551615 23 E_CONTROLLER_DIGITAL_L2 116 20 116 43 18446744073709551615 1 # 117 1 117 2 18446744073709551615 6 define 117 2 117 8 18446744073709551615 10 DIGITAL_R1 117 9 117 19 18446744073709551615 23 E_CONTROLLER_DIGITAL_R1 117 20 117 43 18446744073709551615 1 # 118 1 118 2 18446744073709551615 6 define 118 2 118 8 18446744073709551615 10 DIGITAL_R2 118 9 118 19 18446744073709551615 23 E_CONTROLLER_DIGITAL_R2 118 20 118 43 18446744073709551615 1 # 119 1 119 2 18446744073709551615 6 define 119 2 119 8 18446744073709551615 10 DIGITAL_UP 119 9 119 19 18446744073709551615 23 E_CONTROLLER_DIGITAL_UP 119 20 119 43 18446744073709551615 1 # 120 1 120 2 18446744073709551615 6 define 120 2 120 8 18446744073709551615 12 DIGITAL_DOWN 120 9 120 21 18446744073709551615 25 E_CONTROLLER_DIGITAL_DOWN 120 22 120 47 18446744073709551615 1 # 121 1 121 2 18446744073709551615 6 define 121 2 121 8 18446744073709551615 12 DIGITAL_LEFT 121 9 121 21 18446744073709551615 25 E_CONTROLLER_DIGITAL_LEFT 121 22 121 47 18446744073709551615 1 # 122 1 122 2 18446744073709551615 6 define 122 2 122 8 18446744073709551615 13 DIGITAL_RIGHT 122 9 122 22 18446744073709551615 26 E_CONTROLLER_DIGITAL_RIGHT 122 23 122 49 18446744073709551615 1 # 123 1 123 2 18446744073709551615 6 define 123 2 123 8 18446744073709551615 9 DIGITAL_X 123 9 123 18 18446744073709551615 22 E_CONTROLLER_DIGITAL_X 123 19 123 41 18446744073709551615 1 # 124 1 124 2 18446744073709551615 6 define 124 2 124 8 18446744073709551615 9 DIGITAL_B 124 9 124 18 18446744073709551615 22 E_CONTROLLER_DIGITAL_B 124 19 124 41 18446744073709551615 1 # 125 1 125 2 18446744073709551615 6 define 125 2 125 8 18446744073709551615 9 DIGITAL_Y 125 9 125 18 18446744073709551615 22 E_CONTROLLER_DIGITAL_Y 125 19 125 41 18446744073709551615 1 # 126 1 126 2 18446744073709551615 6 define 126 2 126 8 18446744073709551615 9 DIGITAL_A 126 9 126 18 18446744073709551615 22 E_CONTROLLER_DIGITAL_A 126 19 126 41 18446744073709551615 1 # 127 1 127 2 18446744073709551615 5 endif 127 2 127 7 18446744073709551615 1 # 128 1 128 2 18446744073709551615 5 endif 128 2 128 7 18446744073709551615 230 /*
Given an id and a port, this macro sets the port 
variable based on the id and allows the mutex to take that port.

Returns error (in the function/scope it's in) if the controller
failed to connect or an invalid id is given.
*/ 130 1 136 3 18446744073709551615 1 # 137 1 137 2 18446744073709551615 6 define 137 2 137 8 18446744073709551615 26 CONTROLLER_PORT_MUTEX_TAKE 137 9 137 35 18446744073709551615 1 ( 137 35 137 36 18446744073709551615 2 id 137 36 137 38 18446744073709551615 1 , 137 38 137 39 18446744073709551615 4 port 137 40 137 44 18446744073709551615 1 ) 137 44 137 45 18446744073709551615 6 switch 138 2 138 8 18446744073709551615 1 ( 138 9 138 10 18446744073709551615 2 id 138 10 138 12 18446744073709551615 1 ) 138 12 138 13 18446744073709551615 1 { 138 14 138 15 18446744073709551615 4 case 139 3 139 7 18446744073709551615 19 E_CONTROLLER_MASTER 139 8 139 27 18446744073709551615 1 : 139 27 139 28 18446744073709551615 4 port 140 4 140 8 18446744073709551615 1 = 140 9 140 10 18446744073709551615 20 V5_PORT_CONTROLLER_1 140 11 140 31 18446744073709551615 1 ; 140 31 140 32 18446744073709551615 5 break 141 4 141 9 18446744073709551615 1 ; 141 9 141 10 18446744073709551615 4 case 142 3 142 7 18446744073709551615 20 E_CONTROLLER_PARTNER 142 8 142 28 18446744073709551615 1 : 142 28 142 29 18446744073709551615 4 port 143 4 143 8 18446744073709551615 1 = 143 9 143 10 18446744073709551615 20 V5_PORT_CONTROLLER_2 143 11 143 31 18446744073709551615 1 ; 143 31 143 32 18446744073709551615 5 break 144 4 144 9 18446744073709551615 1 ; 144 9 144 10 18446744073709551615 7 default 145 3 145 10 18446744073709551615 1 : 145 10 145 11 18446744073709551615 5 errno 146 4 146 9 18446744073709551615 1 = 146 10 146 11 18446744073709551615 6 EINVAL 146 12 146 18 18446744073709551615 1 ; 146 18 146 19 18446744073709551615 6 return 147 4 147 10 18446744073709551615 8 PROS_ERR 147 11 147 19 18446744073709551615 1 ; 147 19 147 20 18446744073709551615 1 } 148 2 148 3 18446744073709551615 2 if 149 2 149 4 18446744073709551615 1 ( 149 5 149 6 18446744073709551615 1 ! 149 6 149 7 18446744073709551615 24 internal_port_mutex_take 149 7 149 31 18446744073709551615 1 ( 149 31 149 32 18446744073709551615 4 port 149 32 149 36 18446744073709551615 1 ) 149 36 149 37 18446744073709551615 1 ) 149 37 149 38 18446744073709551615 1 { 149 39 149 40 18446744073709551615 5 errno 150 3 150 8 18446744073709551615 1 = 150 9 150 10 18446744073709551615 6 EACCES 150 11 150 17 18446744073709551615 1 ; 150 17 150 18 18446744073709551615 6 return 151 3 151 9 18446744073709551615 8 PROS_ERR 151 10 151 18 18446744073709551615 1 ; 151 18 151 19 18446744073709551615 1 } 152 2 152 3 18446744073709551615 82 \
/******************************************************************************/ 152 13 153 81 18446744073709551615 80 /**                              Date and Time                               **/ 154 1 154 81 18446744073709551615 80 /******************************************************************************/ 155 1 155 81 18446744073709551615 6 extern 157 1 157 7 18446744073709551615 5 const 157 8 157 13 18446744073709551615 4 char 157 14 157 18 18446744073709551615 1 * 157 18 157 19 18446744073709551615 10 baked_date 157 20 157 30 25 1 ; 157 30 157 31 18446744073709551615 6 extern 158 1 158 7 18446744073709551615 5 const 158 8 158 13 18446744073709551615 4 char 158 14 158 18 18446744073709551615 1 * 158 18 158 19 18446744073709551615 10 baked_time 158 20 158 30 26 1 ; 158 30 158 31 18446744073709551615 7 typedef 160 1 160 8 18446744073709551615 6 struct 160 9 160 15 18446744073709551615 1 { 160 16 160 17 18446744073709551615 8 uint16_t 161 2 161 10 27 4 year 161 11 161 15 28 1 ; 161 15 161 16 18446744073709551615 14 // Year - 1980 161 17 161 31 18446744073709551615 7 uint8_t 162 2 162 9 2 3 day 162 10 162 13 29 1 ; 162 13 162 14 18446744073709551615 7 uint8_t 163 2 163 9 2 5 month 163 10 163 15 30 1 ; 163 15 163 16 18446744073709551615 14 // 1 = January 163 17 163 31 18446744073709551615 1 } 164 1 164 2 18446744073709551615 8 date_s_t 164 3 164 11 31 1 ; 164 11 164 12 18446744073709551615 7 typedef 166 1 166 8 18446744073709551615 6 struct 166 9 166 15 18446744073709551615 1 { 166 16 166 17 18446744073709551615 7 uint8_t 167 2 167 9 2 4 hour 167 10 167 14 32 1 ; 167 14 167 15 18446744073709551615 7 uint8_t 168 2 168 9 2 3 min 168 10 168 13 33 1 ; 168 13 168 14 18446744073709551615 7 uint8_t 169 2 169 9 2 3 sec 169 10 169 13 34 1 ; 169 13 169 14 18446744073709551615 7 uint8_t 170 2 170 9 2 8 sec_hund 170 10 170 18 35 1 ; 170 18 170 19 18446744073709551615 25 // hundredths of a second 170 20 170 45 18446744073709551615 1 } 171 1 171 2 18446744073709551615 8 time_s_t 171 3 171 11 36 1 ; 171 11 171 12 18446744073709551615 1 # 173 1 173 2 18446744073709551615 5 ifdef 173 2 173 7 18446744073709551615 11 __cplusplus 173 8 173 19 18446744073709551615 9 namespace 174 1 174 10 18446744073709551615 1 c 174 11 174 12 1 1 { 174 13 174 14 18446744073709551615 1 # 175 1 175 2 18446744073709551615 5 endif 175 2 175 7 18446744073709551615 524 /**
 * Checks if the controller is connected.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is
 * given.
 * EACCES - Another resource is currently trying to access the controller port.
 *
 * \param id
 *        The ID of the controller (e.g. the master or partner controller).
 *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER
 *
 * \return 1 if the controller is connected, 0 otherwise
 */ 177 1 191 4 18446744073709551615 7 int32_t 192 1 192 8 37 23 controller_is_connected 192 9 192 32 38 1 ( 192 32 192 33 38 17 controller_id_e_t 192 33 192 50 6 2 id 192 51 192 53 39 1 ) 192 53 192 54 38 1 ; 192 54 192 55 18446744073709551615 769 /**
 * Gets the value of an analog channel (joystick) on a controller.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is
 * given.
 * EACCES - Another resource is currently trying to access the controller port.
 *
 * \param id
 *        The ID of the controller (e.g. the master or partner controller).
 *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER
 * \param channel
 *        The analog channel to get.
 *        Must be one of ANALOG_LEFT_X, ANALOG_LEFT_Y, ANALOG_RIGHT_X,
 *        ANALOG_RIGHT_Y
 *
 * \return The current reading of the analog channel: [-127, 127].
 * If the controller was not connected, then 0 is returned
 */ 194 1 213 4 18446744073709551615 7 int32_t 214 1 214 8 37 21 controller_get_analog 214 9 214 30 40 1 ( 214 30 214 31 40 17 controller_id_e_t 214 31 214 48 6 2 id 214 49 214 51 41 1 , 214 51 214 52 40 21 controller_analog_e_t 214 53 214 74 11 7 channel 214 75 214 82 42 1 ) 214 82 214 83 40 1 ; 214 83 214 84 18446744073709551615 528 /**
 * Gets the battery capacity of the given controller.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is
 * given.
 * EACCES - Another resource is currently trying to access the controller port.
 *
 * \param id
 *        The ID of the controller (e.g. the master or partner controller).
 *        Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER
 *
 * \return The controller's battery capacity
 */ 216 1 230 4 18446744073709551615 7 int32_t 231 1 231 8 37 31 controller_get_battery_capacity 231 9 231 40 43 1 ( 231 40 231 41 43 17 controller_id_e_t 231 41 231 58 6 2 id 231 59 231 61 44 1 ) 231 61 231 62 43 1 ; 231 62 231 63 18446744073709551615 522 /**
 * Gets the battery level of the given controller.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is
 * given.
 * EACCES - Another resource is currently trying to access the controller port.
 *
 * \param id
 *        The ID of the controller (e.g. the master or partner controller).
 *        Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER
 *
 * \return The controller's battery level
 */ 233 1 247 4 18446744073709551615 7 int32_t 248 1 248 8 37 28 controller_get_battery_level 248 9 248 37 45 1 ( 248 37 248 38 45 17 controller_id_e_t 248 38 248 55 6 2 id 248 56 248 58 46 1 ) 248 58 248 59 45 1 ; 248 59 248 60 18446744073709551615 742 /**
 * Checks if a digital channel (button) on the controller is currently pressed.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is
 * given.
 * EACCES - Another resource is currently trying to access the controller port.
 *
 * \param id
 *        The ID of the controller (e.g. the master or partner controller).
 *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER
 * \param button
 *        The button to read.
 *        Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}
 *
 * \return 1 if the button on the controller is pressed.
 * If the controller was not connected, then 0 is returned
 */ 250 1 268 4 18446744073709551615 7 int32_t 269 1 269 8 37 22 controller_get_digital 269 9 269 31 47 1 ( 269 31 269 32 47 17 controller_id_e_t 269 32 269 49 6 2 id 269 50 269 52 48 1 , 269 52 269 53 47 22 controller_digital_e_t 269 54 269 76 24 6 button 269 77 269 83 49 1 ) 269 83 269 84 47 1 ; 269 84 269 85 18446744073709551615 1219 /**
 * Returns a rising-edge case for a controller button press.
 *
 * This function is not thread-safe.
 * Multiple tasks polling a single button may return different results under the
 * same circumstances, so only one task should call this function for any given
 * button. E.g., Task A calls this function for buttons 1 and 2. Task B may call
 * this function for button 3, but should not for buttons 1 or 2. A typical
 * use-case for this function is to call inside opcontrol to detect new button
 * presses, and not in any other tasks.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is
 * given.
 * EACCES - Another resource is currently trying to access the controller port.
 *
 * \param id
 *        The ID of the controller (e.g. the master or partner controller).
 *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER
 * \param button
 * 			  The button to read. Must be one of
 *        DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}
 *
 * \return 1 if the button on the controller is pressed and had not been pressed
 * the last time this function was called, 0 otherwise.
 */ 271 1 297 4 18446744073709551615 7 int32_t 298 1 298 8 37 32 controller_get_digital_new_press 298 9 298 41 50 1 ( 298 41 298 42 50 17 controller_id_e_t 298 42 298 59 6 2 id 298 60 298 62 51 1 , 298 62 298 63 50 22 controller_digital_e_t 298 64 298 86 24 6 button 298 87 298 93 52 1 ) 298 93 298 94 50 1 ; 298 94 298 95 18446744073709551615 978 /**
 * Sets text to the controller LCD screen.
 *
 * \note Controller text setting is currently in beta, so continuous, fast
 * updates will not work well.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is
 * given.
 * EACCES - Another resource is currently trying to access the controller port.
 *
 * \param id
 *        The ID of the controller (e.g. the master or partner controller).
 *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER
 * \param line
 *        The line number at which the text will be displayed [0-2]
 * \param col
 *        The column number at which the text will be displayed [0-14]
 * \param fmt
 *        The format string to print to the controller
 * \param ...
 *        The argument list for the format string
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 300 1 326 4 18446744073709551615 7 int32_t 327 1 327 8 37 16 controller_print 327 9 327 25 53 1 ( 327 25 327 26 53 17 controller_id_e_t 327 26 327 43 6 2 id 327 44 327 46 54 1 , 327 46 327 47 53 7 uint8_t 327 48 327 55 2 4 line 327 56 327 60 55 1 , 327 60 327 61 53 7 uint8_t 327 62 327 69 2 3 col 327 70 327 73 56 1 , 327 73 327 74 53 5 const 327 75 327 80 18446744073709551615 4 char 327 81 327 85 18446744073709551615 1 * 327 85 327 86 18446744073709551615 3 fmt 327 87 327 90 57 1 , 327 90 327 91 53 3 ... 327 92 327 95 53 1 ) 327 95 327 96 53 1 ; 327 96 327 97 18446744073709551615 921 /**
 * Sets text to the controller LCD screen.
 *
 * \note Controller text setting is currently in beta, so continuous, fast
 * updates will not work well.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is
 * given.
 * EACCES - Another resource is currently trying to access the controller port.
 *
 * \param id
 *        The ID of the controller (e.g. the master or partner controller).
 *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER
 * \param line
 *        The line number at which the text will be displayed [0-2]
 * \param col
 *        The column number at which the text will be displayed [0-14]
 * \param str
 *        The pre-formatted string to print to the controller
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 329 1 353 4 18446744073709551615 7 int32_t 354 1 354 8 37 19 controller_set_text 354 9 354 28 58 1 ( 354 28 354 29 58 17 controller_id_e_t 354 29 354 46 6 2 id 354 47 354 49 59 1 , 354 49 354 50 58 7 uint8_t 354 51 354 58 2 4 line 354 59 354 63 60 1 , 354 63 354 64 58 7 uint8_t 354 65 354 72 2 3 col 354 73 354 76 61 1 , 354 76 354 77 58 5 const 354 78 354 83 18446744073709551615 4 char 354 84 354 88 18446744073709551615 1 * 354 88 354 89 18446744073709551615 3 str 354 90 354 93 62 1 ) 354 93 354 94 58 1 ; 354 94 354 95 18446744073709551615 745 /**
 * Clears an individual line of the controller screen.
 *
 * \note Controller text setting is currently in beta, so continuous, fast
 * updates will not work well.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is
 * given.
 * EACCES - Another resource is currently trying to access the controller port.
 *
 * \param id
 *        The ID of the controller (e.g. the master or partner controller).
 *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER
 * \param line
 *        The line number to clear [0-2]
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 356 1 376 4 18446744073709551615 7 int32_t 377 1 377 8 37 21 controller_clear_line 377 9 377 30 63 1 ( 377 30 377 31 63 17 controller_id_e_t 377 31 377 48 6 2 id 377 49 377 51 64 1 , 377 51 377 52 63 7 uint8_t 377 53 377 60 2 4 line 377 61 377 65 65 1 ) 377 65 377 66 63 1 ; 377 66 377 67 18446744073709551615 749 /**
 * Clears all of the lines on the controller screen.
 *
 * \note Controller text setting is currently in beta, so continuous, fast
 * updates will not work well. On vexOS version 1.0.0 this function will block
 * for 110ms.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is
 * given.
 * EACCES - Another resource is currently trying to access the controller port.
 *
 * \param id
 *        The ID of the controller (e.g. the master or partner controller).
 *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 379 1 398 4 18446744073709551615 7 int32_t 399 1 399 8 37 16 controller_clear 399 9 399 25 66 1 ( 399 25 399 26 66 17 controller_id_e_t 399 26 399 43 6 2 id 399 44 399 46 67 1 ) 399 46 399 47 66 1 ; 399 47 399 48 18446744073709551615 877 /**
 * Rumble the controller.
 *
 * \note Controller rumble activation is currently in beta, so continuous, fast
 * updates will not work well.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is
 * given.
 * EACCES - Another resource is currently trying to access the controller port.
 *
 * \param id
 *				The ID of the controller (e.g. the master or partner controller).
 *				Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER
 * \param rumble_pattern
 *				A string consisting of the characters '.', '-', and ' ', where dots
 *				are short rumbles, dashes are long rumbles, and spaces are pauses.
 *				Maximum supported length is 8 characters.
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 401 1 423 4 18446744073709551615 7 int32_t 424 1 424 8 37 17 controller_rumble 424 9 424 26 68 1 ( 424 26 424 27 68 17 controller_id_e_t 424 27 424 44 6 2 id 424 45 424 47 69 1 , 424 47 424 48 68 5 const 424 49 424 54 18446744073709551615 4 char 424 55 424 59 18446744073709551615 1 * 424 59 424 60 18446744073709551615 14 rumble_pattern 424 61 424 75 70 1 ) 424 75 424 76 68 1 ; 424 76 424 77 18446744073709551615 289 /**
 * Gets the current voltage of the battery, as reported by VEXos.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EACCES - Another resource is currently trying to access the battery port.
 *
 * \return The current voltage of the battery
 */ 426 1 434 4 18446744073709551615 7 int32_t 435 1 435 8 37 19 battery_get_voltage 435 9 435 28 71 1 ( 435 28 435 29 71 4 void 435 29 435 33 18446744073709551615 1 ) 435 33 435 34 71 1 ; 435 34 435 35 18446744073709551615 289 /**
 * Gets the current current of the battery, as reported by VEXos.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EACCES - Another resource is currently trying to access the battery port.
 *
 * \return The current current of the battery
 */ 437 1 445 4 18446744073709551615 7 int32_t 446 1 446 8 37 19 battery_get_current 446 9 446 28 72 1 ( 446 28 446 29 72 4 void 446 29 446 33 18446744073709551615 1 ) 446 33 446 34 72 1 ; 446 34 446 35 18446744073709551615 297 /**
 * Gets the current temperature of the battery, as reported by VEXos.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EACCES - Another resource is currently trying to access the battery port.
 *
 * \return The current temperature of the battery
 */ 448 1 456 4 18446744073709551615 6 double 457 1 457 7 18446744073709551615 23 battery_get_temperature 457 8 457 31 73 1 ( 457 31 457 32 73 4 void 457 32 457 36 18446744073709551615 1 ) 457 36 457 37 73 1 ; 457 37 457 38 18446744073709551615 291 /**
 * Gets the current capacity of the battery, as reported by VEXos.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * EACCES - Another resource is currently trying to access the battery port.
 *
 * \return The current capacity of the battery
 */ 459 1 467 4 18446744073709551615 6 double 468 1 468 7 18446744073709551615 20 battery_get_capacity 468 8 468 28 74 1 ( 468 28 468 29 74 4 void 468 29 468 33 18446744073709551615 1 ) 468 33 468 34 74 1 ; 468 34 468 35 18446744073709551615 103 /**
 * Checks if the SD card is installed.
 *
 * \return 1 if the SD card is installed, 0 otherwise
 */ 470 1 474 4 18446744073709551615 7 int32_t 475 1 475 8 37 16 usd_is_installed 475 9 475 25 75 1 ( 475 25 475 26 75 4 void 475 26 475 30 18446744073709551615 1 ) 475 30 475 31 75 1 ; 475 31 475 32 18446744073709551615 1 # 477 1 477 2 18446744073709551615 5 ifdef 477 2 477 7 18446744073709551615 11 __cplusplus 477 8 477 19 18446744073709551615 1 } 478 1 478 2 18446744073709551615 1 } 479 1 479 2 18446744073709551615 1 } 480 1 480 2 18446744073709551615 1 # 481 1 481 2 18446744073709551615 5 endif 481 2 481 7 18446744073709551615 1 # 483 1 483 2 18446744073709551615 5 endif 483 2 483 7 18446744073709551615 16 // _PROS_MISC_H_ 483 9 483 25 18446744073709551615 0 0 76 0 0 0 22 0 0 1 13 0 4 pros 22 1 13 0 6 c:pros 20 1 13 0 7 uint8_t 8 1 13 0 29 competition_get_status:c:pros 7 1 13 0 42 E_CONTROLLER_MASTER:controller_id_e_t:pros 7 1 13 0 43 E_CONTROLLER_PARTNER:controller_id_e_t:pros 20 1 13 0 22 controller_id_e_t:pros 7 1 13 0 53 E_CONTROLLER_ANALOG_LEFT_X:controller_analog_e_t:pros 7 1 13 0 53 E_CONTROLLER_ANALOG_LEFT_Y:controller_analog_e_t:pros 7 1 13 0 54 E_CONTROLLER_ANALOG_RIGHT_X:controller_analog_e_t:pros 7 1 13 0 54 E_CONTROLLER_ANALOG_RIGHT_Y:controller_analog_e_t:pros 20 1 13 0 26 controller_analog_e_t:pros 7 1 13 0 51 E_CONTROLLER_DIGITAL_L1:controller_digital_e_t:pros 7 1 13 0 51 E_CONTROLLER_DIGITAL_L2:controller_digital_e_t:pros 7 1 13 0 51 E_CONTROLLER_DIGITAL_R1:controller_digital_e_t:pros 7 1 13 0 51 E_CONTROLLER_DIGITAL_R2:controller_digital_e_t:pros 7 1 13 0 51 E_CONTROLLER_DIGITAL_UP:controller_digital_e_t:pros 7 1 13 0 53 E_CONTROLLER_DIGITAL_DOWN:controller_digital_e_t:pros 7 1 13 0 53 E_CONTROLLER_DIGITAL_LEFT:controller_digital_e_t:pros 7 1 13 0 54 E_CONTROLLER_DIGITAL_RIGHT:controller_digital_e_t:pros 7 1 13 0 50 E_CONTROLLER_DIGITAL_X:controller_digital_e_t:pros 7 1 13 0 50 E_CONTROLLER_DIGITAL_B:controller_digital_e_t:pros 7 1 13 0 50 E_CONTROLLER_DIGITAL_Y:controller_digital_e_t:pros 7 1 13 0 50 E_CONTROLLER_DIGITAL_A:controller_digital_e_t:pros 20 1 13 0 27 controller_digital_e_t:pros 9 1 13 0 15 baked_date:pros 9 1 13 0 15 baked_time:pros 20 1 13 0 8 uint16_t 6 1 13 0 18 year:date_s_t:pros 6 1 13 0 17 day:date_s_t:pros 6 1 13 0 19 month:date_s_t:pros 20 1 13 0 13 date_s_t:pros 6 1 13 0 18 hour:time_s_t:pros 6 1 13 0 17 min:time_s_t:pros 6 1 13 0 17 sec:time_s_t:pros 6 1 13 0 22 sec_hund:time_s_t:pros 20 1 13 0 13 time_s_t:pros 20 1 13 0 7 int32_t 8 1 13 0 30 controller_is_connected:c:pros 10 1 13 0 67 192:51:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 8 1 13 0 28 controller_get_analog:c:pros 10 1 13 0 67 214:49:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 10 1 13 0 67 214:75:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 8 1 13 0 38 controller_get_battery_capacity:c:pros 10 1 13 0 67 231:59:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 8 1 13 0 35 controller_get_battery_level:c:pros 10 1 13 0 67 248:56:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 8 1 13 0 29 controller_get_digital:c:pros 10 1 13 0 67 269:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 10 1 13 0 67 269:77:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 8 1 13 0 39 controller_get_digital_new_press:c:pros 10 1 13 0 67 298:60:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 10 1 13 0 67 298:87:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 8 1 13 0 23 controller_print:c:pros 10 1 13 0 67 327:44:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 10 1 13 0 67 327:56:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 10 1 13 0 67 327:70:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 10 1 13 0 67 327:87:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 8 1 13 0 26 controller_set_text:c:pros 10 1 13 0 67 354:47:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 10 1 13 0 67 354:59:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 10 1 13 0 67 354:73:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 10 1 13 0 67 354:90:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 8 1 13 0 28 controller_clear_line:c:pros 10 1 13 0 67 377:49:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 10 1 13 0 67 377:61:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 8 1 13 0 23 controller_clear:c:pros 10 1 13 0 67 399:44:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 8 1 13 0 24 controller_rumble:c:pros 10 1 13 0 67 424:45:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 10 1 13 0 67 424:61:/home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 8 1 13 0 26 battery_get_voltage:c:pros 8 1 13 0 26 battery_get_current:c:pros 8 1 13 0 30 battery_get_temperature:c:pros 8 1 13 0 27 battery_get_capacity:c:pros 8 1 13 0 23 usd_is_installed:c:pros 0 0 1 0 0 0 60 /home/bluecore/Desktop/Pros/Main Project/include/pros/misc.h 1698321186