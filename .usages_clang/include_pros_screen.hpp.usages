22 serialization::archive 19 0 0 0 0 40 /home/bluecore/Desktop/Pros/Main Project 40 /home/bluecore/Desktop/Pros/Main Project 0 0 648 0 0 0 424 /**
 * \file screen.hpp
 *
 * Brain screen display and touch functions.
 *
 * Contains user calls to the v5 screen for touching and displaying graphics.
 *
 * \copyright (c) 2017-2023, Purdue University ACM SIGBots.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */ 1 1 13 4 18446744073709551615 1 # 15 1 15 2 18446744073709551615 6 ifndef 15 2 15 8 18446744073709551615 17 _PROS_SCREEN_HPP_ 15 9 15 26 18446744073709551615 1 # 16 1 16 2 18446744073709551615 6 define 16 2 16 8 18446744073709551615 17 _PROS_SCREEN_HPP_ 16 9 16 26 18446744073709551615 1 # 18 1 18 2 18446744073709551615 7 include 18 2 18 9 18446744073709551615 15 "pros/screen.h" 18 10 18 25 18446744073709551615 1 # 19 1 19 2 18446744073709551615 7 include 19 2 19 9 18446744073709551615 1 < 19 10 19 11 18446744073709551615 7 cstdint 19 11 19 18 18446744073709551615 1 > 19 18 19 19 18446744073709551615 1 # 20 1 20 2 18446744073709551615 7 include 20 2 20 9 18446744073709551615 1 < 20 10 20 11 18446744073709551615 6 string 20 11 20 17 18446744073709551615 1 > 20 17 20 18 18446744073709551615 9 namespace 22 1 22 10 18446744073709551615 4 pros 22 11 22 15 0 1 { 22 16 22 17 18446744073709551615 9 namespace 23 1 23 10 18446744073709551615 6 screen 23 11 23 17 1 1 { 23 18 23 19 18446744073709551615 1 # 25 1 25 2 18446744073709551615 6 pragma 25 2 25 8 18446744073709551615 3 GCC 25 9 25 12 18446744073709551615 10 diagnostic 25 13 25 23 18446744073709551615 4 push 25 24 25 28 18446744073709551615 1 # 26 1 26 2 18446744073709551615 6 pragma 26 2 26 8 18446744073709551615 3 GCC 26 9 26 12 18446744073709551615 10 diagnostic 26 13 26 23 18446744073709551615 7 ignored 26 24 26 31 18446744073709551615 19 "-Wunused-function" 26 32 26 51 18446744073709551615 9 namespace 28 1 28 10 18446744073709551615 1 { 28 11 28 12 18446744073709551615 8 template 29 1 29 9 18446744073709551615 1 < 29 10 29 11 18446744073709551615 8 typename 29 11 29 19 18446744073709551615 1 T 29 20 29 21 2 1 > 29 21 29 22 18446744073709551615 1 T 30 1 30 2 2 12 convert_args 30 3 30 15 3 1 ( 30 15 30 16 18446744073709551615 1 T 30 16 30 17 2 3 arg 30 18 30 21 4 1 ) 30 21 30 22 18446744073709551615 1 { 30 23 30 24 18446744073709551615 6 return 31 2 31 8 18446744073709551615 3 arg 31 9 31 12 4 1 ; 31 12 31 13 18446744073709551615 1 } 32 1 32 2 18446744073709551615 5 const 33 1 33 6 18446744073709551615 4 char 33 7 33 11 18446744073709551615 1 * 33 11 33 12 3 12 convert_args 33 13 33 25 3 1 ( 33 25 33 26 3 5 const 33 26 33 31 18446744073709551615 3 std 33 32 33 35 5 2 :: 33 35 33 37 18446744073709551615 6 string 33 37 33 43 6 1 & 33 43 33 44 18446744073709551615 3 arg 33 45 33 48 7 1 ) 33 48 33 49 3 1 { 33 50 33 51 18446744073709551615 6 return 34 2 34 8 18446744073709551615 3 arg 34 9 34 12 7 1 . 34 12 34 13 8 5 c_str 34 13 34 18 8 1 ( 34 18 34 19 8 1 ) 34 19 34 20 8 1 ; 34 20 34 21 18446744073709551615 1 } 35 1 35 2 18446744073709551615 1 } 36 1 36 2 18446744073709551615 12 // namespace 36 4 36 16 18446744073709551615 1 # 38 1 38 2 18446744073709551615 6 pragma 38 2 38 8 18446744073709551615 3 GCC 38 9 38 12 18446744073709551615 10 diagnostic 38 13 38 23 18446744073709551615 3 pop 38 24 38 27 18446744073709551615 80 /******************************************************************************/ 40 5 40 85 18446744073709551615 80 /**                  Screen Graphical Display Functions                      **/ 41 5 41 85 18446744073709551615 80 /**                                                                          **/ 42 5 42 85 18446744073709551615 80 /**   These functions allow programmers to display shapes on the v5 screen   **/ 43 5 43 85 18446744073709551615 80 /******************************************************************************/ 44 5 44 85 18446744073709551615 542 /**
     * Set the pen color for subsequent graphics operations
     * 
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param color	The pen color to set (it is recommended to use values
     * 		 from the enum defined in colors.h)
     * 
     * \return Returns 1 if the mutex was successfully returned, or PROS_ERR if 
     * there was an error either taking or returning the screen mutex.
     */ 46 5 58 8 18446744073709551615 3 std 59 5 59 8 5 2 :: 59 8 59 10 9 8 uint32_t 59 10 59 18 9 7 set_pen 59 19 59 26 9 1 ( 59 26 59 27 9 5 const 59 27 59 32 18446744073709551615 3 std 59 33 59 36 5 2 :: 59 36 59 38 18446744073709551615 8 uint32_t 59 38 59 46 10 5 color 59 47 59 52 10 1 ) 59 52 59 53 9 1 ; 59 53 59 54 18446744073709551615 559 /**
     * Set the eraser color for erasing and the current background.
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     * 
     * \param color	The background color to set (it is recommended to use values
     * 					from the enum defined in colors.h)
     * 
     * \return Returns 1 if the mutex was successfully returned, or PROS_ERR
     *  if there was an error either taking or returning the screen mutex.
     */ 61 5 73 8 18446744073709551615 3 std 74 5 74 8 5 2 :: 74 8 74 10 11 8 uint32_t 74 10 74 18 11 10 set_eraser 74 19 74 29 11 1 ( 74 29 74 30 11 5 const 74 30 74 35 18446744073709551615 3 std 74 36 74 39 5 2 :: 74 39 74 41 18446744073709551615 8 uint32_t 74 41 74 49 12 5 color 74 50 74 55 12 1 ) 74 55 74 56 11 1 ; 74 56 74 57 18446744073709551615 421 /**
     *  Get the current pen color.
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     * 
     * \return The current pen color in the form of a value from the enum 
     * defined in colors.h, or PROS_ERR if there was an error taking or 
     * returning the screen mutex.
     */ 76 5 86 8 18446744073709551615 3 std 87 5 87 8 5 2 :: 87 8 87 10 13 8 uint32_t 87 10 87 18 13 7 get_pen 87 19 87 26 13 1 ( 87 26 87 27 13 1 ) 87 27 87 28 13 1 ; 87 28 87 29 18446744073709551615 426 /**
     * Get the current eraser color.
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \return The current eraser color in the form of a value from the enum
     *  defined in colors.h, or PROS_ERR if there was an error taking or 
     *  returning the screen mutex.
     */ 89 5 99 8 18446744073709551615 3 std 100 5 100 8 5 2 :: 100 8 100 10 14 8 uint32_t 100 10 100 18 14 10 get_eraser 100 19 100 29 14 1 ( 100 29 100 30 14 1 ) 100 30 100 31 14 1 ; 100 31 100 32 18446744073709551615 370 /**
     * Clear display with eraser color
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     *         taking or returning the screen mutex.
     */ 102 5 111 8 18446744073709551615 3 std 112 5 112 8 5 2 :: 112 8 112 10 15 8 uint32_t 112 10 112 18 15 5 erase 112 19 112 24 15 1 ( 112 24 112 25 15 1 ) 112 25 112 26 15 1 ; 112 26 112 27 18446744073709551615 498 /**
     * Scroll lines on the display upwards.
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param start_line    The line from which scrolling will start
     * \param lines			The number of lines to scroll up
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured
     *  taking or returning the screen mutex.
     */ 114 5 126 8 18446744073709551615 3 std 127 5 127 8 5 2 :: 127 8 127 10 16 8 uint32_t 127 10 127 18 16 6 scroll 127 19 127 25 16 1 ( 127 25 127 26 16 5 const 127 26 127 31 18446744073709551615 3 std 127 32 127 35 5 2 :: 127 35 127 37 18446744073709551615 7 int16_t 127 37 127 44 17 10 start_line 127 45 127 55 17 1 , 127 55 127 56 16 5 const 127 57 127 62 18446744073709551615 3 std 127 63 127 66 5 2 :: 127 66 127 68 18446744073709551615 7 int16_t 127 68 127 75 18 5 lines 127 76 127 81 18 1 ) 127 81 127 82 16 1 ; 127 82 127 83 18446744073709551615 830 /**
     * Scroll lines within a region on the display
     *
     * This function behaves in the same way as `screen_scroll`, except that you
     * specify a rectangular region within which to scroll lines instead of a start
     * line.
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x0, y0	The (x,y) coordinates of the first corner of the
     * 						rectangular region
     * \param x1, y1	The (x,y) coordinates of the second corner of the
     * 						rectangular region
     * \param lines 	The number of lines to scroll upwards
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * taking or returning the screen mutex.
     */ 129 5 148 8 18446744073709551615 3 std 149 5 149 8 5 2 :: 149 8 149 10 19 8 uint32_t 149 10 149 18 19 11 scroll_area 149 19 149 30 19 1 ( 149 30 149 31 19 5 const 149 31 149 36 18446744073709551615 3 std 149 37 149 40 5 2 :: 149 40 149 42 18446744073709551615 7 int16_t 149 42 149 49 20 2 x0 149 50 149 52 20 1 , 149 52 149 53 19 5 const 149 54 149 59 18446744073709551615 3 std 149 60 149 63 5 2 :: 149 63 149 65 18446744073709551615 7 int16_t 149 65 149 72 21 2 y0 149 73 149 75 21 1 , 149 75 149 76 19 5 const 149 77 149 82 18446744073709551615 3 std 149 83 149 86 5 2 :: 149 86 149 88 18446744073709551615 7 int16_t 149 88 149 95 22 2 x1 149 96 149 98 22 1 , 149 98 149 99 19 5 const 149 100 149 105 18446744073709551615 3 std 149 106 149 109 5 2 :: 149 109 149 111 18446744073709551615 7 int16_t 149 111 149 118 23 2 y1 149 119 149 121 23 1 , 149 121 149 122 19 3 std 149 123 149 126 5 2 :: 149 126 149 128 18446744073709551615 7 int16_t 149 128 149 135 24 5 lines 149 136 149 141 24 1 ) 149 141 149 142 19 1 ; 149 142 149 143 18446744073709551615 836 /**
     * Copy a screen region (designated by a rectangle) from an off-screen buffer 
     * to the screen
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x0, y0 	The (x,y) coordinates of the first corner of the
     * 						rectangular region of the screen
     * \param x1, y1	The (x,y) coordinates of the second corner of the
     * 						rectangular region of the screen
     * \param buf		Off-screen buffer containing screen data
     * \param stride	Off-screen buffer width in pixels, such that image size
     * 						is stride-padding
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured taking
     *  or returning the screen mutex.
     */ 151 5 169 8 18446744073709551615 3 std 170 5 170 8 5 2 :: 170 8 170 10 25 8 uint32_t 170 10 170 18 25 9 copy_area 170 19 170 28 25 1 ( 170 28 170 29 25 5 const 170 29 170 34 18446744073709551615 3 std 170 35 170 38 5 2 :: 170 38 170 40 18446744073709551615 7 int16_t 170 40 170 47 26 2 x0 170 48 170 50 26 1 , 170 50 170 51 25 5 const 170 52 170 57 18446744073709551615 3 std 170 58 170 61 5 2 :: 170 61 170 63 18446744073709551615 7 int16_t 170 63 170 70 27 2 y0 170 71 170 73 27 1 , 170 73 170 74 25 5 const 170 75 170 80 18446744073709551615 3 std 170 81 170 84 5 2 :: 170 84 170 86 18446744073709551615 7 int16_t 170 86 170 93 28 2 x1 170 94 170 96 28 1 , 170 96 170 97 25 5 const 170 98 170 103 18446744073709551615 3 std 170 104 170 107 5 2 :: 170 107 170 109 18446744073709551615 7 int16_t 170 109 170 116 29 2 y1 170 117 170 119 29 1 , 170 119 170 120 25 8 uint32_t 170 121 170 129 30 1 * 170 129 170 130 18446744073709551615 3 buf 170 131 170 134 31 1 , 170 134 170 135 25 5 const 170 136 170 141 18446744073709551615 3 std 170 142 170 145 5 2 :: 170 145 170 147 18446744073709551615 7 int32_t 170 147 170 154 32 6 stride 170 155 170 161 32 1 ) 170 161 170 162 25 1 ; 170 162 170 163 18446744073709551615 454 /**
     * Draw a single pixel on the screen using the current pen color
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x, y 	The (x,y) coordinates of the pixel
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * taking or returning the screen mutex.
     */ 172 5 183 8 18446744073709551615 3 std 184 5 184 8 5 2 :: 184 8 184 10 33 8 uint32_t 184 10 184 18 33 10 draw_pixel 184 19 184 29 33 1 ( 184 29 184 30 33 5 const 184 30 184 35 18446744073709551615 3 std 184 36 184 39 5 2 :: 184 39 184 41 18446744073709551615 7 int16_t 184 41 184 48 34 1 x 184 49 184 50 34 1 , 184 50 184 51 33 5 const 184 52 184 57 18446744073709551615 3 std 184 58 184 61 5 2 :: 184 61 184 63 18446744073709551615 7 int16_t 184 63 184 70 35 1 y 184 71 184 72 35 1 ) 184 72 184 73 33 1 ; 184 73 184 74 18446744073709551615 443 /**
     * Erase a pixel from the screen (Sets the location)
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x, y 	The (x,y) coordinates of the erased
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * taking or returning the screen mutex.
     */ 186 5 197 8 18446744073709551615 3 std 198 5 198 8 5 2 :: 198 8 198 10 36 8 uint32_t 198 10 198 18 36 11 erase_pixel 198 19 198 30 36 1 ( 198 30 198 31 36 5 const 198 31 198 36 18446744073709551615 3 std 198 37 198 40 5 2 :: 198 40 198 42 18446744073709551615 7 int16_t 198 42 198 49 37 1 x 198 50 198 51 37 1 , 198 51 198 52 36 5 const 198 53 198 58 18446744073709551615 3 std 198 59 198 62 5 2 :: 198 62 198 64 18446744073709551615 7 int16_t 198 64 198 71 38 1 y 198 72 198 73 38 1 ) 198 73 198 74 36 1 ; 198 74 198 75 18446744073709551615 543 /**
     * Draw a line on the screen using the current pen color
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x0, y0	The (x, y) coordinates of the first point of the line
     * \param x1, y1 	The (x, y) coordinates of the second point of the line
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * taking or returning the screen mutex.
     */ 200 5 212 8 18446744073709551615 3 std 213 5 213 8 5 2 :: 213 8 213 10 39 8 uint32_t 213 10 213 18 39 9 draw_line 213 19 213 28 39 1 ( 213 28 213 29 39 5 const 213 29 213 34 18446744073709551615 3 std 213 35 213 38 5 2 :: 213 38 213 40 18446744073709551615 7 int16_t 213 40 213 47 40 2 x0 213 48 213 50 40 1 , 213 50 213 51 39 5 const 213 52 213 57 18446744073709551615 3 std 213 58 213 61 5 2 :: 213 61 213 63 18446744073709551615 7 int16_t 213 63 213 70 41 2 y0 213 71 213 73 41 1 , 213 73 213 74 39 5 const 213 75 213 80 18446744073709551615 3 std 213 81 213 84 5 2 :: 213 84 213 86 18446744073709551615 7 int16_t 213 86 213 93 42 2 x1 213 94 213 96 42 1 , 213 96 213 97 39 5 const 213 98 213 103 18446744073709551615 3 std 213 104 213 107 5 2 :: 213 107 213 109 18446744073709551615 7 int16_t 213 109 213 116 43 2 y1 213 117 213 119 43 1 ) 213 119 213 120 39 1 ; 213 120 213 121 18446744073709551615 547 /**
     * Erase a line on the screen using the current eraser color
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x0, y0	The (x, y) coordinates of the first point of the line
     * \param x1, y1 	The (x, y) coordinates of the second point of the line
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * taking or returning the screen mutex.
     */ 215 5 227 8 18446744073709551615 3 std 228 5 228 8 5 2 :: 228 8 228 10 44 8 uint32_t 228 10 228 18 44 10 erase_line 228 19 228 29 44 1 ( 228 29 228 30 44 5 const 228 30 228 35 18446744073709551615 3 std 228 36 228 39 5 2 :: 228 39 228 41 18446744073709551615 7 int16_t 228 41 228 48 45 2 x0 228 49 228 51 45 1 , 228 51 228 52 44 5 const 228 53 228 58 18446744073709551615 3 std 228 59 228 62 5 2 :: 228 62 228 64 18446744073709551615 7 int16_t 228 64 228 71 46 2 y0 228 72 228 74 46 1 , 228 74 228 75 44 5 const 228 76 228 81 18446744073709551615 3 std 228 82 228 85 5 2 :: 228 85 228 87 18446744073709551615 7 int16_t 228 87 228 94 47 2 x1 228 95 228 97 47 1 , 228 97 228 98 44 5 const 228 99 228 104 18446744073709551615 3 std 228 105 228 108 5 2 :: 228 108 228 110 18446744073709551615 7 int16_t 228 110 228 117 48 2 y1 228 118 228 120 48 1 ) 228 120 228 121 44 1 ; 228 121 228 122 18446744073709551615 557 /**
     * Draw a rectangle on the screen using the current pen color
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x0, y0 	The (x,y) coordinates of the first point of the rectangle
     * \param x1, y1 	The (x,y) coordinates of the second point of the rectangle
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * taking or returning the screen mutex.
     */ 230 5 242 8 18446744073709551615 3 std 243 5 243 8 5 2 :: 243 8 243 10 49 8 uint32_t 243 10 243 18 49 9 draw_rect 243 19 243 28 49 1 ( 243 28 243 29 49 5 const 243 29 243 34 18446744073709551615 3 std 243 35 243 38 5 2 :: 243 38 243 40 18446744073709551615 7 int16_t 243 40 243 47 50 2 x0 243 48 243 50 50 1 , 243 50 243 51 49 5 const 243 52 243 57 18446744073709551615 3 std 243 58 243 61 5 2 :: 243 61 243 63 18446744073709551615 7 int16_t 243 63 243 70 51 2 y0 243 71 243 73 51 1 , 243 73 243 74 49 5 const 243 75 243 80 18446744073709551615 3 std 243 81 243 84 5 2 :: 243 84 243 86 18446744073709551615 7 int16_t 243 86 243 93 52 2 x1 243 94 243 96 52 1 , 243 96 243 97 49 5 const 243 98 243 103 18446744073709551615 3 std 243 104 243 107 5 2 :: 243 107 243 109 18446744073709551615 7 int16_t 243 109 243 116 53 2 y1 243 117 243 119 53 1 ) 243 119 243 120 49 1 ; 243 120 243 121 18446744073709551615 561 /**
     * Erase a rectangle on the screen using the current eraser color
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x0, y0 	The (x,y) coordinates of the first point of the rectangle
     * \param x1, y1 	The (x,y) coordinates of the second point of the rectangle
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * taking or returning the screen mutex.
     */ 245 5 257 8 18446744073709551615 3 std 258 5 258 8 5 2 :: 258 8 258 10 54 8 uint32_t 258 10 258 18 54 10 erase_rect 258 19 258 29 54 1 ( 258 29 258 30 54 5 const 258 30 258 35 18446744073709551615 3 std 258 36 258 39 5 2 :: 258 39 258 41 18446744073709551615 7 int16_t 258 41 258 48 55 2 x0 258 49 258 51 55 1 , 258 51 258 52 54 5 const 258 53 258 58 18446744073709551615 3 std 258 59 258 62 5 2 :: 258 62 258 64 18446744073709551615 7 int16_t 258 64 258 71 56 2 y0 258 72 258 74 56 1 , 258 74 258 75 54 5 const 258 76 258 81 18446744073709551615 3 std 258 82 258 85 5 2 :: 258 85 258 87 18446744073709551615 7 int16_t 258 87 258 94 57 2 x1 258 95 258 97 57 1 , 258 97 258 98 54 5 const 258 99 258 104 18446744073709551615 3 std 258 105 258 108 5 2 :: 258 108 258 110 18446744073709551615 7 int16_t 258 110 258 117 58 2 y1 258 118 258 120 58 1 ) 258 120 258 121 54 1 ; 258 121 258 122 18446744073709551615 577 /**
     * Fill a rectangular region of the screen using the current pen
     * 		  color
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x0, y0 	The (x,y) coordinates of the first point of the rectangle
     * \param x1, y1 	The (x,y) coordinates of the second point of the rectangle
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * taking or returning the screen mutex.
     */ 260 5 273 8 18446744073709551615 3 std 274 5 274 8 5 2 :: 274 8 274 10 59 8 uint32_t 274 10 274 18 59 9 fill_rect 274 19 274 28 59 1 ( 274 28 274 29 59 5 const 274 29 274 34 18446744073709551615 3 std 274 35 274 38 5 2 :: 274 38 274 40 18446744073709551615 7 int16_t 274 40 274 47 60 2 x0 274 48 274 50 60 1 , 274 50 274 51 59 5 const 274 52 274 57 18446744073709551615 3 std 274 58 274 61 5 2 :: 274 61 274 63 18446744073709551615 7 int16_t 274 63 274 70 61 2 y0 274 71 274 73 61 1 , 274 73 274 74 59 5 const 274 75 274 80 18446744073709551615 3 std 274 81 274 84 5 2 :: 274 84 274 86 18446744073709551615 7 int16_t 274 86 274 93 62 2 x1 274 94 274 96 62 1 , 274 96 274 97 59 5 const 274 98 274 103 18446744073709551615 3 std 274 104 274 107 5 2 :: 274 107 274 109 18446744073709551615 7 int16_t 274 109 274 116 63 2 y1 274 117 274 119 63 1 ) 274 119 274 120 59 1 ; 274 120 274 121 18446744073709551615 505 /**
     * Draw a circle on the screen using the current pen color
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x, y 	The (x,y) coordinates of the center of the circle
     * \param r 	The radius of the circle
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * taking or returning the screen mutex.
     */ 276 5 288 8 18446744073709551615 3 std 289 5 289 8 5 2 :: 289 8 289 10 64 8 uint32_t 289 10 289 18 64 11 draw_circle 289 19 289 30 64 1 ( 289 30 289 31 64 5 const 289 31 289 36 18446744073709551615 3 std 289 37 289 40 5 2 :: 289 40 289 42 18446744073709551615 7 int16_t 289 42 289 49 65 1 x 289 50 289 51 65 1 , 289 51 289 52 64 5 const 289 53 289 58 18446744073709551615 3 std 289 59 289 62 5 2 :: 289 62 289 64 18446744073709551615 7 int16_t 289 64 289 71 66 1 y 289 72 289 73 66 1 , 289 73 289 74 64 5 const 289 75 289 80 18446744073709551615 3 std 289 81 289 84 5 2 :: 289 84 289 86 18446744073709551615 7 int16_t 289 86 289 93 67 6 radius 289 94 289 100 67 1 ) 289 100 289 101 64 1 ; 289 101 289 102 18446744073709551615 509 /**
     * Erase a circle on the screen using the current eraser color
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x, y 	The (x,y) coordinates of the center of the circle
     * \param r 	The radius of the circle
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * taking or returning the screen mutex.
     */ 291 5 303 8 18446744073709551615 3 std 304 5 304 8 5 2 :: 304 8 304 10 68 8 uint32_t 304 10 304 18 68 12 erase_circle 304 19 304 31 68 1 ( 304 31 304 32 68 5 const 304 32 304 37 18446744073709551615 3 std 304 38 304 41 5 2 :: 304 41 304 43 18446744073709551615 7 int16_t 304 43 304 50 69 1 x 304 51 304 52 69 1 , 304 52 304 53 68 5 const 304 54 304 59 18446744073709551615 3 std 304 60 304 63 5 2 :: 304 63 304 65 18446744073709551615 7 int16_t 304 65 304 72 70 1 y 304 73 304 74 70 1 , 304 74 304 75 68 5 const 304 76 304 81 18446744073709551615 3 std 304 82 304 85 5 2 :: 304 85 304 87 18446744073709551615 7 int16_t 304 87 304 94 71 6 radius 304 95 304 101 71 1 ) 304 101 304 102 68 1 ; 304 102 304 103 18446744073709551615 525 /**
     * Fill a circular region of the screen using the current pen
     * 		  color
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     *
     * \param x, y 	The (x,y) coordinates of the center of the circle
     * \param r 	The radius of the circle
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * taking or returning the screen mutex.
     */ 306 5 319 8 18446744073709551615 3 std 320 5 320 8 5 2 :: 320 8 320 10 72 8 uint32_t 320 10 320 18 72 11 fill_circle 320 19 320 30 72 1 ( 320 30 320 31 72 5 const 320 31 320 36 18446744073709551615 3 std 320 37 320 40 5 2 :: 320 40 320 42 18446744073709551615 7 int16_t 320 42 320 49 73 1 x 320 50 320 51 73 1 , 320 51 320 52 72 5 const 320 53 320 58 18446744073709551615 3 std 320 59 320 62 5 2 :: 320 62 320 64 18446744073709551615 7 int16_t 320 64 320 71 74 1 y 320 72 320 73 74 1 , 320 73 320 74 72 5 const 320 75 320 80 18446744073709551615 3 std 320 81 320 84 5 2 :: 320 84 320 86 18446744073709551615 7 int16_t 320 86 320 93 75 6 radius 320 94 320 100 75 1 ) 320 100 320 101 72 1 ; 320 101 320 102 18446744073709551615 80 /******************************************************************************/ 322 5 322 85 18446744073709551615 80 /**                       Screen Text Display Functions                      **/ 323 5 323 85 18446744073709551615 80 /**                                                                          **/ 324 5 324 85 18446744073709551615 80 /**     These functions allow programmers to display text on the v5 screen   **/ 325 5 325 85 18446744073709551615 80 /******************************************************************************/ 326 5 326 85 18446744073709551615 653 /**
     * Print a formatted string to the screen, overwrite available for printing at location too.
     * 
     * Will default to a medium sized font by default if invalid txt_fmt is given.
     * 
     * \param txt_fmt Text format enum that determines if the text is medium, large, medium_center, or large_center. (DOES NOT SUPPORT SMALL)
     * \param line The line number on which to print
     * \param x The (x,y) coordinates of the top left corner of the string
     * \param y The (x,y) coordinates of the top left corner of the string
     * \param fmt  Format string
     * \param ...  Optional list of arguments for the format string
     */ 328 5 339 8 18446744073709551615 8 template 340 5 340 13 18446744073709551615 1 < 340 14 340 15 18446744073709551615 8 typename 340 15 340 23 18446744073709551615 3 ... 340 23 340 26 18446744073709551615 6 Params 340 27 340 33 76 1 > 340 33 340 34 18446744073709551615 4 void 341 5 341 9 18446744073709551615 5 print 341 10 341 15 77 1 ( 341 15 341 16 18446744073709551615 4 pros 341 16 341 20 0 2 :: 341 20 341 22 18446744073709551615 15 text_format_e_t 341 22 341 37 78 7 txt_fmt 341 38 341 45 79 1 , 341 45 341 46 18446744073709551615 5 const 341 47 341 52 18446744073709551615 3 std 341 53 341 56 5 2 :: 341 56 341 58 18446744073709551615 7 int16_t 341 58 341 65 80 4 line 341 66 341 70 80 1 , 341 70 341 71 18446744073709551615 5 const 341 72 341 77 18446744073709551615 4 char 341 78 341 82 18446744073709551615 1 * 341 82 341 83 18446744073709551615 4 text 341 84 341 88 81 1 , 341 88 341 89 18446744073709551615 6 Params 341 90 341 96 76 3 ... 341 96 341 99 18446744073709551615 4 args 341 100 341 104 82 1 ) 341 104 341 105 18446744073709551615 1 { 341 105 341 106 18446744073709551615 4 pros 342 6 342 10 0 2 :: 342 10 342 12 83 1 c 342 12 342 13 84 2 :: 342 13 342 15 83 12 screen_print 342 15 342 27 83 1 ( 342 27 342 28 83 7 txt_fmt 342 28 342 35 79 1 , 342 35 342 36 83 4 line 342 37 342 41 80 1 , 342 41 342 42 83 4 text 342 43 342 47 81 1 , 342 47 342 48 83 12 convert_args 342 49 342 61 85 1 ( 342 61 342 62 18446744073709551615 4 args 342 62 342 66 82 1 ) 342 66 342 67 18446744073709551615 3 ... 342 67 342 70 18446744073709551615 1 ) 342 70 342 71 83 1 ; 342 71 342 72 18446744073709551615 1 } 343 5 343 6 18446744073709551615 8 template 345 5 345 13 18446744073709551615 1 < 345 14 345 15 18446744073709551615 8 typename 345 15 345 23 18446744073709551615 3 ... 345 23 345 26 18446744073709551615 6 Params 345 27 345 33 86 1 > 345 33 345 34 18446744073709551615 4 void 346 5 346 9 18446744073709551615 5 print 346 10 346 15 77 1 ( 346 15 346 16 18446744073709551615 4 pros 346 16 346 20 0 2 :: 346 20 346 22 18446744073709551615 15 text_format_e_t 346 22 346 37 78 7 txt_fmt 346 38 346 45 87 1 , 346 45 346 46 18446744073709551615 5 const 346 47 346 52 18446744073709551615 3 std 346 53 346 56 5 2 :: 346 56 346 58 18446744073709551615 7 int16_t 346 58 346 65 88 1 x 346 66 346 67 88 1 , 346 67 346 68 18446744073709551615 5 const 346 69 346 74 18446744073709551615 3 std 346 75 346 78 5 2 :: 346 78 346 80 18446744073709551615 7 int16_t 346 80 346 87 89 1 y 346 88 346 89 89 1 , 346 89 346 90 18446744073709551615 5 const 346 91 346 96 18446744073709551615 4 char 346 97 346 101 18446744073709551615 1 * 346 101 346 102 18446744073709551615 4 text 346 103 346 107 90 1 , 346 107 346 108 18446744073709551615 6 Params 346 109 346 115 86 3 ... 346 115 346 118 18446744073709551615 4 args 346 119 346 123 91 1 ) 346 123 346 124 18446744073709551615 1 { 346 124 346 125 18446744073709551615 4 pros 347 6 347 10 0 2 :: 347 10 347 12 92 1 c 347 12 347 13 84 2 :: 347 13 347 15 92 15 screen_print_at 347 15 347 30 92 1 ( 347 30 347 31 92 7 txt_fmt 347 31 347 38 87 1 , 347 38 347 39 92 1 x 347 40 347 41 88 1 , 347 41 347 42 92 1 y 347 43 347 44 89 1 , 347 44 347 45 92 4 text 347 46 347 50 90 1 , 347 50 347 51 92 12 convert_args 347 52 347 64 85 1 ( 347 64 347 65 18446744073709551615 4 args 347 65 347 69 91 1 ) 347 69 347 70 18446744073709551615 3 ... 347 70 347 73 18446744073709551615 1 ) 347 73 347 74 92 1 ; 347 74 347 75 18446744073709551615 1 } 348 5 348 6 18446744073709551615 80 /******************************************************************************/ 350 5 350 85 18446744073709551615 80 /**                         Screen Touch Functions                           **/ 351 5 351 85 18446744073709551615 80 /**                                                                          **/ 352 5 352 85 18446744073709551615 80 /**               These functions allow programmers to access                **/ 353 5 353 85 18446744073709551615 80 /**                    information about screen touches                      **/ 354 5 354 85 18446744073709551615 80 /******************************************************************************/ 355 5 355 85 18446744073709551615 481 /**
     * Gets the touch status of the last touch of the screen.
     * 
     * \return The last_touch_e_t enum specifier that indicates the last touch status of the screen (E_TOUCH_EVENT_RELEASE, E_TOUCH_EVENT_PRESS, or E_TOUCH_EVENT_PRESS_AND_HOLD).
     * This will be released by default if no action was taken. 
     * If an error occured, the screen_touch_status_s_t will have its 
     * last_touch_e_t enum specifier set to E_TOUCH_ERR, and other values set to -1.
     */ 357 4 364 8 18446744073709551615 23 screen_touch_status_s_t 365 5 365 28 93 12 touch_status 365 29 365 41 94 1 ( 365 41 365 42 94 1 ) 365 42 365 43 94 1 ; 365 43 365 44 18446744073709551615 560 /**
     * Assigns a callback function to be called when a certain touch event happens.
     *
     * This function uses the following values of errno when an error state is
     * reached:
     * EACCESS - Another resource is currently trying to access the screen mutex.
     * 
     * \param cb Function pointer to callback when event type happens
     * \param event_type Touch event that will trigger the callback.
     * 
     * \return 1 if there were no errors, or PROS_ERR if an error occured 
     * while taking or returning the screen mutex.
     */ 367 5 379 8 18446744073709551615 3 std 380 5 380 8 5 2 :: 380 8 380 10 95 8 uint32_t 380 10 380 18 95 14 touch_callback 380 19 380 33 95 1 ( 380 33 380 34 95 19 touch_event_cb_fn_t 380 34 380 53 96 2 cb 380 54 380 56 97 1 , 380 56 380 57 95 14 last_touch_e_t 380 58 380 72 98 10 event_type 380 73 380 83 99 1 ) 380 83 380 84 95 1 ; 380 84 380 85 18446744073709551615 1 } 382 1 382 2 18446744073709551615 18 //namespace screen 382 3 382 21 18446744073709551615 1 } 383 1 383 2 18446744073709551615 16 //namespace pros 383 3 383 19 18446744073709551615 1 # 385 1 385 2 18446744073709551615 5 endif 385 2 385 7 18446744073709551615 14 //header guard 385 8 385 22 18446744073709551615 0 0 100 0 0 0 22 0 0 1 13 0 4 pros 22 1 13 0 11 screen:pros 27 1 13 0 70 29:20:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 30 1 13 0 25 convert_args::screen:pros 10 1 13 0 70 30:18:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 22 1 13 0 3 std 20 1 13 0 10 string:std 10 1 13 0 70 33:45:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 21 1 13 0 30 c_str:basic_string:__cxx11:std 8 1 13 0 19 set_pen:screen:pros 10 1 13 0 70 59:47:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 22 set_eraser:screen:pros 10 1 13 0 70 74:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 19 get_pen:screen:pros 8 1 13 0 22 get_eraser:screen:pros 8 1 13 0 17 erase:screen:pros 8 1 13 0 18 scroll:screen:pros 10 1 13 0 71 127:45:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 127:76:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 23 scroll_area:screen:pros 10 1 13 0 71 149:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 149:73:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 149:96:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 149:119:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 149:136:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 21 copy_area:screen:pros 10 1 13 0 71 170:48:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 170:71:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 170:94:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 170:117:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 20 1 13 0 8 uint32_t 10 1 13 0 72 170:131:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 170:155:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 22 draw_pixel:screen:pros 10 1 13 0 71 184:49:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 184:71:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 23 erase_pixel:screen:pros 10 1 13 0 71 198:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 198:72:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 21 draw_line:screen:pros 10 1 13 0 71 213:48:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 213:71:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 213:94:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 213:117:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 22 erase_line:screen:pros 10 1 13 0 71 228:49:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 228:72:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 228:95:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 228:118:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 21 draw_rect:screen:pros 10 1 13 0 71 243:48:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 243:71:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 243:94:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 243:117:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 22 erase_rect:screen:pros 10 1 13 0 71 258:49:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 258:72:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 258:95:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 258:118:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 21 fill_rect:screen:pros 10 1 13 0 71 274:48:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 274:71:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 274:94:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 274:117:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 23 draw_circle:screen:pros 10 1 13 0 71 289:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 289:72:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 289:94:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 24 erase_circle:screen:pros 10 1 13 0 71 304:51:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 304:73:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 304:95:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 23 fill_circle:screen:pros 10 1 13 0 71 320:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 320:72:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 320:94:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 27 1 13 0 71 340:27:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 30 1 13 0 17 print:screen:pros 20 1 13 0 20 text_format_e_t:pros 10 1 13 0 71 341:38:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 341:66:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 341:84:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 341:100:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 19 screen_print:c:pros 22 1 13 0 6 c:pros 49 1 13 0 12 convert_args 27 1 13 0 71 345:27:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 346:38:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 346:66:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 71 346:88:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 346:103:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 10 1 13 0 72 346:119:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 8 1 13 0 22 screen_print_at:c:pros 20 1 13 0 28 screen_touch_status_s_t:pros 8 1 13 0 24 touch_status:screen:pros 8 1 13 0 26 touch_callback:screen:pros 20 1 13 0 24 touch_event_cb_fn_t:pros 10 1 13 0 71 380:54:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 20 1 13 0 19 last_touch_e_t:pros 10 1 13 0 71 380:73:/home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 0 0 1 0 0 0 64 /home/bluecore/Desktop/Pros/Main Project/include/pros/screen.hpp 1698321182