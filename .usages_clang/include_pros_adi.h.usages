22 serialization::archive 19 0 0 0 0 40 /home/bluecore/Desktop/Pros/Main Project 40 /home/bluecore/Desktop/Pros/Main Project 0 0 822 0 0 0 554 /**
 * \file pros/adi.h
 *
 * Contains prototypes for interfacing with the ADI.
 *
 * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/adi.html to learn more.
 *
 * This file should not be modified by users, since it gets replaced whenever
 * a kernel upgrade occurs.
 *
 * \copyright Copyright (c) 2017-2023, Purdue University ACM SIGBots.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */ 1 1 16 4 18446744073709551615 1 # 18 1 18 2 18446744073709551615 6 ifndef 18 2 18 8 18446744073709551615 12 _PROS_ADI_H_ 18 9 18 21 18446744073709551615 1 # 19 1 19 2 18446744073709551615 6 define 19 2 19 8 18446744073709551615 12 _PROS_ADI_H_ 19 9 19 21 18446744073709551615 1 # 21 1 21 2 18446744073709551615 7 include 21 2 21 9 18446744073709551615 1 < 21 10 21 11 18446744073709551615 7 stdbool 21 11 21 18 18446744073709551615 1 . 21 18 21 19 18446744073709551615 1 h 21 19 21 20 18446744073709551615 1 > 21 20 21 21 18446744073709551615 1 # 22 1 22 2 18446744073709551615 7 include 22 2 22 9 18446744073709551615 1 < 22 10 22 11 18446744073709551615 6 stdint 22 11 22 17 18446744073709551615 1 . 22 17 22 18 18446744073709551615 1 h 22 18 22 19 18446744073709551615 1 > 22 19 22 20 18446744073709551615 1 # 23 1 23 2 18446744073709551615 6 ifndef 23 2 23 8 18446744073709551615 8 PROS_ERR 23 9 23 17 18446744073709551615 1 # 24 1 24 2 18446744073709551615 6 define 24 2 24 8 18446744073709551615 8 PROS_ERR 24 9 24 17 18446744073709551615 1 ( 24 18 24 19 18446744073709551615 9 INT32_MAX 24 19 24 28 18446744073709551615 1 ) 24 28 24 29 18446744073709551615 1 # 25 1 25 2 18446744073709551615 5 endif 25 2 25 7 18446744073709551615 1 # 27 1 27 2 18446744073709551615 5 ifdef 27 2 27 7 18446744073709551615 11 __cplusplus 27 8 27 19 18446744073709551615 6 extern 28 1 28 7 18446744073709551615 3 "C" 28 8 28 11 18446744073709551615 1 { 28 12 28 13 18446744073709551615 9 namespace 29 1 29 10 18446744073709551615 4 pros 29 11 29 15 0 1 { 29 16 29 17 18446744073709551615 1 # 30 1 30 2 18446744073709551615 5 endif 30 2 30 7 18446744073709551615 52 /**
 * Represents the port type for an ADI port.
 */ 32 1 34 4 18446744073709551615 7 typedef 35 1 35 8 18446744073709551615 4 enum 35 9 35 13 18446744073709551615 17 adi_port_config_e 35 14 35 31 1 1 { 35 32 35 33 18446744073709551615 15 E_ADI_ANALOG_IN 36 2 36 17 2 1 = 36 18 36 19 18446744073709551615 1 0 36 20 36 21 18446744073709551615 1 , 36 21 36 22 18446744073709551615 16 E_ADI_ANALOG_OUT 37 2 37 18 3 1 = 37 19 37 20 18446744073709551615 1 1 37 21 37 22 18446744073709551615 1 , 37 22 37 23 18446744073709551615 16 E_ADI_DIGITAL_IN 38 2 38 18 4 1 = 38 19 38 20 18446744073709551615 1 2 38 21 38 22 18446744073709551615 1 , 38 22 38 23 18446744073709551615 17 E_ADI_DIGITAL_OUT 39 2 39 19 5 1 = 39 20 39 21 18446744073709551615 1 3 39 22 39 23 18446744073709551615 1 , 39 23 39 24 18446744073709551615 1 # 41 1 41 2 18446744073709551615 5 ifdef 41 2 41 7 18446744073709551615 13 _INTELLISENSE 41 8 41 21 18446744073709551615 1 # 42 1 42 2 18446744073709551615 6 define 42 2 42 8 18446744073709551615 21 _DEPRECATE_DIGITAL_IN 42 9 42 30 18446744073709551615 1 = 42 31 42 32 18446744073709551615 16 E_ADI_DIGITAL_IN 42 33 42 49 18446744073709551615 1 # 43 1 43 2 18446744073709551615 6 define 43 2 43 8 18446744073709551615 20 _DEPRECATE_ANALOG_IN 43 9 43 29 18446744073709551615 1 = 43 30 43 31 18446744073709551615 15 E_ADI_ANALOG_IN 43 32 43 47 18446744073709551615 1 # 44 1 44 2 18446744073709551615 4 else 44 2 44 6 18446744073709551615 1 # 45 1 45 2 18446744073709551615 6 define 45 2 45 8 18446744073709551615 21 _DEPRECATE_DIGITAL_IN 45 9 45 30 18446744073709551615 13 __attribute__ 45 31 45 44 18446744073709551615 1 ( 45 44 45 45 18446744073709551615 1 ( 45 45 45 46 18446744073709551615 10 deprecated 45 46 45 56 18446744073709551615 1 ( 45 56 45 57 18446744073709551615 30 "use E_ADI_DIGITAL_IN instead" 45 57 45 87 18446744073709551615 1 ) 45 87 45 88 18446744073709551615 1 ) 45 88 45 89 18446744073709551615 1 ) 45 89 45 90 18446744073709551615 1 = 45 91 45 92 18446744073709551615 16 E_ADI_DIGITAL_IN 45 93 45 109 18446744073709551615 1 # 46 1 46 2 18446744073709551615 6 define 46 2 46 8 18446744073709551615 20 _DEPRECATE_ANALOG_IN 46 9 46 29 18446744073709551615 13 __attribute__ 46 30 46 43 18446744073709551615 1 ( 46 43 46 44 18446744073709551615 1 ( 46 44 46 45 18446744073709551615 10 deprecated 46 45 46 55 18446744073709551615 1 ( 46 55 46 56 18446744073709551615 29 "use E_ADI_ANALOG_IN instead" 46 56 46 85 18446744073709551615 1 ) 46 85 46 86 18446744073709551615 1 ) 46 86 46 87 18446744073709551615 1 ) 46 87 46 88 18446744073709551615 1 = 46 89 46 90 18446744073709551615 15 E_ADI_ANALOG_IN 46 91 46 106 18446744073709551615 1 # 47 1 47 2 18446744073709551615 5 endif 47 2 47 7 18446744073709551615 18 E_ADI_SMART_BUTTON 49 2 49 20 6 21 _DEPRECATE_DIGITAL_IN 49 21 49 42 6 1 , 49 42 49 43 18446744073709551615 15 E_ADI_SMART_POT 50 2 50 17 7 20 _DEPRECATE_ANALOG_IN 50 18 50 38 7 1 , 50 38 50 39 18446744073709551615 19 E_ADI_LEGACY_BUTTON 52 2 52 21 8 21 _DEPRECATE_DIGITAL_IN 52 22 52 43 8 1 , 52 43 52 44 18446744073709551615 16 E_ADI_LEGACY_POT 53 2 53 18 9 20 _DEPRECATE_ANALOG_IN 53 19 53 39 9 1 , 53 39 53 40 18446744073709551615 24 E_ADI_LEGACY_LINE_SENSOR 54 2 54 26 10 20 _DEPRECATE_ANALOG_IN 54 27 54 47 10 1 , 54 47 54 48 18446744073709551615 25 E_ADI_LEGACY_LIGHT_SENSOR 55 2 55 27 11 20 _DEPRECATE_ANALOG_IN 55 28 55 48 11 1 , 55 48 55 49 18446744073709551615 17 E_ADI_LEGACY_GYRO 56 2 56 19 12 1 = 56 20 56 21 18446744073709551615 2 10 56 22 56 24 18446744073709551615 1 , 56 24 56 25 18446744073709551615 26 E_ADI_LEGACY_ACCELEROMETER 57 2 57 28 13 20 _DEPRECATE_ANALOG_IN 57 29 57 49 13 1 , 57 49 57 50 18446744073709551615 1 # 59 1 59 2 18446744073709551615 5 undef 59 2 59 7 18446744073709551615 21 _DEPRECATE_DIGITAL_IN 59 8 59 29 18446744073709551615 1 # 60 1 60 2 18446744073709551615 5 undef 60 2 60 7 18446744073709551615 20 _DEPRECATE_ANALOG_IN 60 8 60 28 18446744073709551615 18 E_ADI_LEGACY_SERVO 62 2 62 20 14 1 = 62 21 62 22 18446744073709551615 2 12 62 23 62 25 18446744073709551615 1 , 62 25 62 26 18446744073709551615 16 E_ADI_LEGACY_PWM 63 2 63 18 15 1 = 63 19 63 20 18446744073709551615 2 13 63 21 63 23 18446744073709551615 1 , 63 23 63 24 18446744073709551615 20 E_ADI_LEGACY_ENCODER 65 2 65 22 16 1 = 65 23 65 24 18446744073709551615 2 14 65 25 65 27 18446744073709551615 1 , 65 27 65 28 18446744073709551615 23 E_ADI_LEGACY_ULTRASONIC 66 2 66 25 17 1 = 66 26 66 27 18446744073709551615 2 15 66 28 66 30 18446744073709551615 1 , 66 30 66 31 18446744073709551615 20 E_ADI_TYPE_UNDEFINED 68 2 68 22 18 1 = 68 23 68 24 18446744073709551615 3 255 68 25 68 28 18446744073709551615 1 , 68 28 68 29 18446744073709551615 9 E_ADI_ERR 69 2 69 11 19 1 = 69 12 69 13 18446744073709551615 8 PROS_ERR 69 14 69 22 19 1 } 70 1 70 2 18446744073709551615 19 adi_port_config_e_t 70 3 70 22 20 1 ; 70 22 70 23 18446744073709551615 53 /**
 * Represents the potentiometer version type.
 */ 72 1 74 4 18446744073709551615 7 typedef 75 1 75 8 18446744073709551615 4 enum 75 9 75 13 18446744073709551615 24 adi_potentiometer_type_e 75 14 75 38 21 1 { 75 39 75 40 18446744073709551615 13 E_ADI_POT_EDR 76 2 76 15 22 1 = 76 16 76 17 18446744073709551615 1 0 76 18 76 19 18446744073709551615 1 , 76 19 76 20 18446744073709551615 12 E_ADI_POT_V2 77 2 77 14 23 1 } 78 1 78 2 18446744073709551615 26 adi_potentiometer_type_e_t 78 3 78 29 24 1 ; 78 29 78 30 18446744073709551615 1 # 80 1 80 2 18446744073709551615 5 ifdef 80 2 80 7 18446744073709551615 21 PROS_USE_SIMPLE_NAMES 80 8 80 29 18446744073709551615 1 # 81 1 81 2 18446744073709551615 5 ifdef 81 2 81 7 18446744073709551615 11 __cplusplus 81 8 81 19 18446744073709551615 1 # 82 1 82 2 18446744073709551615 6 define 82 2 82 8 18446744073709551615 13 ADI_ANALOG_IN 82 9 82 22 18446744073709551615 4 pros 82 23 82 27 18446744073709551615 2 :: 82 27 82 29 18446744073709551615 15 E_ADI_ANALOG_IN 82 29 82 44 18446744073709551615 1 # 83 1 83 2 18446744073709551615 6 define 83 2 83 8 18446744073709551615 14 ADI_ANALOG_OUT 83 9 83 23 18446744073709551615 4 pros 83 24 83 28 18446744073709551615 2 :: 83 28 83 30 18446744073709551615 16 E_ADI_ANALOG_OUT 83 30 83 46 18446744073709551615 1 # 84 1 84 2 18446744073709551615 6 define 84 2 84 8 18446744073709551615 14 ADI_DIGITAL_IN 84 9 84 23 18446744073709551615 4 pros 84 24 84 28 18446744073709551615 2 :: 84 28 84 30 18446744073709551615 16 E_ADI_DIGITAL_IN 84 30 84 46 18446744073709551615 1 # 85 1 85 2 18446744073709551615 6 define 85 2 85 8 18446744073709551615 15 ADI_DIGITAL_OUT 85 9 85 24 18446744073709551615 4 pros 85 25 85 29 18446744073709551615 2 :: 85 29 85 31 18446744073709551615 17 E_ADI_DIGITAL_OUT 85 31 85 48 18446744073709551615 1 # 86 1 86 2 18446744073709551615 6 define 86 2 86 8 18446744073709551615 16 ADI_SMART_BUTTON 86 9 86 25 18446744073709551615 4 pros 86 26 86 30 18446744073709551615 2 :: 86 30 86 32 18446744073709551615 18 E_ADI_SMART_BUTTON 86 32 86 50 18446744073709551615 1 # 87 1 87 2 18446744073709551615 6 define 87 2 87 8 18446744073709551615 13 ADI_SMART_POT 87 9 87 22 18446744073709551615 4 pros 87 23 87 27 18446744073709551615 2 :: 87 27 87 29 18446744073709551615 15 E_ADI_SMART_POT 87 29 87 44 18446744073709551615 1 # 88 1 88 2 18446744073709551615 6 define 88 2 88 8 18446744073709551615 17 ADI_LEGACY_BUTTON 88 9 88 26 18446744073709551615 4 pros 88 27 88 31 18446744073709551615 2 :: 88 31 88 33 18446744073709551615 19 E_ADI_LEGACY_BUTTON 88 33 88 52 18446744073709551615 1 # 89 1 89 2 18446744073709551615 6 define 89 2 89 8 18446744073709551615 14 ADI_LEGACY_POT 89 9 89 23 18446744073709551615 4 pros 89 24 89 28 18446744073709551615 2 :: 89 28 89 30 18446744073709551615 16 E_ADI_LEGACY_POT 89 30 89 46 18446744073709551615 1 # 90 1 90 2 18446744073709551615 6 define 90 2 90 8 18446744073709551615 22 ADI_LEGACY_LINE_SENSOR 90 9 90 31 18446744073709551615 4 pros 90 32 90 36 18446744073709551615 2 :: 90 36 90 38 18446744073709551615 24 E_ADI_LEGACY_LINE_SENSOR 90 38 90 62 18446744073709551615 1 # 91 1 91 2 18446744073709551615 6 define 91 2 91 8 18446744073709551615 23 ADI_LEGACY_LIGHT_SENSOR 91 9 91 32 18446744073709551615 4 pros 91 33 91 37 18446744073709551615 2 :: 91 37 91 39 18446744073709551615 25 E_ADI_LEGACY_LIGHT_SENSOR 91 39 91 64 18446744073709551615 1 # 92 1 92 2 18446744073709551615 6 define 92 2 92 8 18446744073709551615 15 ADI_LEGACY_GYRO 92 9 92 24 18446744073709551615 4 pros 92 25 92 29 18446744073709551615 2 :: 92 29 92 31 18446744073709551615 17 E_ADI_LEGACY_GYRO 92 31 92 48 18446744073709551615 1 # 93 1 93 2 18446744073709551615 6 define 93 2 93 8 18446744073709551615 24 ADI_LEGACY_ACCELEROMETER 93 9 93 33 18446744073709551615 4 pros 93 34 93 38 18446744073709551615 2 :: 93 38 93 40 18446744073709551615 26 E_ADI_LEGACY_ACCELEROMETER 93 40 93 66 18446744073709551615 1 # 94 1 94 2 18446744073709551615 6 define 94 2 94 8 18446744073709551615 16 ADI_LEGACY_SERVO 94 9 94 25 18446744073709551615 4 pros 94 26 94 30 18446744073709551615 2 :: 94 30 94 32 18446744073709551615 18 E_ADI_LEGACY_SERVO 94 32 94 50 18446744073709551615 1 # 95 1 95 2 18446744073709551615 6 define 95 2 95 8 18446744073709551615 14 ADI_LEGACY_PWM 95 9 95 23 18446744073709551615 4 pros 95 24 95 28 18446744073709551615 2 :: 95 28 95 30 18446744073709551615 16 E_ADI_LEGACY_PWM 95 30 95 46 18446744073709551615 1 # 96 1 96 2 18446744073709551615 6 define 96 2 96 8 18446744073709551615 18 ADI_LEGACY_ENCODER 96 9 96 27 18446744073709551615 4 pros 96 28 96 32 18446744073709551615 2 :: 96 32 96 34 18446744073709551615 20 E_ADI_LEGACY_ENCODER 96 34 96 54 18446744073709551615 1 # 97 1 97 2 18446744073709551615 6 define 97 2 97 8 18446744073709551615 21 ADI_LEGACY_ULTRASONIC 97 9 97 30 18446744073709551615 4 pros 97 31 97 35 18446744073709551615 2 :: 97 35 97 37 18446744073709551615 23 E_ADI_LEGACY_ULTRASONIC 97 37 97 60 18446744073709551615 1 # 98 1 98 2 18446744073709551615 6 define 98 2 98 8 18446744073709551615 18 ADI_TYPE_UNDEFINED 98 9 98 27 18446744073709551615 4 pros 98 28 98 32 18446744073709551615 2 :: 98 32 98 34 18446744073709551615 20 E_ADI_TYPE_UNDEFINED 98 34 98 54 18446744073709551615 1 # 99 1 99 2 18446744073709551615 6 define 99 2 99 8 18446744073709551615 7 ADI_ERR 99 9 99 16 18446744073709551615 4 pros 99 17 99 21 18446744073709551615 2 :: 99 21 99 23 18446744073709551615 9 E_ADI_ERR 99 23 99 32 18446744073709551615 1 # 100 1 100 2 18446744073709551615 4 else 100 2 100 6 18446744073709551615 1 # 101 1 101 2 18446744073709551615 6 define 101 2 101 8 18446744073709551615 13 ADI_ANALOG_IN 101 9 101 22 18446744073709551615 15 E_ADI_ANALOG_IN 101 23 101 38 18446744073709551615 1 # 102 1 102 2 18446744073709551615 6 define 102 2 102 8 18446744073709551615 14 ADI_ANALOG_OUT 102 9 102 23 18446744073709551615 16 E_ADI_ANALOG_OUT 102 24 102 40 18446744073709551615 1 # 103 1 103 2 18446744073709551615 6 define 103 2 103 8 18446744073709551615 14 ADI_DIGITAL_IN 103 9 103 23 18446744073709551615 16 E_ADI_DIGITAL_IN 103 24 103 40 18446744073709551615 1 # 104 1 104 2 18446744073709551615 6 define 104 2 104 8 18446744073709551615 15 ADI_DIGITAL_OUT 104 9 104 24 18446744073709551615 17 E_ADI_DIGITAL_OUT 104 25 104 42 18446744073709551615 1 # 105 1 105 2 18446744073709551615 6 define 105 2 105 8 18446744073709551615 16 ADI_SMART_BUTTON 105 9 105 25 18446744073709551615 18 E_ADI_SMART_BUTTON 105 26 105 44 18446744073709551615 1 # 106 1 106 2 18446744073709551615 6 define 106 2 106 8 18446744073709551615 13 ADI_SMART_POT 106 9 106 22 18446744073709551615 15 E_ADI_SMART_POT 106 23 106 38 18446744073709551615 1 # 107 1 107 2 18446744073709551615 6 define 107 2 107 8 18446744073709551615 17 ADI_LEGACY_BUTTON 107 9 107 26 18446744073709551615 19 E_ADI_LEGACY_BUTTON 107 27 107 46 18446744073709551615 1 # 108 1 108 2 18446744073709551615 6 define 108 2 108 8 18446744073709551615 14 ADI_LEGACY_POT 108 9 108 23 18446744073709551615 16 E_ADI_LEGACY_POT 108 24 108 40 18446744073709551615 1 # 109 1 109 2 18446744073709551615 6 define 109 2 109 8 18446744073709551615 22 ADI_LEGACY_LINE_SENSOR 109 9 109 31 18446744073709551615 24 E_ADI_LEGACY_LINE_SENSOR 109 32 109 56 18446744073709551615 1 # 110 1 110 2 18446744073709551615 6 define 110 2 110 8 18446744073709551615 23 ADI_LEGACY_LIGHT_SENSOR 110 9 110 32 18446744073709551615 25 E_ADI_LEGACY_LIGHT_SENSOR 110 33 110 58 18446744073709551615 1 # 111 1 111 2 18446744073709551615 6 define 111 2 111 8 18446744073709551615 15 ADI_LEGACY_GYRO 111 9 111 24 18446744073709551615 17 E_ADI_LEGACY_GYRO 111 25 111 42 18446744073709551615 1 # 112 1 112 2 18446744073709551615 6 define 112 2 112 8 18446744073709551615 24 ADI_LEGACY_ACCELEROMETER 112 9 112 33 18446744073709551615 26 E_ADI_LEGACY_ACCELEROMETER 112 34 112 60 18446744073709551615 1 # 113 1 113 2 18446744073709551615 6 define 113 2 113 8 18446744073709551615 16 ADI_LEGACY_SERVO 113 9 113 25 18446744073709551615 18 E_ADI_LEGACY_SERVO 113 26 113 44 18446744073709551615 1 # 114 1 114 2 18446744073709551615 6 define 114 2 114 8 18446744073709551615 14 ADI_LEGACY_PWM 114 9 114 23 18446744073709551615 16 E_ADI_LEGACY_PWM 114 24 114 40 18446744073709551615 1 # 115 1 115 2 18446744073709551615 6 define 115 2 115 8 18446744073709551615 18 ADI_LEGACY_ENCODER 115 9 115 27 18446744073709551615 20 E_ADI_LEGACY_ENCODER 115 28 115 48 18446744073709551615 1 # 116 1 116 2 18446744073709551615 6 define 116 2 116 8 18446744073709551615 21 ADI_LEGACY_ULTRASONIC 116 9 116 30 18446744073709551615 23 E_ADI_LEGACY_ULTRASONIC 116 31 116 54 18446744073709551615 1 # 117 1 117 2 18446744073709551615 6 define 117 2 117 8 18446744073709551615 18 ADI_TYPE_UNDEFINED 117 9 117 27 18446744073709551615 20 E_ADI_TYPE_UNDEFINED 117 28 117 48 18446744073709551615 1 # 118 1 118 2 18446744073709551615 6 define 118 2 118 8 18446744073709551615 7 ADI_ERR 118 9 118 16 18446744073709551615 9 E_ADI_ERR 118 17 118 26 18446744073709551615 1 # 119 1 119 2 18446744073709551615 5 endif 119 2 119 7 18446744073709551615 1 # 120 1 120 2 18446744073709551615 5 endif 120 2 120 7 18446744073709551615 1 # 122 1 122 2 18446744073709551615 6 define 122 2 122 8 18446744073709551615 17 INTERNAL_ADI_PORT 122 9 122 26 18446744073709551615 2 22 122 27 122 29 18446744073709551615 1 # 123 1 123 2 18446744073709551615 6 define 123 2 123 8 18446744073709551615 13 NUM_ADI_PORTS 123 9 123 22 18446744073709551615 1 8 123 23 123 24 18446744073709551615 1 # 125 1 125 2 18446744073709551615 5 ifdef 125 2 125 7 18446744073709551615 11 __cplusplus 125 8 125 19 18446744073709551615 9 namespace 126 1 126 10 18446744073709551615 1 c 126 11 126 12 25 1 { 126 13 126 14 18446744073709551615 1 # 127 1 127 2 18446744073709551615 5 endif 127 2 127 7 18446744073709551615 80 /******************************************************************************/ 129 1 129 81 18446744073709551615 80 /**                         General ADI Use Functions                        **/ 130 1 130 81 18446744073709551615 80 /**                                                                          **/ 131 1 131 81 18446744073709551615 80 /**       These functions allow for interaction with any ADI port type       **/ 132 1 132 81 18446744073709551615 80 /******************************************************************************/ 133 1 133 81 18446744073709551615 392 /**
 * Gets the configuration for the given ADI port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports.
 *
 * \param port
 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return
 *        the configuration
 *
 * \return The ADI configuration for the given port
 */ 135 1 147 4 18446744073709551615 19 adi_port_config_e_t 148 1 148 20 20 19 adi_port_get_config 148 21 148 40 26 1 ( 148 40 148 41 26 7 uint8_t 148 41 148 48 27 4 port 148 49 148 53 28 1 ) 148 53 148 54 26 1 ; 148 54 148 55 18446744073709551615 378 /**
 * Gets the value for the given ADI port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports.
 *
 * \param port
 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value
 *        will be returned
 *
 * \return The value stored for the given port
 */ 150 1 162 4 18446744073709551615 7 int32_t 163 1 163 8 29 18 adi_port_get_value 163 9 163 27 30 1 ( 163 27 163 28 30 7 uint8_t 163 28 163 35 27 4 port 163 36 163 40 31 1 ) 163 40 163 41 30 1 ; 163 41 163 42 18446744073709551615 473 /**
 * Configures an ADI port to act as a given sensor type.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports.
 *
 * \param port
 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
 * \param type
 *        The configuration type for the port
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 165 1 179 4 18446744073709551615 7 int32_t 180 1 180 8 29 19 adi_port_set_config 180 9 180 28 32 1 ( 180 28 180 29 32 7 uint8_t 180 29 180 36 27 4 port 180 37 180 41 33 1 , 180 41 180 42 32 19 adi_port_config_e_t 180 43 180 62 20 4 type 180 63 180 67 34 1 ) 180 67 180 68 32 1 ; 180 68 180 69 18446744073709551615 616 /**
 * Sets the value for the given ADI port.
 *
 * This only works on ports configured as outputs, and the behavior will change
 * depending on the configuration of the port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO  - The given value is not within the range of ADI Ports.
 *
 * \param port
 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value
 *        will be set
 * \param value
 *        The value to set the ADI port to
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 182 1 200 4 18446744073709551615 7 int32_t 201 1 201 8 29 18 adi_port_set_value 201 9 201 27 35 1 ( 201 27 201 28 35 7 uint8_t 201 28 201 35 27 4 port 201 36 201 40 36 1 , 201 40 201 41 35 7 int32_t 201 42 201 49 29 5 value 201 50 201 55 37 1 ) 201 55 201 56 35 1 ; 201 56 201 57 18446744073709551615 80 /******************************************************************************/ 203 1 203 81 18446744073709551615 80 /**                      PROS 2 Compatibility Functions                      **/ 204 1 204 81 18446744073709551615 80 /**                                                                          **/ 205 1 205 81 18446744073709551615 80 /**     These functions provide similar functionality to the PROS 2 API      **/ 206 1 206 81 18446744073709551615 80 /******************************************************************************/ 207 1 207 81 18446744073709551615 173 /**
 * Used for adi_digital_write() to specify a logic HIGH state to output.
 *
 * In reality, using any non-zero expression or "true" will work to set a pin to
 * HIGH.
 */ 209 1 214 4 18446744073709551615 1 # 215 1 215 2 18446744073709551615 6 define 215 2 215 8 18446744073709551615 4 HIGH 215 9 215 13 18446744073709551615 1 1 215 14 215 15 18446744073709551615 163 /**
 * Used for adi_digital_write() to specify a logic LOW state to output.
 *
 * In reality, using a zero expression or "false" will work to set a pin to LOW.
 */ 216 1 220 4 18446744073709551615 1 # 221 1 221 2 18446744073709551615 6 define 221 2 221 8 18446744073709551615 3 LOW 221 9 221 12 18446744073709551615 1 0 221 13 221 14 18446744073709551615 52 /**
 * adi_pin_mode() state for a digital input.
 */ 223 1 225 4 18446744073709551615 1 # 226 1 226 2 18446744073709551615 6 define 226 2 226 8 18446744073709551615 5 INPUT 226 9 226 14 18446744073709551615 4 0x00 226 15 226 19 18446744073709551615 53 /**
 * adi_pin_mode() state for a digital output.
 */ 227 1 229 4 18446744073709551615 1 # 230 1 230 2 18446744073709551615 6 define 230 2 230 8 18446744073709551615 6 OUTPUT 230 9 230 15 18446744073709551615 4 0x01 230 16 230 20 18446744073709551615 52 /**
 * adi_pin_mode() state for an analog input.
 */ 231 1 233 4 18446744073709551615 1 # 234 1 234 2 18446744073709551615 6 define 234 2 234 8 18446744073709551615 12 INPUT_ANALOG 234 9 234 21 18446744073709551615 4 0x02 234 22 234 26 18446744073709551615 53 /**
 * adi_pin_mode() state for an analog output.
 */ 236 1 238 4 18446744073709551615 1 # 239 1 239 2 18446744073709551615 6 define 239 2 239 8 18446744073709551615 13 OUTPUT_ANALOG 239 9 239 22 18446744073709551615 4 0x03 239 23 239 27 18446744073709551615 989 /**
 * Calibrates the analog sensor on the specified port and returns the new
 * calibration value.
 *
 * This method assumes that the true sensor value is not actively changing at
 * this time and computes an average from approximately 500 samples, 1 ms apart,
 * for a 0.5 s period of calibration. The average value thus calculated is
 * returned and stored for later calls to the adi_analog_read_calibrated() and
 * adi_analog_read_calibrated_HR() functions. These functions will return
 * the difference between this value and the current sensor value when called.
 *
 * Do not use this function when the sensor value might be unstable
 * (gyro rotation, accelerometer movement).
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 *
 * \param port
 *        The ADI port to calibrate (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return The average sensor value computed by this function
 */ 241 1 263 4 18446744073709551615 7 int32_t 264 1 264 8 29 20 adi_analog_calibrate 264 9 264 29 38 1 ( 264 29 264 30 38 7 uint8_t 264 30 264 37 27 4 port 264 38 264 42 39 1 ) 264 42 264 43 38 1 ; 264 43 264 44 18446744073709551615 647 /**
 * Gets the 12-bit value of the specified port.
 *
 * The value returned is undefined if the analog pin has been switched to a
 * different mode.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an analog input
 *
 * \param port
 *        The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be
 *        returned
 *
 * \return The analog sensor value, where a value of 0 reflects an input voltage
 * of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V
 */ 266 1 283 4 18446744073709551615 7 int32_t 284 1 284 8 29 15 adi_analog_read 284 9 284 24 40 1 ( 284 24 284 25 40 7 uint8_t 284 25 284 32 27 4 port 284 33 284 37 41 1 ) 284 37 284 38 40 1 ; 284 38 284 39 18446744073709551615 749 /**
 * Gets the 12 bit calibrated value of an analog input port.
 *
 * The adi_analog_calibrate() function must be run first. This function is
 * inappropriate for sensor values intended for integration, as round-off error
 * can accumulate causing drift over time. Use adi_analog_read_calibrated_HR()
 * instead.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an analog input
 *
 * \param port
 *        The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be
 *        returned
 *
 * \return The difference of the sensor value from its calibrated default from
 * -4095 to 4095
 */ 286 1 305 4 18446744073709551615 7 int32_t 306 1 306 8 29 26 adi_analog_read_calibrated 306 9 306 35 42 1 ( 306 35 306 36 42 7 uint8_t 306 36 306 43 27 4 port 306 44 306 48 43 1 ) 306 48 306 49 42 1 ; 306 49 306 50 18446744073709551615 1025 /**
 * Gets the 16 bit calibrated value of an analog input port.
 *
 * The adi_analog_calibrate() function must be run first. This is intended for
 * integrated sensor values such as gyros and accelerometers to reduce drift due
 * to round-off, and should not be used on a sensor such as a line tracker
 * or potentiometer.
 *
 * The value returned actually has 16 bits of "precision", even though the ADC
 * only reads 12 bits, so that error induced by the average value being between
 * two values when integrated over time is trivial. Think of the value as the
 * true value times 16.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an analog input
 *
 * \param port
 *        The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be
 *        returned
 *
 * \return The difference of the sensor value from its calibrated default from
 * -16384 to 16384
 */ 308 1 332 4 18446744073709551615 7 int32_t 333 1 333 8 29 29 adi_analog_read_calibrated_HR 333 9 333 38 44 1 ( 333 38 333 39 44 7 uint8_t 333 39 333 46 27 4 port 333 47 333 51 45 1 ) 333 51 333 52 44 1 ; 333 52 333 53 18446744073709551615 724 /**
 * Gets the digital value (1 or 0) of a port configured as a digital input.
 *
 * If the port is configured as some other mode, the digital value which
 * reflects the current state of the port is returned, which may or may not
 * differ from the currently set value. The return value is undefined for ports
 * configured as any mode other than a Digital Input.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a digital input
 *
 * \param port
 *        The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return True if the pin is HIGH, or false if it is LOW
 */ 335 1 352 4 18446744073709551615 7 int32_t 353 1 353 8 29 16 adi_digital_read 353 9 353 25 46 1 ( 353 25 353 26 46 7 uint8_t 353 26 353 33 27 4 port 353 34 353 38 47 1 ) 353 38 353 39 46 1 ; 353 39 353 40 18446744073709551615 955 /**
 * Gets a rising-edge case for a digital button press.
 *
 * This function is not thread-safe.
 * Multiple tasks polling a single button may return different results under the
 * same circumstances, so only one task should call this function for any given
 * button. E.g., Task A calls this function for buttons 1 and 2. Task B may call
 * this function for button 3, but should not for buttons 1 or 2. A typical
 * use-case for this function is to call inside opcontrol to detect new button
 * presses, and not in any other tasks.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a digital input
 *
 * \param port
 *        The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return 1 if the button is pressed and had not been pressed
 * the last time this function was called, 0 otherwise.
 */ 355 1 376 4 18446744073709551615 7 int32_t 377 1 377 8 29 25 adi_digital_get_new_press 377 9 377 34 48 1 ( 377 34 377 35 48 7 uint8_t 377 35 377 42 27 4 port 377 43 377 47 49 1 ) 377 47 377 48 48 1 ; 377 48 377 49 18446744073709551615 726 /**
 * Sets the digital value (1 or 0) of a port configured as a digital output.
 *
 * If the port is configured as some other mode, behavior is undefined.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a digital output
 *
 * \param port
 *        The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')
 * \param value
 *        An expression evaluating to "true" or "false" to set the output to
 *        HIGH or LOW respectively, or the constants HIGH or LOW themselves
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 379 1 397 4 18446744073709551615 7 int32_t 398 1 398 8 29 17 adi_digital_write 398 9 398 26 50 1 ( 398 26 398 27 50 7 uint8_t 398 27 398 34 27 4 port 398 35 398 39 51 1 , 398 39 398 40 50 4 bool 398 41 398 45 18446744073709551615 5 value 398 46 398 51 52 1 ) 398 51 398 52 50 1 ; 398 52 398 53 18446744073709551615 505 /**
 * Configures the port as an input or output with a variety of settings.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 *
 * \param port
 *        The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')
 * \param mode
 *        One of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 400 1 414 4 18446744073709551615 7 int32_t 415 1 415 8 29 12 adi_pin_mode 415 9 415 21 53 1 ( 415 21 415 22 53 7 uint8_t 415 22 415 29 27 4 port 415 30 415 34 54 1 , 415 34 415 35 53 7 uint8_t 415 36 415 43 27 4 mode 415 44 415 48 55 1 ) 415 48 415 49 53 1 ; 415 49 415 50 18446744073709551615 567 /**
 * Sets the speed of the motor on the given port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an motor
 *
 * \param port
 *        The ADI port to set (from 1-8, 'a'-'h', 'A'-'H')
 * \param speed
 *        The new signed speed; -127 is full reverse and 127 is full forward,
 *        with 0 being off
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 417 1 433 4 18446744073709551615 7 int32_t 434 1 434 8 29 13 adi_motor_set 434 9 434 22 56 1 ( 434 22 434 23 56 7 uint8_t 434 23 434 30 27 4 port 434 31 434 35 57 1 , 434 35 434 36 56 6 int8_t 434 37 434 43 58 5 speed 434 44 434 49 59 1 ) 434 49 434 50 56 1 ; 434 50 434 51 18446744073709551615 416 /**
 * Gets the last set speed of the motor on the given port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an motor
 *
 * \param port
 *        The ADI port to get (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return The last set speed of the motor on the given port
 */ 436 1 448 4 18446744073709551615 7 int32_t 449 1 449 8 29 13 adi_motor_get 449 9 449 22 60 1 ( 449 22 449 23 60 7 uint8_t 449 23 449 30 27 4 port 449 31 449 35 61 1 ) 449 35 449 36 60 1 ; 449 36 449 37 18446744073709551615 434 /**
 * Stops the motor on the given port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an motor
 *
 * \param port
 *        The ADI port to set (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 451 1 464 4 18446744073709551615 7 int32_t 465 1 465 8 29 14 adi_motor_stop 465 9 465 23 62 1 ( 465 23 465 24 62 7 uint8_t 465 24 465 31 27 4 port 465 32 465 36 63 1 ) 465 36 465 37 62 1 ; 465 37 465 38 18446744073709551615 177 /**
 * Reference type for an initialized encoder.
 *
 * This merely contains the port number for the encoder, unlike its use as an
 * object to store encoder data in PROS 2.
 */ 467 1 472 4 18446744073709551615 7 typedef 473 1 473 8 18446744073709551615 7 int32_t 473 9 473 16 29 13 adi_encoder_t 473 17 473 30 64 1 ; 473 30 473 31 18446744073709551615 491 /**
 * Gets the number of ticks recorded by the encoder.
 *
 * There are 360 ticks in one revolution.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an encoder

 *
 * \param enc
 *        The adi_encoder_t object from adi_encoder_init() to read
 *
 * \return The signed and cumulative number of counts since the last start or
 * reset
 */ 475 1 491 4 18446744073709551615 7 int32_t 492 1 492 8 29 15 adi_encoder_get 492 9 492 24 65 1 ( 492 24 492 25 65 13 adi_encoder_t 492 25 492 38 64 3 enc 492 39 492 42 66 1 ) 492 42 492 43 65 1 ; 492 43 492 44 18446744073709551615 734 /**
 * Creates an encoder object and configures the specified ports accordingly.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an encoder

 *
 * \param port_top
 *        The "top" wire from the encoder sensor with the removable cover side
 *        up. This should be in port 1, 3, 5, or 7 ('A', 'C', 'E', or 'G').
 * \param port_bottom
 *        The "bottom" wire from the encoder sensor
 * \param reverse
 *        If "true", the sensor will count in the opposite direction
 *
 * \return An adi_encoder_t object to be stored and used for later calls to
 * encoder functions
 */ 494 1 513 4 18446744073709551615 13 adi_encoder_t 514 1 514 14 64 16 adi_encoder_init 514 15 514 31 67 1 ( 514 31 514 32 67 7 uint8_t 514 32 514 39 27 8 port_top 514 40 514 48 68 1 , 514 48 514 49 67 7 uint8_t 514 50 514 57 27 11 port_bottom 514 58 514 69 69 1 , 514 69 514 70 67 4 bool 514 71 514 75 18446744073709551615 7 reverse 514 76 514 83 70 1 ) 514 83 514 84 67 1 ; 514 84 514 85 18446744073709551615 590 /**
 * Sets the encoder value to zero.
 *
 * It is safe to use this method while an encoder is enabled. It is not
 * necessary to call this method before stopping or starting an encoder.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an encoder

 *
 * \param enc
 *        The adi_encoder_t object from adi_encoder_init() to reset
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 516 1 533 4 18446744073709551615 7 int32_t 534 1 534 8 29 17 adi_encoder_reset 534 9 534 26 71 1 ( 534 26 534 27 71 13 adi_encoder_t 534 27 534 40 64 3 enc 534 41 534 44 72 1 ) 534 44 534 45 71 1 ; 534 45 534 46 18446744073709551615 471 /**
 * Disables the encoder and voids the configuration on its ports.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an encoder
 *
 * \param enc
 *        The adi_encoder_t object from adi_encoder_init() to stop
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 536 1 549 4 18446744073709551615 7 int32_t 550 1 550 8 29 20 adi_encoder_shutdown 550 9 550 29 73 1 ( 550 29 550 30 73 13 adi_encoder_t 550 30 550 43 64 3 enc 550 44 550 47 74 1 ) 550 47 550 48 73 1 ; 550 48 550 49 18446744073709551615 186 /**
 * Reference type for an initialized ultrasonic.
 *
 * This merely contains the port number for the ultrasonic, unlike its use as an
 * object to store ultrasonic data in PROS 2.
 */ 552 1 557 4 18446744073709551615 7 typedef 558 1 558 8 18446744073709551615 7 int32_t 558 9 558 16 29 16 adi_ultrasonic_t 558 17 558 33 75 1 ; 558 33 558 34 18446744073709551615 700 /**
 * Gets the current ultrasonic sensor value in centimeters.
 *
 * If no object was found, zero is returned. If the ultrasonic sensor was never
 * started, the return value is undefined. Round and fluffy objects can cause
 * inaccurate values to be returned.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an ultrasonic
 *
 * \param ult
 *        The adi_ultrasonic_t object from adi_ultrasonic_init() to read
 *
 * \return The distance to the nearest object in m^-4 (10000 indicates 1 meter),
 * measured from the sensor's mounting points.
 */ 560 1 577 4 18446744073709551615 7 int32_t 578 1 578 8 29 18 adi_ultrasonic_get 578 9 578 27 76 1 ( 578 27 578 28 76 16 adi_ultrasonic_t 578 28 578 44 75 3 ult 578 45 578 48 77 1 ) 578 48 578 49 76 1 ; 578 49 578 50 18446744073709551615 703 /**
 * Creates an ultrasonic object and configures the specified ports accordingly.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an ultrasonic
 *
 * \param port_ping
 *        The port connected to the orange OUTPUT cable. This should be in port
 *        1, 3, 5, or 7 ('A', 'C', 'E', 'G').
 * \param port_echo
 *        The port connected to the yellow INPUT cable. This should be in the
 *        next highest port following port_ping.
 *
 * \return An adi_ultrasonic_t object to be stored and used for later calls to
 * ultrasonic functions
 */ 580 1 597 4 18446744073709551615 16 adi_ultrasonic_t 598 1 598 17 75 19 adi_ultrasonic_init 598 18 598 37 78 1 ( 598 37 598 38 78 7 uint8_t 598 38 598 45 27 9 port_ping 598 46 598 55 79 1 , 598 55 598 56 78 7 uint8_t 598 57 598 64 27 9 port_echo 598 65 598 74 80 1 ) 598 74 598 75 78 1 ; 598 75 598 76 18446744073709551615 490 /**
 * Disables the ultrasonic sensor and voids the configuration on its ports.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as an ultrasonic
 *
 * \param ult
 *        The adi_ultrasonic_t object from adi_ultrasonic_init() to stop
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 600 1 613 4 18446744073709551615 7 int32_t 614 1 614 8 29 23 adi_ultrasonic_shutdown 614 9 614 32 81 1 ( 614 32 614 33 81 16 adi_ultrasonic_t 614 33 614 49 75 3 ult 614 50 614 53 82 1 ) 614 53 614 54 81 1 ; 614 54 614 55 18446744073709551615 178 /**
 * Reference type for an initialized gyroscope.
 *
 * This merely contains the port number for the gyroscope, unlike its use as an
 * object to store gyro data in PROS 2.
 */ 616 1 621 4 18446744073709551615 7 typedef 622 1 622 8 18446744073709551615 7 int32_t 622 9 622 16 29 10 adi_gyro_t 622 17 622 27 83 1 ; 622 27 622 28 18446744073709551615 642 /**
 * Gets the current gyro angle in tenths of a degree. Unless a multiplier is
 * applied to the gyro, the return value will be a whole number representing
 * the number of degrees of rotation times 10.
 *
 * There are 360 degrees in a circle, thus the gyro will return 3600 for one
 * whole rotation.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a gyro
 *
 * \param gyro
 *        The adi_gyro_t object for which the angle will be returned
 *
 * \return The gyro angle in degrees.
 */ 624 1 641 4 18446744073709551615 6 double 642 1 642 7 18446744073709551615 12 adi_gyro_get 642 8 642 20 84 1 ( 642 20 642 21 84 10 adi_gyro_t 642 21 642 31 83 4 gyro 642 32 642 36 85 1 ) 642 36 642 37 84 1 ; 642 37 642 38 18446744073709551615 853 /**
 * Initializes a gyroscope on the given port. If the given port has not
 * previously been configured as a gyro, then this function starts a 1300 ms
 * calibration period.
 *
 * It is highly recommended that this function be called from initialize() when
 * the robot is stationary to ensure proper calibration.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a gyro
 *
 * \param port
 *        The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H')
 * \param multiplier
 *        A scalar value that will be multiplied by the gyro heading value
 *        supplied by the ADI
 *
 * \return An adi_gyro_t object containing the given port, or PROS_ERR if the
 * initialization failed.
 */ 644 1 665 4 18446744073709551615 10 adi_gyro_t 666 1 666 11 83 13 adi_gyro_init 666 12 666 25 86 1 ( 666 25 666 26 86 7 uint8_t 666 26 666 33 27 4 port 666 34 666 38 87 1 , 666 38 666 39 86 6 double 666 40 666 46 18446744073709551615 10 multiplier 666 47 666 57 88 1 ) 666 57 666 58 86 1 ; 666 58 666 59 18446744073709551615 443 /**
 * Resets the gyroscope value to zero.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a gyro
 *
 * \param gyro
 *        The adi_gyro_t object for which the angle will be returned
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 668 1 681 4 18446744073709551615 7 int32_t 682 1 682 8 29 14 adi_gyro_reset 682 9 682 23 89 1 ( 682 23 682 24 89 10 adi_gyro_t 682 24 682 34 83 4 gyro 682 35 682 39 90 1 ) 682 39 682 40 89 1 ; 682 40 682 41 18446744073709551615 445 /**
 * Disables the gyro and voids the configuration on its port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a gyro
 *
 * \param gyro
 *        The adi_gyro_t object to be shut down
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 684 1 697 4 18446744073709551615 7 int32_t 698 1 698 8 29 17 adi_gyro_shutdown 698 9 698 26 91 1 ( 698 26 698 27 91 10 adi_gyro_t 698 27 698 37 83 4 gyro 698 38 698 42 92 1 ) 698 42 698 43 91 1 ; 698 43 698 44 18446744073709551615 195 /**
 * Reference type for an initialized potentiometer.
 *
 * This merely contains the port number for the potentiometer, unlike its use as an
 * object to store potentiometer data in PROS 2.
 */ 700 1 705 4 18446744073709551615 7 typedef 706 1 706 8 18446744073709551615 7 int32_t 706 9 706 16 29 19 adi_potentiometer_t 706 17 706 36 93 1 ; 706 36 706 37 18446744073709551615 513 /**
 * Initializes a potentiometer on the given port of the original potentiometer.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a potentiometer
 *
 * \param port
 *        The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return An adi_potentiometer_t object containing the given port, or PROS_ERR if the
 * initialization failed.
 */ 708 1 721 4 18446744073709551615 19 adi_potentiometer_t 722 1 722 20 93 22 adi_potentiometer_init 722 21 722 43 94 1 ( 722 43 722 44 94 7 uint8_t 722 44 722 51 27 4 port 722 52 722 56 95 1 ) 722 56 722 57 94 1 ; 722 57 722 58 18446744073709551615 606 /**
 * Initializes a potentiometer on the given port. 
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a potentiometer
 *
 * \param port
 *        The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H')
 * \param potentiometer_type
 *        An adi_potentiometer_type_e_t enum value specifying the potentiometer version type
 *
 * \return An adi_potentiometer_t object containing the given port, or PROS_ERR if the
 * initialization failed.
 */ 724 1 739 4 18446744073709551615 19 adi_potentiometer_t 740 1 740 20 93 27 adi_potentiometer_type_init 740 21 740 48 96 1 ( 740 48 740 49 96 7 uint8_t 740 49 740 56 27 4 port 740 57 740 61 97 1 , 740 61 740 62 96 26 adi_potentiometer_type_e_t 740 63 740 89 24 18 potentiometer_type 740 90 740 108 98 1 ) 740 108 740 109 96 1 ; 740 109 740 110 18446744073709551615 628 /**
 * Gets the current potentiometer angle in tenths of a degree.
 *
 * The original potentiometer rotates 250 degrees thus returning an angle between 0-250 degrees.
 * Potentiometer V2 rotates 330 degrees thus returning an angle between 0-330 degrees.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a potentiometer
 *
 * \param potentiometer
 *        The adi_potentiometer_t object for which the angle will be returned
 *
 * \return The potentiometer angle in degrees.
 */ 742 1 757 4 18446744073709551615 6 double 758 1 758 7 18446744073709551615 27 adi_potentiometer_get_angle 758 8 758 35 99 1 ( 758 35 758 36 99 19 adi_potentiometer_t 758 36 758 55 93 13 potentiometer 758 56 758 69 100 1 ) 758 69 758 70 99 1 ; 758 70 758 71 18446744073709551615 177 /**
 * Reference type for an initialized addressable led.
 *
 * This merely contains the port number for the led, unlike its use as an
 * object to store led data in PROS 2.
 */ 760 1 765 4 18446744073709551615 7 typedef 766 1 766 8 18446744073709551615 7 int32_t 766 9 766 16 29 9 adi_led_t 766 17 766 26 101 1 ; 766 26 766 27 18446744073709551615 560 /**
 * Initializes a led on the given port of the original led.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - The ADI port given is not a valid port as defined below
 * EADDRINUSE - The port is not configured for ADI output
 *
 * \param port
 *        The ADI port to initialize as a led (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return An adi_led_t object containing the given port, or PROS_ERR if the
 * initialization failed, setting errno
 */ 768 1 782 4 18446744073709551615 9 adi_led_t 783 1 783 10 101 12 adi_led_init 783 11 783 23 102 1 ( 783 23 783 24 102 7 uint8_t 783 24 783 31 27 4 port 783 32 783 36 103 1 ) 783 36 783 37 102 1 ; 783 37 783 38 18446744073709551615 604 /**
 * @brief Clear the entire led strip of color
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - A given value is not correct, or the buffer is null
 * EADDRINUSE - The port is not configured for ADI output
 *
 * @param led port of type adi_led_t
 * @param buffer array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw
 * @param buffer_length length of buffer to clear
 * @return PROS_SUCCESS if successful, PROS_ERR if not
 */ 785 1 798 4 18446744073709551615 7 int32_t 799 1 799 8 29 17 adi_led_clear_all 799 9 799 26 104 1 ( 799 26 799 27 104 9 adi_led_t 799 27 799 36 101 3 led 799 37 799 40 105 1 , 799 40 799 41 104 8 uint32_t 799 42 799 50 106 1 * 799 50 799 51 18446744073709551615 6 buffer 799 52 799 58 107 1 , 799 58 799 59 104 8 uint32_t 799 60 799 68 106 13 buffer_length 799 69 799 82 108 1 ) 799 82 799 83 104 1 ; 799 83 799 84 18446744073709551615 634 /**
 * @brief Set the entire led strip using the colors contained in the buffer
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - A given value is not correct, or the buffer is null
 * EADDRINUSE - The port is not configured for ADI output
 *
 * @param led port of type adi_led_t
 * @param buffer array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw
 * @param buffer_length length of buffer to clear
 * @return PROS_SUCCESS if successful, PROS_ERR if not
 */ 801 1 814 4 18446744073709551615 7 int32_t 815 1 815 8 29 11 adi_led_set 815 9 815 20 109 1 ( 815 20 815 21 109 9 adi_led_t 815 21 815 30 101 3 led 815 31 815 34 110 1 , 815 34 815 35 109 8 uint32_t 815 36 815 44 106 1 * 815 44 815 45 18446744073709551615 6 buffer 815 46 815 52 111 1 , 815 52 815 53 109 8 uint32_t 815 54 815 62 106 13 buffer_length 815 63 815 76 112 1 ) 815 76 815 77 109 1 ; 815 77 815 78 18446744073709551615 662 /**
 * @brief Set the entire led strip to one color
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - A given value is not correct, or the buffer is null
 * EADDRINUSE - The port is not configured for ADI output
 *
 * @param led port of type adi_led_t
 * @param buffer array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw
 * @param buffer_length length of buffer to clear
 * @param color color to set all the led strip value to
 * @return PROS_SUCCESS if successful, PROS_ERR if not
 */ 817 1 831 4 18446744073709551615 7 int32_t 832 1 832 8 29 15 adi_led_set_all 832 9 832 24 113 1 ( 832 24 832 25 113 9 adi_led_t 832 25 832 34 101 3 led 832 35 832 38 114 1 , 832 38 832 39 113 8 uint32_t 832 40 832 48 106 1 * 832 48 832 49 18446744073709551615 6 buffer 832 50 832 56 115 1 , 832 56 832 57 113 8 uint32_t 832 58 832 66 106 13 buffer_length 832 67 832 80 116 1 , 832 80 832 81 113 8 uint32_t 832 82 832 90 106 5 color 832 91 832 96 117 1 ) 832 96 832 97 113 1 ; 832 97 832 98 18446744073709551615 708 /**
 * @brief Set one pixel on the led strip
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - A given value is not correct, or the buffer is null
 * EADDRINUSE - The port is not configured for ADI output
 *
 * @param led port of type adi_led_t
 * @param buffer array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw
 * @param buffer_length length of the input buffer
 * @param color color to clear all the led strip to
 * @param pixel_position position of the pixel to clear
 * @return PROS_SUCCESS if successful, PROS_ERR if not
 */ 834 1 849 4 18446744073709551615 7 int32_t 850 1 850 8 29 17 adi_led_set_pixel 850 9 850 26 118 1 ( 850 26 850 27 118 9 adi_led_t 850 27 850 36 101 3 led 850 37 850 40 119 1 , 850 40 850 41 118 8 uint32_t 850 42 850 50 106 1 * 850 50 850 51 18446744073709551615 6 buffer 850 52 850 58 120 1 , 850 58 850 59 118 8 uint32_t 850 60 850 68 106 13 buffer_length 850 69 850 82 121 1 , 850 82 850 83 118 8 uint32_t 850 84 850 92 106 5 color 850 93 850 98 122 1 , 850 98 850 99 118 8 uint32_t 850 100 850 108 106 14 pixel_position 850 109 850 123 123 1 ) 850 123 850 124 118 1 ; 850 124 850 125 18446744073709551615 658 /**
 * @brief Clear one pixel on the led strip
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - A given value is not correct, or the buffer is null
 * EADDRINUSE - The port is not configured for ADI output
 *
 * @param led port of type adi_led_t
 * @param buffer array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw
 * @param buffer_length length of the input buffer
 * @param pixel_position position of the pixel to clear
 * @return PROS_SUCCESS if successful, PROS_ERR if not
 */ 852 1 866 4 18446744073709551615 7 int32_t 867 1 867 8 29 19 adi_led_clear_pixel 867 9 867 28 124 1 ( 867 28 867 29 124 9 adi_led_t 867 29 867 38 101 3 led 867 39 867 42 125 1 , 867 42 867 43 124 8 uint32_t 867 44 867 52 106 1 * 867 52 867 53 18446744073709551615 6 buffer 867 54 867 60 126 1 , 867 60 867 61 124 8 uint32_t 867 62 867 70 106 13 buffer_length 867 71 867 84 127 1 , 867 84 867 85 124 8 uint32_t 867 86 867 94 106 14 pixel_position 867 95 867 109 128 1 ) 867 109 867 110 124 1 ; 867 110 867 111 18446744073709551615 1 # 869 1 869 2 18446744073709551615 5 ifdef 869 2 869 7 18446744073709551615 11 __cplusplus 869 8 869 19 18446744073709551615 1 } 870 1 870 2 18446744073709551615 14 // namespace c 870 4 870 18 18446744073709551615 1 } 871 1 871 2 18446744073709551615 17 // namespace pros 871 4 871 21 18446744073709551615 1 } 872 1 872 2 18446744073709551615 1 # 873 1 873 2 18446744073709551615 5 endif 873 2 873 7 18446744073709551615 1 # 875 1 875 2 18446744073709551615 5 endif 875 2 875 7 18446744073709551615 15 // _PROS_ADI_H_ 875 9 875 24 18446744073709551615 0 0 129 0 0 0 22 0 0 1 13 0 4 pros 5 1 13 0 22 adi_port_config_e:pros 7 1 13 0 38 E_ADI_ANALOG_IN:adi_port_config_e:pros 7 1 13 0 39 E_ADI_ANALOG_OUT:adi_port_config_e:pros 7 1 13 0 39 E_ADI_DIGITAL_IN:adi_port_config_e:pros 7 1 13 0 40 E_ADI_DIGITAL_OUT:adi_port_config_e:pros 7 1 13 0 41 E_ADI_SMART_BUTTON:adi_port_config_e:pros 7 1 13 0 38 E_ADI_SMART_POT:adi_port_config_e:pros 7 1 13 0 42 E_ADI_LEGACY_BUTTON:adi_port_config_e:pros 7 1 13 0 39 E_ADI_LEGACY_POT:adi_port_config_e:pros 7 1 13 0 47 E_ADI_LEGACY_LINE_SENSOR:adi_port_config_e:pros 7 1 13 0 48 E_ADI_LEGACY_LIGHT_SENSOR:adi_port_config_e:pros 7 1 13 0 40 E_ADI_LEGACY_GYRO:adi_port_config_e:pros 7 1 13 0 49 E_ADI_LEGACY_ACCELEROMETER:adi_port_config_e:pros 7 1 13 0 41 E_ADI_LEGACY_SERVO:adi_port_config_e:pros 7 1 13 0 39 E_ADI_LEGACY_PWM:adi_port_config_e:pros 7 1 13 0 43 E_ADI_LEGACY_ENCODER:adi_port_config_e:pros 7 1 13 0 46 E_ADI_LEGACY_ULTRASONIC:adi_port_config_e:pros 7 1 13 0 43 E_ADI_TYPE_UNDEFINED:adi_port_config_e:pros 7 1 13 0 32 E_ADI_ERR:adi_port_config_e:pros 20 1 13 0 24 adi_port_config_e_t:pros 5 1 13 0 29 adi_potentiometer_type_e:pros 7 1 13 0 43 E_ADI_POT_EDR:adi_potentiometer_type_e:pros 7 1 13 0 42 E_ADI_POT_V2:adi_potentiometer_type_e:pros 20 1 13 0 31 adi_potentiometer_type_e_t:pros 22 1 13 0 6 c:pros 8 1 13 0 26 adi_port_get_config:c:pros 20 1 13 0 7 uint8_t 10 1 13 0 66 148:49:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 20 1 13 0 7 int32_t 8 1 13 0 25 adi_port_get_value:c:pros 10 1 13 0 66 163:36:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 26 adi_port_set_config:c:pros 10 1 13 0 66 180:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 180:63:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 25 adi_port_set_value:c:pros 10 1 13 0 66 201:36:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 201:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 27 adi_analog_calibrate:c:pros 10 1 13 0 66 264:38:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 22 adi_analog_read:c:pros 10 1 13 0 66 284:33:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 33 adi_analog_read_calibrated:c:pros 10 1 13 0 66 306:44:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 36 adi_analog_read_calibrated_HR:c:pros 10 1 13 0 66 333:47:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 23 adi_digital_read:c:pros 10 1 13 0 66 353:34:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 32 adi_digital_get_new_press:c:pros 10 1 13 0 66 377:43:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 24 adi_digital_write:c:pros 10 1 13 0 66 398:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 398:46:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 19 adi_pin_mode:c:pros 10 1 13 0 66 415:30:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 415:44:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 20 adi_motor_set:c:pros 10 1 13 0 66 434:31:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 20 1 13 0 6 int8_t 10 1 13 0 66 434:44:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 20 adi_motor_get:c:pros 10 1 13 0 66 449:31:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 21 adi_motor_stop:c:pros 10 1 13 0 66 465:32:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 20 1 13 0 20 adi_encoder_t:c:pros 8 1 13 0 22 adi_encoder_get:c:pros 10 1 13 0 66 492:39:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 23 adi_encoder_init:c:pros 10 1 13 0 66 514:40:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 514:58:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 514:76:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 24 adi_encoder_reset:c:pros 10 1 13 0 66 534:41:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 27 adi_encoder_shutdown:c:pros 10 1 13 0 66 550:44:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 20 1 13 0 23 adi_ultrasonic_t:c:pros 8 1 13 0 25 adi_ultrasonic_get:c:pros 10 1 13 0 66 578:45:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 26 adi_ultrasonic_init:c:pros 10 1 13 0 66 598:46:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 598:65:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 30 adi_ultrasonic_shutdown:c:pros 10 1 13 0 66 614:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 20 1 13 0 17 adi_gyro_t:c:pros 8 1 13 0 19 adi_gyro_get:c:pros 10 1 13 0 66 642:32:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 20 adi_gyro_init:c:pros 10 1 13 0 66 666:34:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 666:47:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 21 adi_gyro_reset:c:pros 10 1 13 0 66 682:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 24 adi_gyro_shutdown:c:pros 10 1 13 0 66 698:38:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 20 1 13 0 26 adi_potentiometer_t:c:pros 8 1 13 0 29 adi_potentiometer_init:c:pros 10 1 13 0 66 722:52:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 34 adi_potentiometer_type_init:c:pros 10 1 13 0 66 740:57:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 740:90:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 34 adi_potentiometer_get_angle:c:pros 10 1 13 0 66 758:56:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 20 1 13 0 16 adi_led_t:c:pros 8 1 13 0 19 adi_led_init:c:pros 10 1 13 0 66 783:32:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 24 adi_led_clear_all:c:pros 10 1 13 0 66 799:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 20 1 13 0 8 uint32_t 10 1 13 0 66 799:52:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 799:69:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 18 adi_led_set:c:pros 10 1 13 0 66 815:31:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 815:46:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 815:63:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 22 adi_led_set_all:c:pros 10 1 13 0 66 832:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 832:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 832:67:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 832:91:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 24 adi_led_set_pixel:c:pros 10 1 13 0 66 850:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 850:52:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 850:69:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 850:93:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 67 850:109:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 8 1 13 0 26 adi_led_clear_pixel:c:pros 10 1 13 0 66 867:39:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 867:54:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 867:71:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 10 1 13 0 66 867:95:/home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 0 0 1 0 0 0 59 /home/bluecore/Desktop/Pros/Main Project/include/pros/adi.h 1698321186