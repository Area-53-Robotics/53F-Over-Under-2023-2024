22 serialization::archive 19 0 0 0 0 40 /home/bluecore/Desktop/Pros/Main Project 40 /home/bluecore/Desktop/Pros/Main Project 0 0 1208 0 0 0 569 /**
 * \file pros/motors.h
 *
 * Contains prototypes for the V5 Motor-related functions.
 *
 * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/motors.html to learn
 * more.
 *
 * This file should not be modified by users, since it gets replaced whenever
 * a kernel upgrade occurs.
 *
 * \copyright Copyright (c) 2017-2023, Purdue University ACM SIGBots.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */ 1 1 17 4 18446744073709551615 1 # 19 1 19 2 18446744073709551615 6 ifndef 19 2 19 8 18446744073709551615 15 _PROS_MOTORS_H_ 19 9 19 24 18446744073709551615 1 # 20 1 20 2 18446744073709551615 6 define 20 2 20 8 18446744073709551615 15 _PROS_MOTORS_H_ 20 9 20 24 18446744073709551615 1 # 22 1 22 2 18446744073709551615 7 include 22 2 22 9 18446744073709551615 1 < 22 10 22 11 18446744073709551615 7 stdbool 22 11 22 18 18446744073709551615 1 . 22 18 22 19 18446744073709551615 1 h 22 19 22 20 18446744073709551615 1 > 22 20 22 21 18446744073709551615 1 # 23 1 23 2 18446744073709551615 7 include 23 2 23 9 18446744073709551615 1 < 23 10 23 11 18446744073709551615 6 stdint 23 11 23 17 18446744073709551615 1 . 23 17 23 18 18446744073709551615 1 h 23 18 23 19 18446744073709551615 1 > 23 19 23 20 18446744073709551615 1 # 25 1 25 2 18446744073709551615 5 ifdef 25 2 25 7 18446744073709551615 11 __cplusplus 25 8 25 19 18446744073709551615 6 extern 26 1 26 7 18446744073709551615 3 "C" 26 8 26 11 18446744073709551615 1 { 26 12 26 13 18446744073709551615 9 namespace 27 1 27 10 18446744073709551615 4 pros 27 11 27 15 0 1 { 27 16 27 17 18446744073709551615 9 namespace 28 1 28 10 18446744073709551615 1 c 28 11 28 12 1 1 { 28 13 28 14 18446744073709551615 1 # 29 1 29 2 18446744073709551615 5 endif 29 2 29 7 18446744073709551615 80 /******************************************************************************/ 31 1 31 81 18446744073709551615 80 /**                         Motor movement functions                         **/ 32 1 32 81 18446744073709551615 80 /**                                                                          **/ 33 1 33 81 18446744073709551615 80 /**          These functions allow programmers to make motors move           **/ 34 1 34 81 18446744073709551615 80 /******************************************************************************/ 35 1 35 81 18446744073709551615 730 /**
 * Sets the voltage for the motor from -127 to 127.
 *
 * This is designed to map easily to the input from the controller's analog
 * stick for simple opcontrol use. The actual behavior of the motor is analogous
 * to use of motor_move_voltage(), or motorSet() from the PROS 2 API.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param voltage
 *        The new motor voltage from -127 to 127
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 37 1 56 4 18446744073709551615 7 int32_t 57 1 57 8 2 10 motor_move 57 9 57 19 3 1 ( 57 19 57 20 3 7 uint8_t 57 20 57 27 4 4 port 57 28 57 32 5 1 , 57 32 57 33 3 7 int32_t 57 34 57 41 2 7 voltage 57 42 57 49 6 1 ) 57 49 57 50 3 1 ; 57 50 57 51 18446744073709551615 718 /**
 * Stops the motor using the currently configured brake mode.
 * 
 * This function sets motor velocity to zero, which will cause it to act
 * according to the set brake mode. If brake mode is set to MOTOR_BRAKE_HOLD,
 * this function may behave differently than calling motor_move_absolute(port, 0)
 * or motor_move_relative(port, 0).
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 * 
 * \param port
 *        The V5 port number from 1-21
 * 
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 59 1 77 4 18446744073709551615 7 int32_t 78 1 78 8 2 11 motor_brake 78 9 78 20 7 1 ( 78 20 78 21 7 7 uint8_t 78 21 78 28 4 4 port 78 29 78 33 8 1 ) 78 33 78 34 7 1 ; 78 34 78 35 18446744073709551615 912 /**
 * Sets the target absolute position for the motor to move to.
 *
 * This movement is relative to the position of the motor when initialized or
 * the position when it was most recently reset with motor_set_zero_position().
 *
 * \note This function simply sets the target for the motor, it does not block
 * program execution until the movement finishes.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param position
 *        The absolute position to move to in the motor's encoder units
 * \param velocity
 *        The maximum allowable velocity for the movement in RPM
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 80 1 103 4 18446744073709551615 7 int32_t 104 1 104 8 2 19 motor_move_absolute 104 9 104 28 9 1 ( 104 28 104 29 9 7 uint8_t 104 29 104 36 4 4 port 104 37 104 41 10 1 , 104 41 104 42 9 5 const 104 43 104 48 18446744073709551615 6 double 104 49 104 55 18446744073709551615 8 position 104 56 104 64 11 1 , 104 64 104 65 9 5 const 104 66 104 71 18446744073709551615 7 int32_t 104 72 104 79 2 8 velocity 104 80 104 88 12 1 ) 104 88 104 89 9 1 ; 104 89 104 90 18446744073709551615 997 /**
 * Sets the relative target position for the motor to move to.
 *
 * This movement is relative to the current position of the motor as given in
 * motor_get_position(). Providing 10.0 as the position parameter would result
 * in the motor moving clockwise 10 units, no matter what the current position
 * is.
 *
 * \note This function simply sets the target for the motor, it does not block
 * program execution until the movement finishes.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param position
 *        The relative position to move to in the motor's encoder units
 * \param velocity
 *        The maximum allowable velocity for the movement in RPM
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 106 1 131 4 18446744073709551615 7 int32_t 132 1 132 8 2 19 motor_move_relative 132 9 132 28 13 1 ( 132 28 132 29 13 7 uint8_t 132 29 132 36 4 4 port 132 37 132 41 14 1 , 132 41 132 42 13 5 const 132 43 132 48 18446744073709551615 6 double 132 49 132 55 18446744073709551615 8 position 132 56 132 64 15 1 , 132 64 132 65 13 5 const 132 66 132 71 18446744073709551615 7 int32_t 132 72 132 79 2 8 velocity 132 80 132 88 16 1 ) 132 88 132 89 13 1 ; 132 89 132 90 18446744073709551615 877 /**
 * Sets the velocity for the motor.
 *
 * This velocity corresponds to different actual speeds depending on the gearset
 * used for the motor. This results in a range of +-100 for E_MOTOR_GEARSET_36,
 * +-200 for E_MOTOR_GEARSET_18, and +-600 for E_MOTOR_GEARSET_6. The velocity
 * is held with PID to ensure consistent speed, as opposed to setting the
 * motor's voltage.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param velocity
 *        The new motor velocity from +-100, +-200, or +-600 depending on the
 *        motor's gearset
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 134 1 156 4 18446744073709551615 7 int32_t 157 1 157 8 2 19 motor_move_velocity 157 9 157 28 17 1 ( 157 28 157 29 17 7 uint8_t 157 29 157 36 4 4 port 157 37 157 41 18 1 , 157 41 157 42 17 5 const 157 43 157 48 18446744073709551615 7 int32_t 157 49 157 56 2 8 velocity 157 57 157 65 19 1 ) 157 65 157 66 17 1 ; 157 66 157 67 18446744073709551615 528 /**
 * Sets the output voltage for the motor from -12000 to 12000 in millivolts
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param voltage
 *        The new voltage value from -12000 to 12000
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 159 1 174 4 18446744073709551615 7 int32_t 175 1 175 8 2 18 motor_move_voltage 175 9 175 27 20 1 ( 175 27 175 28 20 7 uint8_t 175 28 175 35 4 4 port 175 36 175 40 21 1 , 175 40 175 41 20 5 const 175 42 175 47 18446744073709551615 7 int32_t 175 48 175 55 2 7 voltage 175 56 175 63 22 1 ) 175 63 175 64 20 1 ; 175 64 175 65 18446744073709551615 687 /**
 * Changes the output velocity for a profiled movement (motor_move_absolute or
 * motor_move_relative). This will have no effect if the motor is not following
 * a profiled movement.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param velocity
 *        The new motor velocity from +-100, +-200, or +-600 depending on the
 *        motor's gearset
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 177 1 195 4 18446744073709551615 7 int32_t 196 1 196 8 2 30 motor_modify_profiled_velocity 196 9 196 39 23 1 ( 196 39 196 40 23 7 uint8_t 196 40 196 47 4 4 port 196 48 196 52 24 1 , 196 52 196 53 23 5 const 196 54 196 59 18446744073709551615 7 int32_t 196 60 196 67 2 8 velocity 196 68 196 76 25 1 ) 196 76 196 77 23 1 ; 196 77 196 78 18446744073709551615 449 /**
 * Gets the target position set for the motor by the user.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The target position in its encoder units or PROS_ERR_F if the
 * operation failed, setting errno.
 */ 198 1 211 4 18446744073709551615 6 double 212 1 212 7 18446744073709551615 25 motor_get_target_position 212 8 212 33 26 1 ( 212 33 212 34 26 7 uint8_t 212 34 212 41 4 4 port 212 42 212 46 27 1 ) 212 46 212 47 26 1 ; 212 47 212 48 18446744073709551615 462 /**
 * Gets the velocity commanded to the motor by the user.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The commanded motor velocity from +-100, +-200, or +-600, or PROS_ERR
 * if the operation failed, setting errno.
 */ 214 1 227 4 18446744073709551615 7 int32_t 228 1 228 8 2 25 motor_get_target_velocity 228 9 228 34 28 1 ( 228 34 228 35 28 7 uint8_t 228 35 228 42 4 4 port 228 43 228 47 29 1 ) 228 47 228 48 28 1 ; 228 48 228 49 18446744073709551615 80 /******************************************************************************/ 230 1 230 81 18446744073709551615 80 /**                        Motor telemetry functions                         **/ 231 1 231 81 18446744073709551615 80 /**                                                                          **/ 232 1 232 81 18446744073709551615 80 /**    These functions allow programmers to collect telemetry from motors    **/ 233 1 233 81 18446744073709551615 80 /******************************************************************************/ 234 1 234 81 18446744073709551615 426 /**
 * Gets the actual velocity of the motor.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The motor's actual velocity in RPM or PROS_ERR_F if the operation
 * failed, setting errno.
 */ 236 1 249 4 18446744073709551615 6 double 250 1 250 7 18446744073709551615 25 motor_get_actual_velocity 250 8 250 33 30 1 ( 250 33 250 34 30 7 uint8_t 250 34 250 41 4 4 port 250 42 250 46 31 1 ) 250 46 250 47 30 1 ; 250 47 250 48 18446744073709551615 419 /**
 * Gets the current drawn by the motor in mA.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The motor's current in mA or PROS_ERR if the operation failed,
 * setting errno.
 */ 252 1 265 4 18446744073709551615 7 int32_t 266 1 266 8 2 22 motor_get_current_draw 266 9 266 31 32 1 ( 266 31 266 32 32 7 uint8_t 266 32 266 39 4 4 port 266 40 266 44 33 1 ) 266 44 266 45 32 1 ; 266 45 266 46 18446744073709551615 477 /**
 * Gets the direction of movement for the motor.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return 1 for moving in the positive direction, -1 for moving in the
 * negative direction, or PROS_ERR if the operation failed, setting errno.
 */ 268 1 281 4 18446744073709551615 7 int32_t 282 1 282 8 2 19 motor_get_direction 282 9 282 28 34 1 ( 282 28 282 29 34 7 uint8_t 282 29 282 36 4 4 port 282 37 282 41 35 1 ) 282 41 282 42 34 1 ; 282 42 282 43 18446744073709551615 622 /**
 * Gets the efficiency of the motor in percent.
 *
 * An efficiency of 100% means that the motor is moving electrically while
 * drawing no electrical power, and an efficiency of 0% means that the motor
 * is drawing power but not moving.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The motor's efficiency in percent or PROS_ERR_F if the operation
 * failed, setting errno.
 */ 284 1 301 4 18446744073709551615 6 double 302 1 302 7 18446744073709551615 20 motor_get_efficiency 302 8 302 28 36 1 ( 302 28 302 29 36 7 uint8_t 302 29 302 36 4 4 port 302 37 302 41 37 1 ) 302 41 302 42 36 1 ; 302 42 302 43 18446744073709551615 498 /**
 * Checks if the motor is drawing over its current limit.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return 1 if the motor's current limit is being exceeded and 0 if the current
 * limit is not exceeded, or PROS_ERR if the operation failed, setting errno.
 */ 304 1 317 4 18446744073709551615 7 int32_t 318 1 318 8 2 21 motor_is_over_current 318 9 318 30 38 1 ( 318 30 318 31 38 7 uint8_t 318 31 318 38 4 4 port 318 39 318 43 39 1 ) 318 43 318 44 38 1 ; 318 44 318 45 18446744073709551615 492 /**
 * Checks if the motor's temperature is above its limit.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return 1 if the temperature limit is exceeded and 0 if the the temperature
 * is below the limit, or PROS_ERR if the operation failed, setting errno.
 */ 320 1 333 4 18446744073709551615 7 int32_t 334 1 334 8 2 18 motor_is_over_temp 334 9 334 27 40 1 ( 334 27 334 28 40 7 uint8_t 334 28 334 35 4 4 port 334 36 334 40 41 1 ) 334 40 334 41 40 1 ; 334 41 334 42 18446744073709551615 399 /**
 * Checks if the motor is stopped.
 *
 * \note Although this function forwards data from the motor, the motor
 * presently does not provide any value. This function returns PROS_ERR with
 * errno set to ENOSYS.
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return 1 if the motor is not moving, 0 if the motor is moving, or PROS_ERR
 * if the operation failed, setting errno
 */ 336 1 348 4 18446744073709551615 7 int32_t 349 1 349 8 2 16 motor_is_stopped 349 9 349 25 42 1 ( 349 25 349 26 42 7 uint8_t 349 26 349 33 4 4 port 349 34 349 38 43 1 ) 349 38 349 39 42 1 ; 349 39 349 40 18446744073709551615 453 /**
 * Checks if the motor is at its zero position.
 *
 * \note Although this function forwards data from the motor, the motor
 * presently does not provide any value. This function returns PROS_ERR with
 * errno set to ENOSYS.
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return 1 if the motor is at zero absolute position, 0 if the motor has
 * moved from its absolute zero, or PROS_ERR if the operation failed,
 * setting errno
 */ 351 1 364 4 18446744073709551615 7 int32_t 365 1 365 8 2 28 motor_get_zero_position_flag 365 9 365 37 44 1 ( 365 37 365 38 44 7 uint8_t 365 38 365 45 4 4 port 365 46 365 50 45 1 ) 365 50 365 51 44 1 ; 365 51 365 52 18446744073709551615 1 # 367 1 367 2 18446744073709551615 5 ifdef 367 2 367 7 18446744073709551615 11 __cplusplus 367 8 367 19 18446744073709551615 1 } 368 1 368 2 18446744073709551615 14 // namespace c 368 4 368 18 18446744073709551615 1 # 369 1 369 2 18446744073709551615 5 endif 369 2 369 7 18446744073709551615 7 typedef 371 1 371 8 18446744073709551615 4 enum 371 9 371 13 18446744073709551615 13 motor_fault_e 371 14 371 27 46 1 { 371 28 371 29 18446744073709551615 23 E_MOTOR_FAULT_NO_FAULTS 372 2 372 25 47 1 = 372 26 372 27 18446744073709551615 4 0x00 372 28 372 32 18446744073709551615 1 , 372 32 372 33 18446744073709551615 29 E_MOTOR_FAULT_MOTOR_OVER_TEMP 373 2 373 31 48 1 = 373 32 373 33 18446744073709551615 4 0x01 373 34 373 38 18446744073709551615 1 , 373 38 373 39 18446744073709551615 36 // Analogous to motor_is_over_temp() 373 41 373 77 18446744073709551615 26 E_MOTOR_FAULT_DRIVER_FAULT 374 2 374 28 49 1 = 374 29 374 30 18446744073709551615 4 0x02 374 31 374 35 18446744073709551615 1 , 374 35 374 36 18446744073709551615 35 // Indicates a motor h-bridge fault 374 41 374 76 18446744073709551615 26 E_MOTOR_FAULT_OVER_CURRENT 375 2 375 28 50 1 = 375 29 375 30 18446744073709551615 4 0x04 375 31 375 35 18446744073709551615 1 , 375 35 375 36 18446744073709551615 39 // Analogous to motor_is_over_current() 375 41 375 80 18446744073709551615 30 E_MOTOR_FAULT_DRV_OVER_CURRENT 376 2 376 32 51 1 = 376 33 376 34 18446744073709551615 4 0x08 376 35 376 39 18446744073709551615 37 // Indicates an h-bridge over current 376 41 376 78 18446744073709551615 1 } 377 1 377 2 18446744073709551615 15 motor_fault_e_t 377 3 377 18 52 1 ; 377 18 377 19 18446744073709551615 1 # 379 1 379 2 18446744073709551615 5 ifdef 379 2 379 7 18446744073709551615 21 PROS_USE_SIMPLE_NAMES 379 8 379 29 18446744073709551615 1 # 380 1 380 2 18446744073709551615 5 ifdef 380 2 380 7 18446744073709551615 11 __cplusplus 380 8 380 19 18446744073709551615 1 # 381 1 381 2 18446744073709551615 6 define 381 2 381 8 18446744073709551615 21 MOTOR_FAULT_NO_FAULTS 381 9 381 30 18446744073709551615 4 pros 381 31 381 35 18446744073709551615 2 :: 381 35 381 37 18446744073709551615 23 E_MOTOR_FAULT_NO_FAULTS 381 37 381 60 18446744073709551615 1 # 382 1 382 2 18446744073709551615 6 define 382 2 382 8 18446744073709551615 27 MOTOR_FAULT_MOTOR_OVER_TEMP 382 9 382 36 18446744073709551615 4 pros 382 37 382 41 18446744073709551615 2 :: 382 41 382 43 18446744073709551615 29 E_MOTOR_FAULT_MOTOR_OVER_TEMP 382 43 382 72 18446744073709551615 1 # 383 1 383 2 18446744073709551615 6 define 383 2 383 8 18446744073709551615 24 MOTOR_FAULT_DRIVER_FAULT 383 9 383 33 18446744073709551615 4 pros 383 34 383 38 18446744073709551615 2 :: 383 38 383 40 18446744073709551615 26 E_MOTOR_FAULT_DRIVER_FAULT 383 40 383 66 18446744073709551615 1 # 384 1 384 2 18446744073709551615 6 define 384 2 384 8 18446744073709551615 24 MOTOR_FAULT_OVER_CURRENT 384 9 384 33 18446744073709551615 4 pros 384 34 384 38 18446744073709551615 2 :: 384 38 384 40 18446744073709551615 30 E_MOTOR_FAULT_DRV_OVER_CURRENT 384 40 384 70 18446744073709551615 1 # 385 1 385 2 18446744073709551615 6 define 385 2 385 8 18446744073709551615 28 MOTOR_FAULT_DRV_OVER_CURRENT 385 9 385 37 18446744073709551615 4 pros 385 38 385 42 18446744073709551615 2 :: 385 42 385 44 18446744073709551615 30 E_MOTOR_FAULT_DRV_OVER_CURRENT 385 44 385 74 18446744073709551615 1 # 386 1 386 2 18446744073709551615 4 else 386 2 386 6 18446744073709551615 1 # 387 1 387 2 18446744073709551615 6 define 387 2 387 8 18446744073709551615 21 MOTOR_FAULT_NO_FAULTS 387 9 387 30 18446744073709551615 23 E_MOTOR_FAULT_NO_FAULTS 387 31 387 54 18446744073709551615 1 # 388 1 388 2 18446744073709551615 6 define 388 2 388 8 18446744073709551615 27 MOTOR_FAULT_MOTOR_OVER_TEMP 388 9 388 36 18446744073709551615 29 E_MOTOR_FAULT_MOTOR_OVER_TEMP 388 37 388 66 18446744073709551615 1 # 389 1 389 2 18446744073709551615 6 define 389 2 389 8 18446744073709551615 24 MOTOR_FAULT_DRIVER_FAULT 389 9 389 33 18446744073709551615 26 E_MOTOR_FAULT_DRIVER_FAULT 389 34 389 60 18446744073709551615 1 # 390 1 390 2 18446744073709551615 6 define 390 2 390 8 18446744073709551615 24 MOTOR_FAULT_OVER_CURRENT 390 9 390 33 18446744073709551615 30 E_MOTOR_FAULT_DRV_OVER_CURRENT 390 34 390 64 18446744073709551615 1 # 391 1 391 2 18446744073709551615 6 define 391 2 391 8 18446744073709551615 28 MOTOR_FAULT_DRV_OVER_CURRENT 391 9 391 37 18446744073709551615 30 E_MOTOR_FAULT_DRV_OVER_CURRENT 391 38 391 68 18446744073709551615 1 # 392 1 392 2 18446744073709551615 5 endif 392 2 392 7 18446744073709551615 1 # 393 1 393 2 18446744073709551615 5 endif 393 2 393 7 18446744073709551615 1 # 395 1 395 2 18446744073709551615 5 ifdef 395 2 395 7 18446744073709551615 11 __cplusplus 395 8 395 19 18446744073709551615 9 namespace 396 1 396 10 18446744073709551615 1 c 396 11 396 12 1 1 { 396 13 396 14 18446744073709551615 1 # 397 1 397 2 18446744073709551615 5 endif 397 2 397 7 18446744073709551615 443 /**
 * Gets the faults experienced by the motor.
 *
 * Compare this bitfield to the bitmasks in motor_fault_e_t.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return A bitfield containing the motor's faults.
 */ 399 1 413 4 18446744073709551615 8 uint32_t 414 1 414 9 53 16 motor_get_faults 414 10 414 26 54 1 ( 414 26 414 27 54 7 uint8_t 414 27 414 34 4 4 port 414 35 414 39 55 1 ) 414 39 414 40 54 1 ; 414 40 414 41 18446744073709551615 1 # 416 1 416 2 18446744073709551615 5 ifdef 416 2 416 7 18446744073709551615 11 __cplusplus 416 8 416 19 18446744073709551615 1 } 417 1 417 2 18446744073709551615 14 // namespace c 417 4 417 18 18446744073709551615 1 # 418 1 418 2 18446744073709551615 5 endif 418 2 418 7 18446744073709551615 7 typedef 420 1 420 8 18446744073709551615 4 enum 420 9 420 13 18446744073709551615 12 motor_flag_e 420 14 420 26 56 1 { 420 27 420 28 18446744073709551615 18 E_MOTOR_FLAGS_NONE 421 2 421 20 57 1 = 421 21 421 22 18446744073709551615 4 0x00 421 23 421 27 18446744073709551615 1 , 421 27 421 28 18446744073709551615 18 E_MOTOR_FLAGS_BUSY 422 2 422 20 58 1 = 422 21 422 22 18446744073709551615 4 0x01 422 23 422 27 18446744073709551615 1 , 422 27 422 28 18446744073709551615 44 // Cannot currently communicate to the motor 422 39 422 83 18446744073709551615 27 E_MOTOR_FLAGS_ZERO_VELOCITY 423 2 423 29 59 1 = 423 30 423 31 18446744073709551615 4 0x02 423 32 423 36 18446744073709551615 1 , 423 36 423 37 18446744073709551615 34 // Analogous to motor_is_stopped() 423 39 423 73 18446744073709551615 27 E_MOTOR_FLAGS_ZERO_POSITION 424 2 424 29 60 1 = 424 30 424 31 18446744073709551615 4 0x04 424 32 424 36 18446744073709551615 46 // Analogous to motor_get_zero_position_flag() 424 39 424 85 18446744073709551615 1 } 425 1 425 2 18446744073709551615 14 motor_flag_e_t 425 3 425 17 61 1 ; 425 17 425 18 18446744073709551615 1 # 427 1 427 2 18446744073709551615 5 ifdef 427 2 427 7 18446744073709551615 21 PROS_USE_SIMPLE_NAMES 427 8 427 29 18446744073709551615 1 # 428 1 428 2 18446744073709551615 5 ifdef 428 2 428 7 18446744073709551615 11 __cplusplus 428 8 428 19 18446744073709551615 1 # 429 1 429 2 18446744073709551615 6 define 429 2 429 8 18446744073709551615 16 MOTOR_FLAGS_NONE 429 9 429 25 18446744073709551615 4 pros 429 26 429 30 18446744073709551615 2 :: 429 30 429 32 18446744073709551615 18 E_MOTOR_FLAGS_NONE 429 32 429 50 18446744073709551615 1 # 430 1 430 2 18446744073709551615 6 define 430 2 430 8 18446744073709551615 16 MOTOR_FLAGS_BUSY 430 9 430 25 18446744073709551615 4 pros 430 26 430 30 18446744073709551615 2 :: 430 30 430 32 18446744073709551615 18 E_MOTOR_FLAGS_BUSY 430 32 430 50 18446744073709551615 1 # 431 1 431 2 18446744073709551615 6 define 431 2 431 8 18446744073709551615 25 MOTOR_FLAGS_ZERO_VELOCITY 431 9 431 34 18446744073709551615 4 pros 431 35 431 39 18446744073709551615 2 :: 431 39 431 41 18446744073709551615 27 E_MOTOR_FLAGS_ZERO_VELOCITY 431 41 431 68 18446744073709551615 1 # 432 1 432 2 18446744073709551615 6 define 432 2 432 8 18446744073709551615 25 MOTOR_FLAGS_ZERO_POSITION 432 9 432 34 18446744073709551615 4 pros 432 35 432 39 18446744073709551615 2 :: 432 39 432 41 18446744073709551615 27 E_MOTOR_FLAGS_ZERO_POSITION 432 41 432 68 18446744073709551615 1 # 433 1 433 2 18446744073709551615 4 else 433 2 433 6 18446744073709551615 1 # 434 1 434 2 18446744073709551615 6 define 434 2 434 8 18446744073709551615 16 MOTOR_FLAGS_NONE 434 9 434 25 18446744073709551615 18 E_MOTOR_FLAGS_NONE 434 26 434 44 18446744073709551615 1 # 435 1 435 2 18446744073709551615 6 define 435 2 435 8 18446744073709551615 16 MOTOR_FLAGS_BUSY 435 9 435 25 18446744073709551615 18 E_MOTOR_FLAGS_BUSY 435 26 435 44 18446744073709551615 1 # 436 1 436 2 18446744073709551615 6 define 436 2 436 8 18446744073709551615 25 MOTOR_FLAGS_ZERO_VELOCITY 436 9 436 34 18446744073709551615 27 E_MOTOR_FLAGS_ZERO_VELOCITY 436 35 436 62 18446744073709551615 1 # 437 1 437 2 18446744073709551615 6 define 437 2 437 8 18446744073709551615 25 MOTOR_FLAGS_ZERO_POSITION 437 9 437 34 18446744073709551615 27 E_MOTOR_FLAGS_ZERO_POSITION 437 35 437 62 18446744073709551615 1 # 438 1 438 2 18446744073709551615 5 endif 438 2 438 7 18446744073709551615 1 # 439 1 439 2 18446744073709551615 5 endif 439 2 439 7 18446744073709551615 1 # 441 1 441 2 18446744073709551615 5 ifdef 441 2 441 7 18446744073709551615 11 __cplusplus 441 8 441 19 18446744073709551615 9 namespace 442 1 442 10 18446744073709551615 1 c 442 11 442 12 1 1 { 442 13 442 14 18446744073709551615 1 # 443 1 443 2 18446744073709551615 5 endif 443 2 443 7 18446744073709551615 444 /**
 * Gets the flags set by the motor's operation.
 *
 * Compare this bitfield to the bitmasks in motor_flag_e_t.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return A bitfield containing the motor's flags.
 */ 445 1 459 4 18446744073709551615 8 uint32_t 460 1 460 9 53 15 motor_get_flags 460 10 460 25 62 1 ( 460 25 460 26 62 7 uint8_t 460 26 460 33 4 4 port 460 34 460 38 63 1 ) 460 38 460 39 62 1 ; 460 39 460 40 18446744073709551615 670 /**
 * Gets the raw encoder count of the motor at a given timestamp.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param[in] timestamp
 *            A pointer to a time in milliseconds for which the encoder count
 *            will be returned. If NULL, the timestamp at which the encoder
 *            count was read will not be supplied
 *
 * \return The raw encoder count at the given timestamp or PROS_ERR if the
 * operation failed.
 */ 462 1 479 4 18446744073709551615 7 int32_t 480 1 480 8 2 22 motor_get_raw_position 480 9 480 31 64 1 ( 480 31 480 32 64 7 uint8_t 480 32 480 39 4 4 port 480 40 480 44 65 1 , 480 44 480 45 64 8 uint32_t 480 46 480 54 53 1 * 480 54 480 55 18446744073709551615 5 const 480 56 480 61 18446744073709551615 9 timestamp 480 62 480 71 66 1 ) 480 71 480 72 64 1 ; 480 72 480 73 18446744073709551615 465 /**
 * Gets the absolute position of the motor in its encoder units.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The motor's absolute position in its encoder units or PROS_ERR_F
 * if the operation failed, setting errno.
 */ 482 1 495 4 18446744073709551615 6 double 496 1 496 7 18446744073709551615 18 motor_get_position 496 8 496 26 67 1 ( 496 26 496 27 67 7 uint8_t 496 27 496 34 4 4 port 496 35 496 39 68 1 ) 496 39 496 40 67 1 ; 496 40 496 41 18446744073709551615 428 /**
 * Gets the power drawn by the motor in Watts.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The motor's power draw in Watts or PROS_ERR_F if the operation
 * failed, setting errno.
 */ 498 1 511 4 18446744073709551615 6 double 512 1 512 7 18446744073709551615 15 motor_get_power 512 8 512 23 69 1 ( 512 23 512 24 69 7 uint8_t 512 24 512 31 4 4 port 512 32 512 36 70 1 ) 512 36 512 37 69 1 ; 512 37 512 38 18446744073709551615 449 /**
 * Gets the temperature of the motor in degrees Celsius.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The motor's temperature in degrees Celsius or PROS_ERR_F if the
 * operation failed, setting errno.
 */ 514 1 527 4 18446744073709551615 6 double 528 1 528 7 18446744073709551615 21 motor_get_temperature 528 8 528 29 71 1 ( 528 29 528 30 71 7 uint8_t 528 30 528 37 4 4 port 528 38 528 42 72 1 ) 528 42 528 43 71 1 ; 528 43 528 44 18446744073709551615 439 /**
 * Gets the torque generated by the motor in Newton Meters (Nm).
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The motor's torque in Nm or PROS_ERR_F if the operation failed,
 * setting errno.
 */ 530 1 543 4 18446744073709551615 6 double 544 1 544 7 18446744073709551615 16 motor_get_torque 544 8 544 24 73 1 ( 544 24 544 25 73 7 uint8_t 544 25 544 32 4 4 port 544 33 544 37 74 1 ) 544 37 544 38 73 1 ; 544 38 544 39 18446744073709551615 433 /**
 * Gets the voltage delivered to the motor in millivolts.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The motor's voltage in mV or PROS_ERR_F if the operation failed,
 * setting errno.
 */ 546 1 559 4 18446744073709551615 7 int32_t 560 1 560 8 2 17 motor_get_voltage 560 9 560 26 75 1 ( 560 26 560 27 75 7 uint8_t 560 27 560 34 4 4 port 560 35 560 39 76 1 ) 560 39 560 40 75 1 ; 560 40 560 41 18446744073709551615 80 /******************************************************************************/ 562 1 562 81 18446744073709551615 80 /**                      Motor configuration functions                       **/ 563 1 563 81 18446744073709551615 80 /**                                                                          **/ 564 1 564 81 18446744073709551615 80 /**  These functions allow programmers to configure the behavior of motors   **/ 565 1 565 81 18446744073709551615 80 /******************************************************************************/ 566 1 566 81 18446744073709551615 1 # 568 1 568 2 18446744073709551615 5 ifdef 568 2 568 7 18446744073709551615 11 __cplusplus 568 8 568 19 18446744073709551615 1 } 569 1 569 2 18446744073709551615 14 // namespace c 569 4 569 18 18446744073709551615 1 # 570 1 570 2 18446744073709551615 5 endif 570 2 570 7 18446744073709551615 57 /**
 * Indicates the current 'brake mode' of a motor.
 */ 572 1 574 4 18446744073709551615 7 typedef 575 1 575 8 18446744073709551615 4 enum 575 9 575 13 18446744073709551615 18 motor_brake_mode_e 575 14 575 32 77 1 { 575 33 575 34 18446744073709551615 19 E_MOTOR_BRAKE_COAST 576 2 576 21 78 1 = 576 22 576 23 18446744073709551615 1 0 576 24 576 25 18446744073709551615 1 , 576 25 576 26 18446744073709551615 50 // Motor coasts when stopped, traditional behavior 576 28 576 78 18446744073709551615 19 E_MOTOR_BRAKE_BRAKE 577 2 577 21 79 1 = 577 22 577 23 18446744073709551615 1 1 577 24 577 25 18446744073709551615 1 , 577 25 577 26 18446744073709551615 28 // Motor brakes when stopped 577 28 577 56 18446744073709551615 18 E_MOTOR_BRAKE_HOLD 578 2 578 20 80 1 = 578 21 578 22 18446744073709551615 1 2 578 23 578 24 18446744073709551615 1 , 578 24 578 25 18446744073709551615 45 // Motor actively holds position when stopped 578 28 578 73 18446744073709551615 21 E_MOTOR_BRAKE_INVALID 579 2 579 23 81 1 = 579 24 579 25 18446744073709551615 9 INT32_MAX 579 26 579 35 81 1 } 580 1 580 2 18446744073709551615 20 motor_brake_mode_e_t 580 3 580 23 82 1 ; 580 23 580 24 18446744073709551615 58 /**
 * Indicates the units used by the motor encoders.
 */ 582 1 584 4 18446744073709551615 7 typedef 585 1 585 8 18446744073709551615 4 enum 585 9 585 13 18446744073709551615 21 motor_encoder_units_e 585 14 585 35 83 1 { 585 36 585 37 18446744073709551615 23 E_MOTOR_ENCODER_DEGREES 586 2 586 25 84 1 = 586 26 586 27 18446744073709551615 1 0 586 28 586 29 18446744073709551615 1 , 586 29 586 30 18446744073709551615 43 // Position is recorded as angle in degrees 586 34 586 77 18446744073709551615 29 // as a floating point number 587 34 587 63 18446744073709551615 25 E_MOTOR_ENCODER_ROTATIONS 588 2 588 27 85 1 = 588 28 588 29 18446744073709551615 1 1 588 30 588 31 18446744073709551615 1 , 588 31 588 32 18446744073709551615 45 // Position is recorded as angle in rotations 588 34 588 79 18446744073709551615 29 // as a floating point number 589 34 589 63 18446744073709551615 22 E_MOTOR_ENCODER_COUNTS 590 2 590 24 86 1 = 590 25 590 26 18446744073709551615 1 2 590 27 590 28 18446744073709551615 1 , 590 28 590 29 18446744073709551615 44 // Position is recorded as raw encoder ticks 590 34 590 78 18446744073709551615 20 // as a whole number 591 34 591 54 18446744073709551615 23 E_MOTOR_ENCODER_INVALID 592 2 592 25 87 1 = 592 26 592 27 18446744073709551615 9 INT32_MAX 592 28 592 37 87 1 } 593 1 593 2 18446744073709551615 23 motor_encoder_units_e_t 593 3 593 26 88 1 ; 593 26 593 27 18446744073709551615 64 /**
 * Indicates the current internal gear ratio of a motor.
 */ 595 1 597 4 18446744073709551615 7 typedef 598 1 598 8 18446744073709551615 4 enum 598 9 598 13 18446744073709551615 15 motor_gearset_e 598 14 598 29 89 1 { 598 30 598 31 18446744073709551615 18 E_MOTOR_GEARSET_36 599 2 599 20 90 1 = 599 21 599 22 18446744073709551615 1 0 599 23 599 24 18446744073709551615 1 , 599 24 599 25 18446744073709551615 30 // 36:1, 100 RPM, Red gear set 599 27 599 57 18446744073709551615 16 E_MOTOR_GEAR_RED 600 2 600 18 91 1 = 600 19 600 20 18446744073709551615 18 E_MOTOR_GEARSET_36 600 21 600 39 90 1 , 600 39 600 40 18446744073709551615 16 E_MOTOR_GEAR_100 601 2 601 18 92 1 = 601 19 601 20 18446744073709551615 18 E_MOTOR_GEARSET_36 601 21 601 39 90 1 , 601 39 601 40 18446744073709551615 18 E_MOTOR_GEARSET_18 602 2 602 20 93 1 = 602 21 602 22 18446744073709551615 1 1 602 23 602 24 18446744073709551615 1 , 602 24 602 25 18446744073709551615 32 // 18:1, 200 RPM, Green gear set 602 27 602 59 18446744073709551615 18 E_MOTOR_GEAR_GREEN 603 2 603 20 94 1 = 603 21 603 22 18446744073709551615 18 E_MOTOR_GEARSET_18 603 23 603 41 93 1 , 603 41 603 42 18446744073709551615 16 E_MOTOR_GEAR_200 604 2 604 18 95 1 = 604 19 604 20 18446744073709551615 18 E_MOTOR_GEARSET_18 604 21 604 39 93 1 , 604 39 604 40 18446744073709551615 18 E_MOTOR_GEARSET_06 605 2 605 20 96 1 = 605 21 605 22 18446744073709551615 1 2 605 23 605 24 18446744073709551615 1 , 605 24 605 25 18446744073709551615 30 // 6:1, 600 RPM, Blue gear set 605 27 605 57 18446744073709551615 17 E_MOTOR_GEAR_BLUE 606 2 606 19 97 1 = 606 21 606 22 18446744073709551615 18 E_MOTOR_GEARSET_06 606 23 606 41 96 1 , 606 41 606 42 18446744073709551615 16 E_MOTOR_GEAR_600 607 2 607 18 98 1 = 607 19 607 20 18446744073709551615 18 E_MOTOR_GEARSET_06 607 21 607 39 96 1 , 607 39 607 40 18446744073709551615 23 E_MOTOR_GEARSET_INVALID 608 2 608 25 99 1 = 608 26 608 27 18446744073709551615 9 INT32_MAX 608 28 608 37 99 1 } 609 1 609 2 18446744073709551615 17 motor_gearset_e_t 609 3 609 20 100 1 ; 609 20 609 21 18446744073709551615 1 # 611 1 611 2 18446744073709551615 5 ifdef 611 2 611 7 18446744073709551615 21 PROS_USE_SIMPLE_NAMES 611 8 611 29 18446744073709551615 1 # 612 1 612 2 18446744073709551615 5 ifdef 612 2 612 7 18446744073709551615 11 __cplusplus 612 8 612 19 18446744073709551615 1 # 613 1 613 2 18446744073709551615 6 define 613 2 613 8 18446744073709551615 17 MOTOR_BRAKE_COAST 613 9 613 26 18446744073709551615 4 pros 613 27 613 31 18446744073709551615 2 :: 613 31 613 33 18446744073709551615 19 E_MOTOR_BRAKE_COAST 613 33 613 52 18446744073709551615 1 # 614 1 614 2 18446744073709551615 6 define 614 2 614 8 18446744073709551615 17 MOTOR_BRAKE_BRAKE 614 9 614 26 18446744073709551615 4 pros 614 27 614 31 18446744073709551615 2 :: 614 31 614 33 18446744073709551615 19 E_MOTOR_BRAKE_BRAKE 614 33 614 52 18446744073709551615 1 # 615 1 615 2 18446744073709551615 6 define 615 2 615 8 18446744073709551615 16 MOTOR_BRAKE_HOLD 615 9 615 25 18446744073709551615 4 pros 615 26 615 30 18446744073709551615 2 :: 615 30 615 32 18446744073709551615 18 E_MOTOR_BRAKE_HOLD 615 32 615 50 18446744073709551615 1 # 616 1 616 2 18446744073709551615 6 define 616 2 616 8 18446744073709551615 19 MOTOR_BRAKE_INVALID 616 9 616 28 18446744073709551615 4 pros 616 29 616 33 18446744073709551615 2 :: 616 33 616 35 18446744073709551615 21 E_MOTOR_BRAKE_INVALID 616 35 616 56 18446744073709551615 1 # 617 1 617 2 18446744073709551615 6 define 617 2 617 8 18446744073709551615 21 MOTOR_ENCODER_DEGREES 617 9 617 30 18446744073709551615 4 pros 617 31 617 35 18446744073709551615 2 :: 617 35 617 37 18446744073709551615 23 E_MOTOR_ENCODER_DEGREES 617 37 617 60 18446744073709551615 1 # 618 1 618 2 18446744073709551615 6 define 618 2 618 8 18446744073709551615 23 MOTOR_ENCODER_ROTATIONS 618 9 618 32 18446744073709551615 4 pros 618 33 618 37 18446744073709551615 2 :: 618 37 618 39 18446744073709551615 25 E_MOTOR_ENCODER_ROTATIONS 618 39 618 64 18446744073709551615 1 # 619 1 619 2 18446744073709551615 6 define 619 2 619 8 18446744073709551615 20 MOTOR_ENCODER_COUNTS 619 9 619 29 18446744073709551615 4 pros 619 30 619 34 18446744073709551615 2 :: 619 34 619 36 18446744073709551615 22 E_MOTOR_ENCODER_COUNTS 619 36 619 58 18446744073709551615 1 # 620 1 620 2 18446744073709551615 6 define 620 2 620 8 18446744073709551615 21 MOTOR_ENCODER_INVALID 620 9 620 30 18446744073709551615 4 pros 620 31 620 35 18446744073709551615 2 :: 620 35 620 37 18446744073709551615 23 E_MOTOR_ENCODER_INVALID 620 37 620 60 18446744073709551615 1 # 621 1 621 2 18446744073709551615 6 define 621 2 621 8 18446744073709551615 16 MOTOR_GEARSET_36 621 9 621 25 18446744073709551615 4 pros 621 26 621 30 18446744073709551615 2 :: 621 30 621 32 18446744073709551615 18 E_MOTOR_GEARSET_36 621 32 621 50 18446744073709551615 1 # 622 1 622 2 18446744073709551615 6 define 622 2 622 8 18446744073709551615 14 MOTOR_GEAR_RED 622 9 622 23 18446744073709551615 4 pros 622 24 622 28 18446744073709551615 2 :: 622 28 622 30 18446744073709551615 16 E_MOTOR_GEAR_RED 622 30 622 46 18446744073709551615 1 # 623 1 623 2 18446744073709551615 6 define 623 2 623 8 18446744073709551615 14 MOTOR_GEAR_100 623 9 623 23 18446744073709551615 4 pros 623 24 623 28 18446744073709551615 2 :: 623 28 623 30 18446744073709551615 16 E_MOTOR_GEAR_100 623 30 623 46 18446744073709551615 1 # 624 1 624 2 18446744073709551615 6 define 624 2 624 8 18446744073709551615 16 MOTOR_GEARSET_18 624 9 624 25 18446744073709551615 4 pros 624 26 624 30 18446744073709551615 2 :: 624 30 624 32 18446744073709551615 18 E_MOTOR_GEARSET_18 624 32 624 50 18446744073709551615 1 # 625 1 625 2 18446744073709551615 6 define 625 2 625 8 18446744073709551615 16 MOTOR_GEAR_GREEN 625 9 625 25 18446744073709551615 4 pros 625 26 625 30 18446744073709551615 2 :: 625 30 625 32 18446744073709551615 18 E_MOTOR_GEAR_GREEN 625 32 625 50 18446744073709551615 1 # 626 1 626 2 18446744073709551615 6 define 626 2 626 8 18446744073709551615 14 MOTOR_GEAR_200 626 9 626 23 18446744073709551615 4 pros 626 24 626 28 18446744073709551615 2 :: 626 28 626 30 18446744073709551615 16 E_MOTOR_GEAR_200 626 30 626 46 18446744073709551615 1 # 627 1 627 2 18446744073709551615 6 define 627 2 627 8 18446744073709551615 16 MOTOR_GEARSET_06 627 9 627 25 18446744073709551615 4 pros 627 26 627 30 18446744073709551615 2 :: 627 30 627 32 18446744073709551615 18 E_MOTOR_GEARSET_06 627 32 627 50 18446744073709551615 1 # 628 1 628 2 18446744073709551615 6 define 628 2 628 8 18446744073709551615 15 MOTOR_GEARSET_6 628 9 628 24 18446744073709551615 4 pros 628 25 628 29 18446744073709551615 2 :: 628 29 628 31 18446744073709551615 18 E_MOTOR_GEARSET_06 628 31 628 49 18446744073709551615 1 # 629 1 629 2 18446744073709551615 6 define 629 2 629 8 18446744073709551615 15 MOTOR_GEAR_BLUE 629 9 629 24 18446744073709551615 4 pros 629 25 629 29 18446744073709551615 2 :: 629 29 629 31 18446744073709551615 17 E_MOTOR_GEAR_BLUE 629 31 629 48 18446744073709551615 1 # 630 1 630 2 18446744073709551615 6 define 630 2 630 8 18446744073709551615 14 MOTOR_GEAR_600 630 9 630 23 18446744073709551615 4 pros 630 24 630 28 18446744073709551615 2 :: 630 28 630 30 18446744073709551615 16 E_MOTOR_GEAR_600 630 30 630 46 18446744073709551615 1 # 631 1 631 2 18446744073709551615 6 define 631 2 631 8 18446744073709551615 21 MOTOR_GEARSET_INVALID 631 9 631 30 18446744073709551615 4 pros 631 31 631 35 18446744073709551615 2 :: 631 35 631 37 18446744073709551615 23 E_MOTOR_GEARSET_INVALID 631 37 631 60 18446744073709551615 1 # 632 1 632 2 18446744073709551615 4 else 632 2 632 6 18446744073709551615 1 # 633 1 633 2 18446744073709551615 6 define 633 2 633 8 18446744073709551615 17 MOTOR_BRAKE_COAST 633 9 633 26 18446744073709551615 19 E_MOTOR_BRAKE_COAST 633 27 633 46 18446744073709551615 1 # 634 1 634 2 18446744073709551615 6 define 634 2 634 8 18446744073709551615 17 MOTOR_BRAKE_BRAKE 634 9 634 26 18446744073709551615 19 E_MOTOR_BRAKE_BRAKE 634 27 634 46 18446744073709551615 1 # 635 1 635 2 18446744073709551615 6 define 635 2 635 8 18446744073709551615 16 MOTOR_BRAKE_HOLD 635 9 635 25 18446744073709551615 18 E_MOTOR_BRAKE_HOLD 635 26 635 44 18446744073709551615 1 # 636 1 636 2 18446744073709551615 6 define 636 2 636 8 18446744073709551615 19 MOTOR_BRAKE_INVALID 636 9 636 28 18446744073709551615 21 E_MOTOR_BRAKE_INVALID 636 29 636 50 18446744073709551615 1 # 637 1 637 2 18446744073709551615 6 define 637 2 637 8 18446744073709551615 21 MOTOR_ENCODER_DEGREES 637 9 637 30 18446744073709551615 23 E_MOTOR_ENCODER_DEGREES 637 31 637 54 18446744073709551615 1 # 638 1 638 2 18446744073709551615 6 define 638 2 638 8 18446744073709551615 23 MOTOR_ENCODER_ROTATIONS 638 9 638 32 18446744073709551615 25 E_MOTOR_ENCODER_ROTATIONS 638 33 638 58 18446744073709551615 1 # 639 1 639 2 18446744073709551615 6 define 639 2 639 8 18446744073709551615 20 MOTOR_ENCODER_COUNTS 639 9 639 29 18446744073709551615 22 E_MOTOR_ENCODER_COUNTS 639 30 639 52 18446744073709551615 1 # 640 1 640 2 18446744073709551615 6 define 640 2 640 8 18446744073709551615 21 MOTOR_ENCODER_INVALID 640 9 640 30 18446744073709551615 23 E_MOTOR_ENCODER_INVALID 640 31 640 54 18446744073709551615 1 # 641 1 641 2 18446744073709551615 6 define 641 2 641 8 18446744073709551615 16 MOTOR_GEARSET_36 641 9 641 25 18446744073709551615 18 E_MOTOR_GEARSET_36 641 26 641 44 18446744073709551615 1 # 642 1 642 2 18446744073709551615 6 define 642 2 642 8 18446744073709551615 14 MOTOR_GEAR_RED 642 9 642 23 18446744073709551615 16 E_MOTOR_GEAR_RED 642 24 642 40 18446744073709551615 1 # 643 1 643 2 18446744073709551615 6 define 643 2 643 8 18446744073709551615 14 MOTOR_GEAR_100 643 9 643 23 18446744073709551615 16 E_MOTOR_GEAR_100 643 24 643 40 18446744073709551615 1 # 644 1 644 2 18446744073709551615 6 define 644 2 644 8 18446744073709551615 16 MOTOR_GEARSET_18 644 9 644 25 18446744073709551615 18 E_MOTOR_GEARSET_18 644 26 644 44 18446744073709551615 1 # 645 1 645 2 18446744073709551615 6 define 645 2 645 8 18446744073709551615 16 MOTOR_GEAR_GREEN 645 9 645 25 18446744073709551615 18 E_MOTOR_GEAR_GREEN 645 26 645 44 18446744073709551615 1 # 646 1 646 2 18446744073709551615 6 define 646 2 646 8 18446744073709551615 14 MOTOR_GEAR_200 646 9 646 23 18446744073709551615 16 E_MOTOR_GEAR_200 646 24 646 40 18446744073709551615 1 # 647 1 647 2 18446744073709551615 6 define 647 2 647 8 18446744073709551615 16 MOTOR_GEARSET_06 647 9 647 25 18446744073709551615 18 E_MOTOR_GEARSET_06 647 26 647 44 18446744073709551615 1 # 648 1 648 2 18446744073709551615 6 define 648 2 648 8 18446744073709551615 15 MOTOR_GEARSET_6 648 9 648 24 18446744073709551615 18 E_MOTOR_GEARSET_06 648 25 648 43 18446744073709551615 1 # 649 1 649 2 18446744073709551615 6 define 649 2 649 8 18446744073709551615 15 MOTOR_GEAR_BLUE 649 9 649 24 18446744073709551615 17 E_MOTOR_GEAR_BLUE 649 25 649 42 18446744073709551615 1 # 650 1 650 2 18446744073709551615 6 define 650 2 650 8 18446744073709551615 14 MOTOR_GEAR_600 650 9 650 23 18446744073709551615 16 E_MOTOR_GEAR_600 650 24 650 40 18446744073709551615 1 # 651 1 651 2 18446744073709551615 6 define 651 2 651 8 18446744073709551615 21 MOTOR_GEARSET_INVALID 651 9 651 30 18446744073709551615 23 E_MOTOR_GEARSET_INVALID 651 31 651 54 18446744073709551615 1 # 652 1 652 2 18446744073709551615 5 endif 652 2 652 7 18446744073709551615 1 # 653 1 653 2 18446744073709551615 5 endif 653 2 653 7 18446744073709551615 221 /**
 * Holds the information about a Motor's position or velocity PID controls.
 *
 * These values are in 4.4 format, meaning that a value of 0x20 represents 2.0,
 * 0x21 represents 2.0625, 0x22 represents 2.125, etc.
 */ 655 1 660 4 18446744073709551615 7 typedef 661 1 661 8 18446744073709551615 6 struct 661 9 661 15 18446744073709551615 16 motor_pid_full_s 661 16 661 32 101 1 { 661 33 661 34 18446744073709551615 7 uint8_t 662 2 662 9 4 2 kf 662 10 662 12 102 1 ; 662 12 662 13 18446744073709551615 27 // The feedforward constant 662 22 662 49 18446744073709551615 7 uint8_t 663 2 663 9 4 2 kp 663 10 663 12 103 1 ; 663 12 663 13 18446744073709551615 28 // The proportional constant 663 22 663 50 18446744073709551615 7 uint8_t 664 2 664 9 4 2 ki 664 10 664 12 104 1 ; 664 12 664 13 18446744073709551615 25 // The integral constants 664 22 664 47 18446744073709551615 7 uint8_t 665 2 665 9 4 2 kd 665 10 665 12 105 1 ; 665 12 665 13 18446744073709551615 26 // The derivative constant 665 22 665 48 18446744073709551615 7 uint8_t 666 2 666 9 4 6 filter 666 10 666 16 106 1 ; 666 16 666 17 18446744073709551615 57 // A constant used for filtering the profile acceleration 666 22 666 79 18446744073709551615 8 uint16_t 667 2 667 10 107 5 limit 667 11 667 16 108 1 ; 667 16 667 17 18446744073709551615 21 // The integral limit 667 22 667 43 18446744073709551615 7 uint8_t 668 2 668 9 4 9 threshold 668 10 668 19 109 1 ; 668 19 668 20 18446744073709551615 59 // The threshold for determining if a position movement has 668 22 668 81 18446744073709551615 56 // reached its goal. This has no effect for velocity PID 669 22 669 78 18446744073709551615 16 // calculations. 670 22 670 38 18446744073709551615 7 uint8_t 671 2 671 9 4 9 loopspeed 671 10 671 19 110 1 ; 671 19 671 20 18446744073709551615 53 // The rate at which the PID computation is run in ms 671 22 671 75 18446744073709551615 1 } 672 1 672 2 18446744073709551615 18 motor_pid_full_s_t 672 3 672 21 111 1 ; 672 21 672 22 18446744073709551615 222 /**
 * Holds just the constants for a Motor's position or velocity PID controls.
 *
 * These values are in 4.4 format, meaning that a value of 0x20 represents 2.0,
 * 0x21 represents 2.0625, 0x22 represents 2.125, etc.
 */ 674 1 679 4 18446744073709551615 7 typedef 680 1 680 8 18446744073709551615 6 struct 680 9 680 15 18446744073709551615 11 motor_pid_s 680 16 680 27 112 1 { 680 28 680 29 18446744073709551615 7 uint8_t 681 2 681 9 4 2 kf 681 10 681 12 113 1 ; 681 12 681 13 18446744073709551615 27 // The feedforward constant 681 15 681 42 18446744073709551615 7 uint8_t 682 2 682 9 4 2 kp 682 10 682 12 114 1 ; 682 12 682 13 18446744073709551615 28 // The proportional constant 682 15 682 43 18446744073709551615 7 uint8_t 683 2 683 9 4 2 ki 683 10 683 12 115 1 ; 683 12 683 13 18446744073709551615 25 // The integral constants 683 15 683 40 18446744073709551615 7 uint8_t 684 2 684 9 4 2 kd 684 10 684 12 116 1 ; 684 12 684 13 18446744073709551615 26 // The derivative constant 684 15 684 41 18446744073709551615 1 } 685 1 685 2 18446744073709551615 13 motor_pid_s_t 685 3 685 16 117 1 ; 685 16 685 17 18446744073709551615 1 # 687 1 687 2 18446744073709551615 5 ifdef 687 2 687 7 18446744073709551615 11 __cplusplus 687 8 687 19 18446744073709551615 9 namespace 688 1 688 10 18446744073709551615 1 c 688 11 688 12 1 1 { 688 13 688 14 18446744073709551615 1 # 689 1 689 2 18446744073709551615 5 endif 689 2 689 7 18446744073709551615 598 /**
 * Sets the position for the motor in its encoder units.
 *
 * This will be the future reference point for the motor's "absolute" position.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param position
 *        The new reference position in its encoder units
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 691 1 708 4 18446744073709551615 7 int32_t 709 1 709 8 2 23 motor_set_zero_position 709 9 709 32 118 1 ( 709 32 709 33 118 7 uint8_t 709 33 709 40 4 4 port 709 41 709 45 119 1 , 709 45 709 46 118 5 const 709 47 709 52 18446744073709551615 6 double 709 53 709 59 18446744073709551615 8 position 709 60 709 68 120 1 ) 709 68 709 69 118 1 ; 709 69 709 70 18446744073709551615 456 /**
 * Sets the "absolute" zero position of the motor to its current position.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 711 1 724 4 18446744073709551615 7 int32_t 725 1 725 8 2 19 motor_tare_position 725 9 725 28 121 1 ( 725 28 725 29 121 7 uint8_t 725 29 725 36 4 4 port 725 37 725 41 122 1 ) 725 41 725 42 121 1 ; 725 42 725 43 18446744073709551615 502 /**
 * Sets one of motor_brake_mode_e_t to the motor.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param mode
 *        The motor_brake_mode_e_t to set for the motor
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 727 1 742 4 18446744073709551615 7 int32_t 743 1 743 8 2 20 motor_set_brake_mode 743 9 743 29 123 1 ( 743 29 743 30 123 7 uint8_t 743 30 743 37 4 4 port 743 38 743 42 124 1 , 743 42 743 43 123 5 const 743 44 743 49 18446744073709551615 20 motor_brake_mode_e_t 743 50 743 70 82 4 mode 743 71 743 75 125 1 ) 743 75 743 76 123 1 ; 743 76 743 77 18446744073709551615 482 /**
 * Sets the current limit for the motor in mA.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param limit
 *        The new current limit in mA
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 745 1 760 4 18446744073709551615 7 int32_t 761 1 761 8 2 23 motor_set_current_limit 761 9 761 32 126 1 ( 761 32 761 33 126 7 uint8_t 761 33 761 40 4 4 port 761 41 761 45 127 1 , 761 45 761 46 126 5 const 761 47 761 52 18446744073709551615 7 int32_t 761 53 761 60 2 5 limit 761 61 761 66 128 1 ) 761 66 761 67 126 1 ; 761 67 761 68 18446744073709551615 497 /**
 * Sets one of motor_encoder_units_e_t for the motor encoder.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param units
 *        The new motor encoder units
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 763 1 778 4 18446744073709551615 7 int32_t 779 1 779 8 2 23 motor_set_encoder_units 779 9 779 32 129 1 ( 779 32 779 33 129 7 uint8_t 779 33 779 40 4 4 port 779 41 779 45 130 1 , 779 45 779 46 129 5 const 779 47 779 52 18446744073709551615 23 motor_encoder_units_e_t 779 53 779 76 88 5 units 779 77 779 82 131 1 ) 779 82 779 83 129 1 ; 779 83 779 84 18446744073709551615 479 /**
 * Sets one of motor_gearset_e_t for the motor.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param gearset
 *        The new motor gearset
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 781 1 796 4 18446744073709551615 7 int32_t 797 1 797 8 2 17 motor_set_gearing 797 9 797 26 132 1 ( 797 26 797 27 132 7 uint8_t 797 27 797 34 4 4 port 797 35 797 39 133 1 , 797 39 797 40 132 5 const 797 41 797 46 18446744073709551615 17 motor_gearset_e_t 797 47 797 64 100 7 gearset 797 65 797 72 134 1 ) 797 72 797 73 132 1 ; 797 73 797 74 18446744073709551615 729 /**
 * Takes in floating point values and returns a properly formatted pid struct.
 * The motor_pid_s_t struct is in 4.4 format, i.e. 0x20 is 2.0, 0x21 is 2.0625,
 * etc.
 * This function will convert the floating point values to the nearest 4.4
 * value.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param kf
 *        The feedforward constant
 * \param kp
 *        The proportional constant
 * \param ki
 *        The integral constant
 * \param kd
 *        The derivative constant
 *
 * \return A motor_pid_s_t struct formatted properly in 4.4.
 */ 799 1 821 4 18446744073709551615 13 motor_pid_s_t 822 1 822 14 117 13 __attribute__ 822 15 822 28 18446744073709551615 1 ( 822 28 822 29 135 1 ( 822 29 822 30 135 10 deprecated 822 30 822 40 18446744073709551615 1 ( 822 40 822 41 18446744073709551615 87 "Changing these values is not supported by VEX and may lead to permanent motor damage." 822 41 822 128 18446744073709551615 1 ) 822 128 822 129 18446744073709551615 1 ) 822 129 822 130 135 1 ) 822 130 822 131 135 17 motor_convert_pid 822 132 822 149 135 1 ( 822 149 822 150 135 6 double 822 150 822 156 18446744073709551615 2 kf 822 157 822 159 136 1 , 822 159 822 160 135 6 double 822 161 822 167 18446744073709551615 2 kp 822 168 822 170 137 1 , 822 170 822 171 135 6 double 822 172 822 178 18446744073709551615 2 ki 822 179 822 181 138 1 , 822 181 822 182 135 6 double 822 183 822 189 18446744073709551615 2 kd 822 190 822 192 139 1 ) 822 192 822 193 135 1 ; 822 193 822 194 18446744073709551615 1102 /**
 * Takes in floating point values and returns a properly formatted pid struct.
 * The motor_pid_s_t struct is in 4.4 format, i.e. 0x20 is 2.0, 0x21 is 2.0625,
 * etc.
 * This function will convert the floating point values to the nearest 4.4
 * value.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param kf
 *        The feedforward constant
 * \param kp
 *        The proportional constant
 * \param ki
 *        The integral constant
 * \param kd
 *        The derivative constant
 * \param filter
 *        A constant used for filtering the profile acceleration
 * \param limit
 *        The integral limit
 * \param threshold
 *        The threshold for determining if a position movement has reached its
 *        goal. This has no effect for velocity PID calculations.
 * \param loopspeed
 *        The rate at which the PID computation is run in ms
 *
 * \return A motor_pid_s_t struct formatted properly in 4.4.
 */ 824 1 855 4 18446744073709551615 18 motor_pid_full_s_t 856 1 856 19 111 13 __attribute__ 856 20 856 33 18446744073709551615 1 ( 856 33 856 34 140 1 ( 856 34 856 35 140 10 deprecated 856 35 856 45 18446744073709551615 1 ( 856 45 856 46 18446744073709551615 87 "Changing these values is not supported by VEX and may lead to permanent motor damage." 856 46 856 133 18446744073709551615 1 ) 856 133 856 134 18446744073709551615 1 ) 856 134 856 135 140 1 ) 856 135 856 136 140 22 motor_convert_pid_full 856 137 856 159 140 1 ( 856 159 856 160 140 6 double 856 160 856 166 18446744073709551615 2 kf 856 167 856 169 141 1 , 856 169 856 170 140 6 double 856 171 856 177 18446744073709551615 2 kp 856 178 856 180 142 1 , 856 180 856 181 140 6 double 856 182 856 188 18446744073709551615 2 ki 856 189 856 191 143 1 , 856 191 856 192 140 6 double 856 193 856 199 18446744073709551615 2 kd 856 200 856 202 144 1 , 856 202 856 203 140 6 double 856 204 856 210 18446744073709551615 6 filter 856 211 856 217 145 1 , 856 217 856 218 140 6 double 856 219 856 225 18446744073709551615 5 limit 856 226 856 231 146 1 , 856 231 856 232 140 6 double 857 43 857 49 18446744073709551615 9 threshold 857 50 857 59 147 1 , 857 59 857 60 140 6 double 857 61 857 67 18446744073709551615 9 loopspeed 857 68 857 77 148 1 ) 857 77 857 78 140 1 ; 857 78 857 79 18446744073709551615 776 /**
 * Sets one of motor_pid_s_t for the motor. This intended to just modify the
 * main PID constants.
 *
 * Only non-zero values of the struct will change the existing motor constants.
 *
 * \note This feature is in beta, it is advised to use caution when modifying
 * the PID values. The motor could be damaged by particularly large constants.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param pid
 *        The new motor PID constants
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 859 1 880 4 18446744073709551615 7 int32_t 881 1 881 8 2 13 __attribute__ 881 9 881 22 18446744073709551615 1 ( 881 22 881 23 149 1 ( 881 23 881 24 149 10 deprecated 881 24 881 34 18446744073709551615 1 ( 881 34 881 35 18446744073709551615 87 "Changing these values is not supported by VEX and may lead to permanent motor damage." 881 35 881 122 18446744073709551615 1 ) 881 122 881 123 18446744073709551615 1 ) 881 123 881 124 149 1 ) 881 124 881 125 149 17 motor_set_pos_pid 881 126 881 143 149 1 ( 881 143 881 144 149 7 uint8_t 881 144 881 151 4 4 port 881 152 881 156 150 1 , 881 156 881 157 149 5 const 881 158 881 163 18446744073709551615 13 motor_pid_s_t 881 164 881 177 117 3 pid 881 178 881 181 151 1 ) 881 181 881 182 149 1 ; 881 182 881 183 18446744073709551615 725 /**
 * Sets one of motor_pid_full_s_t for the motor.
 *
 * Only non-zero values of the struct will change the existing motor constants.
 *
 * \note This feature is in beta, it is advised to use caution when modifying
 * the PID values. The motor could be damaged by particularly large constants.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param pid
 *        The new motor PID constants
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 883 1 903 4 18446744073709551615 7 int32_t 904 1 904 8 2 13 __attribute__ 904 9 904 22 18446744073709551615 1 ( 904 22 904 23 152 1 ( 904 23 904 24 152 10 deprecated 904 24 904 34 18446744073709551615 1 ( 904 34 904 35 18446744073709551615 87 "Changing these values is not supported by VEX and may lead to permanent motor damage." 904 35 904 122 18446744073709551615 1 ) 904 122 904 123 18446744073709551615 1 ) 904 123 904 124 152 1 ) 904 124 904 125 152 22 motor_set_pos_pid_full 904 126 904 148 152 1 ( 904 148 904 149 152 7 uint8_t 904 149 904 156 4 4 port 904 157 904 161 153 1 , 904 161 904 162 152 5 const 904 163 904 168 18446744073709551615 18 motor_pid_full_s_t 904 169 904 187 111 3 pid 904 188 904 191 154 1 ) 904 191 904 192 152 1 ; 904 192 904 193 18446744073709551615 776 /**
 * Sets one of motor_pid_s_t for the motor. This intended to just modify the
 * main PID constants.
 *
 * Only non-zero values of the struct will change the existing motor constants.
 *
 * \note This feature is in beta, it is advised to use caution when modifying
 * the PID values. The motor could be damaged by particularly large constants.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param pid
 *        The new motor PID constants
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 906 1 927 4 18446744073709551615 7 int32_t 928 1 928 8 2 13 __attribute__ 928 9 928 22 18446744073709551615 1 ( 928 22 928 23 155 1 ( 928 23 928 24 155 10 deprecated 928 24 928 34 18446744073709551615 1 ( 928 34 928 35 18446744073709551615 87 "Changing these values is not supported by VEX and may lead to permanent motor damage." 928 35 928 122 18446744073709551615 1 ) 928 122 928 123 18446744073709551615 1 ) 928 123 928 124 155 1 ) 928 124 928 125 155 17 motor_set_vel_pid 928 126 928 143 155 1 ( 928 143 928 144 155 7 uint8_t 928 144 928 151 4 4 port 928 152 928 156 156 1 , 928 156 928 157 155 5 const 928 158 928 163 18446744073709551615 13 motor_pid_s_t 928 164 928 177 117 3 pid 928 178 928 181 157 1 ) 928 181 928 182 155 1 ; 928 182 928 183 18446744073709551615 725 /**
 * Sets one of motor_pid_full_s_t for the motor.
 *
 * Only non-zero values of the struct will change the existing motor constants.
 *
 * \note This feature is in beta, it is advised to use caution when modifying
 * the PID values. The motor could be damaged by particularly large constants.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param pid
 *        The new motor PID constants
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 930 1 950 4 18446744073709551615 7 int32_t 951 1 951 8 2 13 __attribute__ 951 9 951 22 18446744073709551615 1 ( 951 22 951 23 158 1 ( 951 23 951 24 158 10 deprecated 951 24 951 34 18446744073709551615 1 ( 951 34 951 35 18446744073709551615 87 "Changing these values is not supported by VEX and may lead to permanent motor damage." 951 35 951 122 18446744073709551615 1 ) 951 122 951 123 18446744073709551615 1 ) 951 123 951 124 158 1 ) 951 124 951 125 158 22 motor_set_vel_pid_full 951 126 951 148 158 1 ( 951 148 951 149 158 7 uint8_t 951 149 951 156 4 4 port 951 157 951 161 159 1 , 951 161 951 162 158 5 const 951 163 951 168 18446744073709551615 18 motor_pid_full_s_t 951 169 951 187 111 3 pid 951 188 951 191 160 1 ) 951 191 951 192 158 1 ; 951 192 951 193 18446744073709551615 570 /**
 * Sets the reverse flag for the motor.
 *
 * This will invert its movements and the values returned for its position.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param reverse
 *        True reverses the motor, false is default
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 953 1 970 4 18446744073709551615 7 int32_t 971 1 971 8 2 18 motor_set_reversed 971 9 971 27 161 1 ( 971 27 971 28 161 7 uint8_t 971 28 971 35 4 4 port 971 36 971 40 162 1 , 971 40 971 41 161 5 const 971 42 971 47 18446744073709551615 4 bool 971 48 971 52 18446744073709551615 7 reverse 971 53 971 60 163 1 ) 971 60 971 61 161 1 ; 971 61 971 62 18446744073709551615 488 /**
 * Sets the voltage limit for the motor in Volts.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 * \param limit
 *        The new voltage limit in Volts
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 973 1 988 4 18446744073709551615 7 int32_t 989 1 989 8 2 23 motor_set_voltage_limit 989 9 989 32 164 1 ( 989 32 989 33 164 7 uint8_t 989 33 989 40 4 4 port 989 41 989 45 165 1 , 989 45 989 46 164 5 const 989 47 989 52 18446744073709551615 7 int32_t 989 53 989 60 2 5 limit 989 61 989 66 166 1 ) 989 66 989 67 164 1 ; 989 67 989 68 18446744073709551615 481 /**
 * Gets the brake mode that was set for the motor.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return One of motor_brake_mode_e_t, according to what was set for the motor,
 * or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.
 */ 991 1 1004 4 18446744073709551615 20 motor_brake_mode_e_t 1005 1 1005 21 82 20 motor_get_brake_mode 1005 22 1005 42 167 1 ( 1005 42 1005 43 167 7 uint8_t 1005 43 1005 50 4 4 port 1005 51 1005 55 168 1 ) 1005 55 1005 56 167 1 ; 1005 56 1005 57 18446744073709551615 462 /**
 * Gets the current limit for the motor in mA.
 *
 * The default value is 2500 mA.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The motor's current limit in mA or PROS_ERR if the operation failed,
 * setting errno.
 */ 1007 1 1022 4 18446744073709551615 7 int32_t 1023 1 1023 8 2 23 motor_get_current_limit 1023 9 1023 32 169 1 ( 1023 32 1023 33 169 7 uint8_t 1023 33 1023 40 4 4 port 1023 41 1023 45 170 1 ) 1023 45 1023 46 169 1 ; 1023 46 1023 47 18446744073709551615 472 /**
 * Gets the encoder units that were set for the motor.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return One of motor_encoder_units_e_t according to what is set for the motor
 * or E_MOTOR_ENCODER_INVALID if the operation failed.
 */ 1025 1 1038 4 18446744073709551615 23 motor_encoder_units_e_t 1039 1 1039 24 88 23 motor_get_encoder_units 1039 25 1039 48 171 1 ( 1039 48 1039 49 171 7 uint8_t 1039 49 1039 56 4 4 port 1039 57 1039 61 172 1 ) 1039 61 1039 62 171 1 ; 1039 62 1039 63 18446744073709551615 454 /**
 * Gets the gearset that was set for the motor.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return One of motor_gearset_e_t according to what is set for the motor,
 * or E_GEARSET_INVALID if the operation failed.
 */ 1041 1 1054 4 18446744073709551615 17 motor_gearset_e_t 1055 1 1055 18 100 17 motor_get_gearing 1055 19 1055 36 173 1 ( 1055 36 1055 37 173 7 uint8_t 1055 37 1055 44 4 4 port 1055 45 1055 49 174 1 ) 1055 49 1055 50 173 1 ; 1055 50 1055 51 18446744073709551615 700 /**
 * Gets the position PID that was set for the motor. This function will return
 * zero for all of the parameters if the motor_set_pos_pid() or
 * motor_set_pos_pid_full() functions have not been used.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * Additionally, in an error state all values of the returned struct are set
 * to their negative maximum values.
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return A motor_pid_full_s_t containing the position PID constants last set
 * to the given motor
 */ 1057 1 1075 4 18446744073709551615 18 motor_pid_full_s_t 1076 1 1076 19 111 13 __attribute__ 1076 20 1076 33 18446744073709551615 1 ( 1076 33 1076 34 175 1 ( 1076 34 1076 35 175 10 deprecated 1076 35 1076 45 18446744073709551615 1 ( 1076 45 1076 46 18446744073709551615 87 "Changing these values is not supported by VEX and may lead to permanent motor damage." 1076 46 1076 133 18446744073709551615 1 ) 1076 133 1076 134 18446744073709551615 1 ) 1076 134 1076 135 175 1 ) 1076 135 1076 136 175 17 motor_get_pos_pid 1076 137 1076 154 175 1 ( 1076 154 1076 155 175 7 uint8_t 1076 155 1076 162 4 4 port 1076 163 1076 167 176 1 ) 1076 167 1076 168 175 1 ; 1076 168 1076 169 18446744073709551615 700 /**
 * Gets the velocity PID that was set for the motor. This function will return
 * zero for all of the parameters if the motor_set_vel_pid() or
 * motor_set_vel_pid_full() functions have not been used.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * Additionally, in an error state all values of the returned struct are set
 * to their negative maximum values.
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return A motor_pid_full_s_t containing the velocity PID constants last set
 * to the given motor
 */ 1078 1 1096 4 18446744073709551615 18 motor_pid_full_s_t 1097 1 1097 19 111 13 __attribute__ 1097 20 1097 33 18446744073709551615 1 ( 1097 33 1097 34 177 1 ( 1097 34 1097 35 177 10 deprecated 1097 35 1097 45 18446744073709551615 1 ( 1097 45 1097 46 18446744073709551615 87 "Changing these values is not supported by VEX and may lead to permanent motor damage." 1097 46 1097 133 18446744073709551615 1 ) 1097 133 1097 134 18446744073709551615 1 ) 1097 134 1097 135 177 1 ) 1097 135 1097 136 177 17 motor_get_vel_pid 1097 137 1097 154 177 1 ( 1097 154 1097 155 177 7 uint8_t 1097 155 1097 162 4 4 port 1097 163 1097 167 178 1 ) 1097 167 1097 168 177 1 ; 1097 168 1097 169 18446744073709551615 482 /**
 * Gets the operation direction of the motor as set by the user.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return 1 if the motor has been reversed and 0 if the motor was not reversed,
 * or PROS_ERR if the operation failed, setting errno.
 */ 1099 1 1112 4 18446744073709551615 7 int32_t 1113 1 1113 8 2 17 motor_is_reversed 1113 9 1113 26 179 1 ( 1113 26 1113 27 179 7 uint8_t 1113 27 1113 34 4 4 port 1113 35 1113 39 180 1 ) 1113 39 1113 40 179 1 ; 1113 40 1113 41 18446744073709551615 524 /**
 * Gets the voltage limit set by the user.
 *
 * Default value is 0V, which means that there is no software limitation imposed
 * on the voltage.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of V5 ports (1-21).
 * ENODEV - The port cannot be configured as a motor
 *
 * \param port
 *        The V5 port number from 1-21
 *
 * \return The motor's voltage limit in V or PROS_ERR if the operation failed,
 * setting errno.
 */ 1115 1 1131 4 18446744073709551615 7 int32_t 1132 1 1132 8 2 23 motor_get_voltage_limit 1132 9 1132 32 181 1 ( 1132 32 1132 33 181 7 uint8_t 1132 33 1132 40 4 4 port 1132 41 1132 45 182 1 ) 1132 45 1132 46 181 1 ; 1132 46 1132 47 18446744073709551615 1 # 1134 1 1134 2 18446744073709551615 5 ifdef 1134 2 1134 7 18446744073709551615 11 __cplusplus 1134 8 1134 19 18446744073709551615 1 } 1135 1 1135 2 18446744073709551615 14 // namespace c 1135 4 1135 18 18446744073709551615 1 } 1136 1 1136 2 18446744073709551615 17 // namespace pros 1136 4 1136 21 18446744073709551615 1 } 1137 1 1137 2 18446744073709551615 1 # 1138 1 1138 2 18446744073709551615 5 endif 1138 2 1138 7 18446744073709551615 1 # 1140 1 1140 2 18446744073709551615 5 endif 1140 2 1140 7 18446744073709551615 18 // _PROS_MOTORS_H_ 1140 9 1140 27 18446744073709551615 0 0 183 0 0 0 22 0 0 1 13 0 4 pros 22 1 13 0 6 c:pros 20 1 13 0 7 int32_t 8 1 13 0 17 motor_move:c:pros 20 1 13 0 7 uint8_t 10 1 13 0 68 57:28:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 68 57:42:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 18 motor_brake:c:pros 10 1 13 0 68 78:29:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 26 motor_move_absolute:c:pros 10 1 13 0 69 104:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 104:56:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 104:80:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 26 motor_move_relative:c:pros 10 1 13 0 69 132:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 132:56:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 132:80:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 26 motor_move_velocity:c:pros 10 1 13 0 69 157:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 157:57:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 25 motor_move_voltage:c:pros 10 1 13 0 69 175:36:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 175:56:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 37 motor_modify_profiled_velocity:c:pros 10 1 13 0 69 196:48:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 196:68:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 32 motor_get_target_position:c:pros 10 1 13 0 69 212:42:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 32 motor_get_target_velocity:c:pros 10 1 13 0 69 228:43:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 32 motor_get_actual_velocity:c:pros 10 1 13 0 69 250:42:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 29 motor_get_current_draw:c:pros 10 1 13 0 69 266:40:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 26 motor_get_direction:c:pros 10 1 13 0 69 282:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 27 motor_get_efficiency:c:pros 10 1 13 0 69 302:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 28 motor_is_over_current:c:pros 10 1 13 0 69 318:39:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 25 motor_is_over_temp:c:pros 10 1 13 0 69 334:36:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 23 motor_is_stopped:c:pros 10 1 13 0 69 349:34:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 35 motor_get_zero_position_flag:c:pros 10 1 13 0 69 365:46:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 5 1 13 0 18 motor_fault_e:pros 7 1 13 0 42 E_MOTOR_FAULT_NO_FAULTS:motor_fault_e:pros 7 1 13 0 48 E_MOTOR_FAULT_MOTOR_OVER_TEMP:motor_fault_e:pros 7 1 13 0 45 E_MOTOR_FAULT_DRIVER_FAULT:motor_fault_e:pros 7 1 13 0 45 E_MOTOR_FAULT_OVER_CURRENT:motor_fault_e:pros 7 1 13 0 49 E_MOTOR_FAULT_DRV_OVER_CURRENT:motor_fault_e:pros 20 1 13 0 20 motor_fault_e_t:pros 20 1 13 0 8 uint32_t 8 1 13 0 23 motor_get_faults:c:pros 10 1 13 0 69 414:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 5 1 13 0 17 motor_flag_e:pros 7 1 13 0 36 E_MOTOR_FLAGS_NONE:motor_flag_e:pros 7 1 13 0 36 E_MOTOR_FLAGS_BUSY:motor_flag_e:pros 7 1 13 0 45 E_MOTOR_FLAGS_ZERO_VELOCITY:motor_flag_e:pros 7 1 13 0 45 E_MOTOR_FLAGS_ZERO_POSITION:motor_flag_e:pros 20 1 13 0 19 motor_flag_e_t:pros 8 1 13 0 22 motor_get_flags:c:pros 10 1 13 0 69 460:34:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 29 motor_get_raw_position:c:pros 10 1 13 0 69 480:40:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 480:62:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 25 motor_get_position:c:pros 10 1 13 0 69 496:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 22 motor_get_power:c:pros 10 1 13 0 69 512:32:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 28 motor_get_temperature:c:pros 10 1 13 0 69 528:38:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 23 motor_get_torque:c:pros 10 1 13 0 69 544:33:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 24 motor_get_voltage:c:pros 10 1 13 0 69 560:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 5 1 13 0 23 motor_brake_mode_e:pros 7 1 13 0 43 E_MOTOR_BRAKE_COAST:motor_brake_mode_e:pros 7 1 13 0 43 E_MOTOR_BRAKE_BRAKE:motor_brake_mode_e:pros 7 1 13 0 42 E_MOTOR_BRAKE_HOLD:motor_brake_mode_e:pros 7 1 13 0 45 E_MOTOR_BRAKE_INVALID:motor_brake_mode_e:pros 20 1 13 0 25 motor_brake_mode_e_t:pros 5 1 13 0 26 motor_encoder_units_e:pros 7 1 13 0 50 E_MOTOR_ENCODER_DEGREES:motor_encoder_units_e:pros 7 1 13 0 52 E_MOTOR_ENCODER_ROTATIONS:motor_encoder_units_e:pros 7 1 13 0 49 E_MOTOR_ENCODER_COUNTS:motor_encoder_units_e:pros 7 1 13 0 50 E_MOTOR_ENCODER_INVALID:motor_encoder_units_e:pros 20 1 13 0 28 motor_encoder_units_e_t:pros 5 1 13 0 20 motor_gearset_e:pros 7 1 13 0 39 E_MOTOR_GEARSET_36:motor_gearset_e:pros 7 1 13 0 37 E_MOTOR_GEAR_RED:motor_gearset_e:pros 7 1 13 0 37 E_MOTOR_GEAR_100:motor_gearset_e:pros 7 1 13 0 39 E_MOTOR_GEARSET_18:motor_gearset_e:pros 7 1 13 0 39 E_MOTOR_GEAR_GREEN:motor_gearset_e:pros 7 1 13 0 37 E_MOTOR_GEAR_200:motor_gearset_e:pros 7 1 13 0 39 E_MOTOR_GEARSET_06:motor_gearset_e:pros 7 1 13 0 38 E_MOTOR_GEAR_BLUE:motor_gearset_e:pros 7 1 13 0 37 E_MOTOR_GEAR_600:motor_gearset_e:pros 7 1 13 0 44 E_MOTOR_GEARSET_INVALID:motor_gearset_e:pros 20 1 13 0 22 motor_gearset_e_t:pros 2 1 13 0 21 motor_pid_full_s:pros 6 1 13 0 24 kf:motor_pid_full_s:pros 6 1 13 0 24 kp:motor_pid_full_s:pros 6 1 13 0 24 ki:motor_pid_full_s:pros 6 1 13 0 24 kd:motor_pid_full_s:pros 6 1 13 0 28 filter:motor_pid_full_s:pros 20 1 13 0 8 uint16_t 6 1 13 0 27 limit:motor_pid_full_s:pros 6 1 13 0 31 threshold:motor_pid_full_s:pros 6 1 13 0 31 loopspeed:motor_pid_full_s:pros 20 1 13 0 23 motor_pid_full_s_t:pros 2 1 13 0 16 motor_pid_s:pros 6 1 13 0 19 kf:motor_pid_s:pros 6 1 13 0 19 kp:motor_pid_s:pros 6 1 13 0 19 ki:motor_pid_s:pros 6 1 13 0 19 kd:motor_pid_s:pros 20 1 13 0 18 motor_pid_s_t:pros 8 1 13 0 30 motor_set_zero_position:c:pros 10 1 13 0 69 709:41:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 709:60:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 26 motor_tare_position:c:pros 10 1 13 0 69 725:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 27 motor_set_brake_mode:c:pros 10 1 13 0 69 743:38:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 743:71:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 30 motor_set_current_limit:c:pros 10 1 13 0 69 761:41:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 761:61:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 30 motor_set_encoder_units:c:pros 10 1 13 0 69 779:41:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 779:77:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 24 motor_set_gearing:c:pros 10 1 13 0 69 797:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 797:65:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 24 motor_convert_pid:c:pros 10 1 13 0 70 822:157:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 822:168:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 822:179:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 822:190:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 29 motor_convert_pid_full:c:pros 10 1 13 0 70 856:167:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 856:178:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 856:189:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 856:200:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 856:211:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 856:226:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 857:50:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 857:68:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 24 motor_set_pos_pid:c:pros 10 1 13 0 70 881:152:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 881:178:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 29 motor_set_pos_pid_full:c:pros 10 1 13 0 70 904:157:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 904:188:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 24 motor_set_vel_pid:c:pros 10 1 13 0 70 928:152:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 928:178:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 29 motor_set_vel_pid_full:c:pros 10 1 13 0 70 951:157:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 70 951:188:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 25 motor_set_reversed:c:pros 10 1 13 0 69 971:36:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 971:53:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 30 motor_set_voltage_limit:c:pros 10 1 13 0 69 989:41:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 10 1 13 0 69 989:61:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 27 motor_get_brake_mode:c:pros 10 1 13 0 70 1005:51:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 30 motor_get_current_limit:c:pros 10 1 13 0 70 1023:41:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 30 motor_get_encoder_units:c:pros 10 1 13 0 70 1039:57:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 24 motor_get_gearing:c:pros 10 1 13 0 70 1055:45:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 24 motor_get_pos_pid:c:pros 10 1 13 0 71 1076:163:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 24 motor_get_vel_pid:c:pros 10 1 13 0 71 1097:163:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 24 motor_is_reversed:c:pros 10 1 13 0 70 1113:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 8 1 13 0 30 motor_get_voltage_limit:c:pros 10 1 13 0 70 1132:41:/home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 0 0 1 0 0 0 62 /home/bluecore/Desktop/Pros/Main Project/include/pros/motors.h 1698321192