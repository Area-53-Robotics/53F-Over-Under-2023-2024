22 serialization::archive 19 0 0 0 0 40 /home/bluecore/Desktop/Pros/Main Project 40 /home/bluecore/Desktop/Pros/Main Project 0 0 509 0 0 0 570 /**
 * \file pros/ext_adi.h
 *
 * Contains prototypes for interfacing with the 3-Wire Expander.
 *
 * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/adi.html to learn more.
 *
 * This file should not be modified by users, since it gets replaced whenever
 * a kernel upgrade occurs.
 *
 * \copyright Copyright (c) 2017-2023, Purdue University ACM SIGBots.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */ 1 1 16 4 18446744073709551615 1 # 18 1 18 2 18446744073709551615 6 ifndef 18 2 18 8 18446744073709551615 16 _PROS_EXT_ADI_H_ 18 9 18 25 18446744073709551615 1 # 19 1 19 2 18446744073709551615 6 define 19 2 19 8 18446744073709551615 16 _PROS_EXT_ADI_H_ 19 9 19 25 18446744073709551615 1 # 21 1 21 2 18446744073709551615 7 include 21 2 21 9 18446744073709551615 1 < 21 10 21 11 18446744073709551615 7 stdbool 21 11 21 18 18446744073709551615 1 . 21 18 21 19 18446744073709551615 1 h 21 19 21 20 18446744073709551615 1 > 21 20 21 21 18446744073709551615 1 # 22 1 22 2 18446744073709551615 7 include 22 2 22 9 18446744073709551615 1 < 22 10 22 11 18446744073709551615 6 stdint 22 11 22 17 18446744073709551615 1 . 22 17 22 18 18446744073709551615 1 h 22 18 22 19 18446744073709551615 1 > 22 19 22 20 18446744073709551615 1 # 24 1 24 2 18446744073709551615 7 include 24 2 24 9 18446744073709551615 7 "adi.h" 24 10 24 17 18446744073709551615 1 # 25 1 25 2 18446744073709551615 7 include 25 2 25 9 18446744073709551615 12 "pros/adi.h" 25 10 25 22 18446744073709551615 1 # 26 1 26 2 18446744073709551615 6 ifndef 26 2 26 8 18446744073709551615 8 PROS_ERR 26 9 26 17 18446744073709551615 1 # 27 1 27 2 18446744073709551615 6 define 27 2 27 8 18446744073709551615 8 PROS_ERR 27 9 27 17 18446744073709551615 1 ( 27 18 27 19 18446744073709551615 9 INT32_MAX 27 19 27 28 18446744073709551615 1 ) 27 28 27 29 18446744073709551615 1 # 28 1 28 2 18446744073709551615 5 endif 28 2 28 7 18446744073709551615 1 # 30 1 30 2 18446744073709551615 5 ifdef 30 2 30 7 18446744073709551615 11 __cplusplus 30 8 30 19 18446744073709551615 6 extern 31 1 31 7 18446744073709551615 3 "C" 31 8 31 11 18446744073709551615 1 { 31 12 31 13 18446744073709551615 9 namespace 32 1 32 10 18446744073709551615 4 pros 32 11 32 15 0 1 { 32 16 32 17 18446744073709551615 1 # 33 1 33 2 18446744073709551615 5 endif 33 2 33 7 18446744073709551615 1 # 35 1 35 2 18446744073709551615 5 ifdef 35 2 35 7 18446744073709551615 11 __cplusplus 35 8 35 19 18446744073709551615 9 namespace 36 1 36 10 18446744073709551615 1 c 36 11 36 12 1 1 { 36 13 36 14 18446744073709551615 1 # 37 1 37 2 18446744073709551615 5 endif 37 2 37 7 18446744073709551615 80 /******************************************************************************/ 39 1 39 81 18446744073709551615 80 /**                         General ADI Use Functions                        **/ 40 1 40 81 18446744073709551615 80 /**                                                                          **/ 41 1 41 81 18446744073709551615 80 /**       These functions allow for interaction with any ADI port type       **/ 42 1 42 81 18446744073709551615 80 /******************************************************************************/ 43 1 43 81 18446744073709551615 565 /**
 * Gets the configuration for the given ADI port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return
 *        the configuration
 *
 * \return The ADI configuration for the given port
 */ 45 1 60 4 18446744073709551615 19 adi_port_config_e_t 61 1 61 20 2 23 ext_adi_port_get_config 61 21 61 44 3 1 ( 61 44 61 45 3 7 uint8_t 61 45 61 52 4 10 smart_port 61 53 61 63 5 1 , 61 63 61 64 3 7 uint8_t 61 65 61 72 4 8 adi_port 61 73 61 81 6 1 ) 61 81 61 82 3 1 ; 61 82 61 83 18446744073709551615 551 /**
 * Gets the value for the given ADI port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return
 *        the configuration
 *
 * \return The value stored for the given port
 */ 63 1 78 4 18446744073709551615 7 int32_t 79 1 79 8 7 22 ext_adi_port_get_value 79 9 79 31 8 1 ( 79 31 79 32 8 7 uint8_t 79 32 79 39 4 10 smart_port 79 40 79 50 9 1 , 79 50 79 51 8 7 uint8_t 79 52 79 59 4 8 adi_port 79 60 79 68 10 1 ) 79 68 79 69 8 1 ; 79 69 79 70 18446744073709551615 645 /**
 * Configures an ADI port to act as a given sensor type.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
 * \param type
 *        The configuration type for the port
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 81 1 98 4 18446744073709551615 7 int32_t 99 1 99 8 7 23 ext_adi_port_set_config 99 9 99 32 11 1 ( 99 32 99 33 11 7 uint8_t 99 33 99 40 4 10 smart_port 99 41 99 51 12 1 , 99 51 99 52 11 7 uint8_t 99 53 99 60 4 8 adi_port 99 61 99 69 13 1 , 99 69 99 70 11 19 adi_port_config_e_t 99 71 99 90 2 4 type 99 91 99 95 14 1 ) 99 95 99 96 11 1 ; 99 96 99 97 18446744073709551615 787 /**
 * Sets the value for the given ADI port.
 *
 * This only works on ports configured as outputs, and the behavior will change
 * depending on the configuration of the port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value
 *        will be set
 * \param value
 *        The value to set the ADI port to
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 101 1 122 4 18446744073709551615 7 int32_t 123 1 123 8 7 22 ext_adi_port_set_value 123 9 123 31 15 1 ( 123 31 123 32 15 7 uint8_t 123 32 123 39 4 10 smart_port 123 40 123 50 16 1 , 123 50 123 51 15 7 uint8_t 123 52 123 59 4 8 adi_port 123 60 123 68 17 1 , 123 68 123 69 15 7 int32_t 123 70 123 77 7 5 value 123 78 123 83 18 1 ) 123 83 123 84 15 1 ; 123 84 123 85 18446744073709551615 1162 /**
 * Calibrates the analog sensor on the specified port and returns the new
 * calibration value.
 *
 * This method assumes that the true sensor value is not actively changing at
 * this time and computes an average from approximately 500 samples, 1 ms apart,
 * for a 0.5 s period of calibration. The average value thus calculated is
 * returned and stored for later calls to the adi_analog_read_calibrated() and
 * adi_analog_read_calibrated_HR() functions. These functions will return
 * the difference between this value and the current sensor value when called.
 *
 * Do not use this function when the sensor value might be unstable
 * (gyro rotation, accelerometer movement).
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port to calibrate (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return The average sensor value computed by this function
 */ 125 1 150 4 18446744073709551615 7 int32_t 151 1 151 8 7 24 ext_adi_analog_calibrate 151 9 151 33 19 1 ( 151 33 151 34 19 7 uint8_t 151 34 151 41 4 10 smart_port 151 42 151 52 20 1 , 151 52 151 53 19 7 uint8_t 151 54 151 61 4 8 adi_port 151 62 151 70 21 1 ) 151 70 151 71 19 1 ; 151 71 151 72 18446744073709551615 820 /**
 * Gets the 12-bit value of the specified port.
 *
 * The value returned is undefined if the analog pin has been switched to a
 * different mode.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an analog input
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be
 *        returned
 *
 * \return The analog sensor value, where a value of 0 reflects an input voltage
 * of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V
 */ 153 1 173 4 18446744073709551615 7 int32_t 174 1 174 8 7 19 ext_adi_analog_read 174 9 174 28 22 1 ( 174 28 174 29 22 7 uint8_t 174 29 174 36 4 10 smart_port 174 37 174 47 23 1 , 174 47 174 48 22 7 uint8_t 174 49 174 56 4 8 adi_port 174 57 174 65 24 1 ) 174 65 174 66 22 1 ; 174 66 174 67 18446744073709551615 922 /**
 * Gets the 12 bit calibrated value of an analog input port.
 *
 * The adi_analog_calibrate() function must be run first. This function is
 * inappropriate for sensor values intended for integration, as round-off error
 * can accumulate causing drift over time. Use adi_analog_read_calibrated_HR()
 * instead.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an analog input
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be
 *        returned
 *
 * \return The difference of the sensor value from its calibrated default from
 * -4095 to 4095
 */ 176 1 198 4 18446744073709551615 7 int32_t 199 1 199 8 7 30 ext_adi_analog_read_calibrated 199 9 199 39 25 1 ( 199 39 199 40 25 7 uint8_t 199 40 199 47 4 10 smart_port 199 48 199 58 26 1 , 199 58 199 59 25 7 uint8_t 199 60 199 67 4 8 adi_port 199 68 199 76 27 1 ) 199 76 199 77 25 1 ; 199 77 199 78 18446744073709551615 1198 /**
 * Gets the 16 bit calibrated value of an analog input port.
 *
 * The adi_analog_calibrate() function must be run first. This is intended for
 * integrated sensor values such as gyros and accelerometers to reduce drift due
 * to round-off, and should not be used on a sensor such as a line tracker
 * or potentiometer.
 *
 * The value returned actually has 16 bits of "precision", even though the ADC
 * only reads 12 bits, so that error induced by the average value being between
 * two values when integrated over time is trivial. Think of the value as the
 * true value times 16.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an analog input
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be
 *        returned
 *
 * \return The difference of the sensor value from its calibrated default from
 * -16384 to 16384
 */ 201 1 228 4 18446744073709551615 7 int32_t 229 1 229 8 7 33 ext_adi_analog_read_calibrated_HR 229 9 229 42 28 1 ( 229 42 229 43 28 7 uint8_t 229 43 229 50 4 10 smart_port 229 51 229 61 29 1 , 229 61 229 62 28 7 uint8_t 229 63 229 70 4 8 adi_port 229 71 229 79 30 1 ) 229 79 229 80 28 1 ; 229 80 229 81 18446744073709551615 897 /**
 * Gets the digital value (1 or 0) of a port configured as a digital input.
 *
 * If the port is configured as some other mode, the digital value which
 * reflects the current state of the port is returned, which may or may not
 * differ from the currently set value. The return value is undefined for ports
 * configured as any mode other than a Digital Input.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as a digital input
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return True if the pin is HIGH, or false if it is LOW
 */ 231 1 251 4 18446744073709551615 7 int32_t 252 1 252 8 7 20 ext_adi_digital_read 252 9 252 29 31 1 ( 252 29 252 30 31 7 uint8_t 252 30 252 37 4 10 smart_port 252 38 252 48 32 1 , 252 48 252 49 31 7 uint8_t 252 50 252 57 4 8 adi_port 252 58 252 66 33 1 ) 252 66 252 67 31 1 ; 252 67 252 68 18446744073709551615 1128 /**
 * Gets a rising-edge case for a digital button press.
 *
 * This function is not thread-safe.
 * Multiple tasks polling a single button may return different results under the
 * same circumstances, so only one task should call this function for any given
 * button. E.g., Task A calls this function for buttons 1 and 2. Task B may call
 * this function for button 3, but should not for buttons 1 or 2. A typical
 * use-case for this function is to call inside opcontrol to detect new button
 * presses, and not in any other tasks.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as a digital input
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return 1 if the button is pressed and had not been pressed
 * the last time this function was called, 0 otherwise.
 */ 254 1 278 4 18446744073709551615 7 int32_t 279 1 279 8 7 29 ext_adi_digital_get_new_press 279 9 279 38 34 1 ( 279 38 279 39 34 7 uint8_t 279 39 279 46 4 10 smart_port 279 47 279 57 35 1 , 279 57 279 58 34 7 uint8_t 279 59 279 66 4 8 adi_port 279 67 279 75 36 1 ) 279 75 279 76 34 1 ; 279 76 279 77 18446744073709551615 911 /**
 * Sets the digital value (1 or 0) of a port configured as a digital output.
 *
 * If the port is configured as some other mode, behavior is undefined.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as a digital output
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
 * \param value
 *        An expression evaluating to "true" or "false" to set the output to
 *        HIGH or LOW respectively, or the constants HIGH or LOW themselves
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 281 1 302 4 18446744073709551615 7 int32_t 303 1 303 8 7 21 ext_adi_digital_write 303 9 303 30 37 1 ( 303 30 303 31 37 7 uint8_t 303 31 303 38 4 10 smart_port 303 39 303 49 38 1 , 303 49 303 50 37 7 uint8_t 303 51 303 58 4 8 adi_port 303 59 303 67 39 1 , 303 67 303 68 37 4 bool 303 69 303 73 18446744073709551615 5 value 303 74 303 79 40 1 ) 303 79 303 80 37 1 ; 303 80 303 81 18446744073709551615 690 /**
 * Configures the port as an input or output with a variety of settings.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
 * \param mode
 *        One of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 305 1 322 4 18446744073709551615 7 int32_t 323 1 323 8 7 16 ext_adi_pin_mode 323 9 323 25 41 1 ( 323 25 323 26 41 7 uint8_t 323 26 323 33 4 10 smart_port 323 34 323 44 42 1 , 323 44 323 45 41 7 uint8_t 323 46 323 53 4 8 adi_port 323 54 323 62 43 1 , 323 62 323 63 41 7 uint8_t 323 64 323 71 4 4 mode 323 72 323 76 44 1 ) 323 76 323 77 41 1 ; 323 77 323 78 18446744073709551615 753 /**
 * Sets the speed of the motor on the given port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an motor
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure
 * \param speed
 *        The new signed speed; -127 is full reverse and 127 is full forward,
 *        with 0 being off
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 325 1 344 4 18446744073709551615 7 int32_t 345 1 345 8 7 17 ext_adi_motor_set 345 9 345 26 45 1 ( 345 26 345 27 45 7 uint8_t 345 27 345 34 4 10 smart_port 345 35 345 45 46 1 , 345 45 345 46 45 7 uint8_t 345 47 345 54 4 8 adi_port 345 55 345 63 47 1 , 345 63 345 64 45 6 int8_t 345 65 345 71 48 5 speed 345 72 345 77 49 1 ) 345 77 345 78 45 1 ; 345 78 345 79 18446744073709551615 589 /**
 * Gets the last set speed of the motor on the given port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an motor
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port to get (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return The last set speed of the motor on the given port
 */ 347 1 362 4 18446744073709551615 7 int32_t 363 1 363 8 7 17 ext_adi_motor_get 363 9 363 26 50 1 ( 363 26 363 27 50 7 uint8_t 363 27 363 34 4 10 smart_port 363 35 363 45 51 1 , 363 45 363 46 50 7 uint8_t 363 47 363 54 4 8 adi_port 363 55 363 63 52 1 ) 363 63 363 64 50 1 ; 363 64 363 65 18446744073709551615 607 /**
 * Stops the motor on the given port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an motor
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *	      The ADI port to set (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 365 1 381 4 18446744073709551615 7 int32_t 382 1 382 8 7 18 ext_adi_motor_stop 382 9 382 27 53 1 ( 382 27 382 28 53 7 uint8_t 382 28 382 35 4 10 smart_port 382 36 382 46 54 1 , 382 46 382 47 53 7 uint8_t 382 48 382 55 4 8 adi_port 382 56 382 64 55 1 ) 382 64 382 65 53 1 ; 382 65 382 66 18446744073709551615 177 /**
 * Reference type for an initialized encoder.
 *
 * This merely contains the port number for the encoder, unlike its use as an
 * object to store encoder data in PROS 2.
 */ 384 1 389 4 18446744073709551615 7 typedef 390 1 390 8 18446744073709551615 7 int32_t 390 9 390 16 7 17 ext_adi_encoder_t 390 17 390 34 56 1 ; 390 34 390 35 18446744073709551615 579 /**
 * Gets the number of ticks recorded by the encoder.
 *
 * There are 360 ticks in one revolution.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an encoder
 *
 * \param enc
 *        The adi_encoder_t object from adi_encoder_init() to read
 *
 * \return The signed and cumulative number of counts since the last start or
 * reset
 */ 392 1 408 4 18446744073709551615 7 int32_t 409 1 409 8 7 19 ext_adi_encoder_get 409 9 409 28 57 1 ( 409 28 409 29 57 17 ext_adi_encoder_t 409 29 409 46 56 3 enc 409 47 409 50 58 1 ) 409 50 409 51 57 1 ; 409 51 409 52 18446744073709551615 911 /**
 * Creates an encoder object and configures the specified ports accordingly.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an encoder
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port_top
 *        The "top" wire from the encoder sensor with the removable cover side
 *        up. This should be in port 1, 3, 5, or 7 ('A', 'C', 'E', or 'G').
 * \param adi_port_bottom
 *        The "bottom" wire from the encoder sensor
 * \param reverse
 *        If "true", the sensor will count in the opposite direction
 *
 * \return An adi_encoder_t object to be stored and used for later calls to
 * encoder functions
 */ 411 1 432 4 18446744073709551615 17 ext_adi_encoder_t 433 1 433 18 56 20 ext_adi_encoder_init 433 19 433 39 59 1 ( 433 39 433 40 59 7 uint8_t 433 40 433 47 4 10 smart_port 433 48 433 58 60 1 , 433 58 433 59 59 7 uint8_t 433 60 433 67 4 12 adi_port_top 433 68 433 80 61 1 , 433 80 433 81 59 7 uint8_t 433 82 433 89 4 15 adi_port_bottom 433 90 433 105 62 1 , 433 105 433 106 59 4 bool 433 107 433 111 18446744073709551615 7 reverse 433 112 433 119 63 1 ) 433 119 433 120 59 1 ; 433 120 433 121 18446744073709551615 678 /**
 * Sets the encoder value to zero.
 *
 * It is safe to use this method while an encoder is enabled. It is not
 * necessary to call this method before stopping or starting an encoder.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an encoder
 *
 * \param enc
 *        The adi_encoder_t object from adi_encoder_init() to reset
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 435 1 452 4 18446744073709551615 7 int32_t 453 1 453 8 7 21 ext_adi_encoder_reset 453 9 453 30 64 1 ( 453 30 453 31 64 17 ext_adi_encoder_t 453 31 453 48 56 3 enc 453 49 453 52 65 1 ) 453 52 453 53 64 1 ; 453 53 453 54 18446744073709551615 560 /**
 * Disables the encoder and voids the configuration on its ports.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an encoder
 *
 * \param enc
 *        The adi_encoder_t object from adi_encoder_init() to stop
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 455 1 469 4 18446744073709551615 7 int32_t 470 1 470 8 7 24 ext_adi_encoder_shutdown 470 9 470 33 66 1 ( 470 33 470 34 66 17 ext_adi_encoder_t 470 34 470 51 56 3 enc 470 52 470 55 67 1 ) 470 55 470 56 66 1 ; 470 56 470 57 18446744073709551615 183 /**
 * Reference type for an initialized ultrasonic.
 *
 * This merely contains the port number for the ultrasonic, unlike its use as an
 * object to store encoder data in PROS 2.
 */ 472 1 477 4 18446744073709551615 7 typedef 478 1 478 8 18446744073709551615 7 int32_t 478 9 478 16 7 20 ext_adi_ultrasonic_t 478 17 478 37 68 1 ; 478 37 478 38 18446744073709551615 789 /**
 * Gets the current ultrasonic sensor value in centimeters.
 *
 * If no object was found, zero is returned. If the ultrasonic sensor was never
 * started, the return value is undefined. Round and fluffy objects can cause
 * inaccurate values to be returned.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an ultrasonic
 *
 * \param ult
 *        The adi_ultrasonic_t object from adi_ultrasonic_init() to read
 *
 * \return The distance to the nearest object in m^-4 (10000 indicates 1 meter),
 * measured from the sensor's mounting points.
 */ 480 1 498 4 18446744073709551615 7 int32_t 499 1 499 8 7 22 ext_adi_ultrasonic_get 499 9 499 31 69 1 ( 499 31 499 32 69 20 ext_adi_ultrasonic_t 499 32 499 52 68 3 ult 499 53 499 56 70 1 ) 499 56 499 57 69 1 ; 499 57 499 58 18446744073709551615 881 /**
 * Creates an ultrasonic object and configures the specified ports accordingly.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an ultrasonic
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port_ping
 *        The port connected to the orange OUTPUT cable. This should be in port
 *        1, 3, 5, or 7 ('A', 'C', 'E', 'G').
 * \param adi_port_echo
 *        The port connected to the yellow INPUT cable. This should be in the
 *        next highest port following port_ping.
 *
 * \return An adi_ultrasonic_t object to be stored and used for later calls to
 * ultrasonic functions
 */ 501 1 521 4 18446744073709551615 20 ext_adi_ultrasonic_t 522 1 522 21 68 23 ext_adi_ultrasonic_init 522 22 522 45 71 1 ( 522 45 522 46 71 7 uint8_t 522 46 522 53 4 10 smart_port 522 54 522 64 72 1 , 522 64 522 65 71 7 uint8_t 522 66 522 73 4 13 adi_port_ping 522 74 522 87 73 1 , 522 87 522 88 71 7 uint8_t 522 89 522 96 4 13 adi_port_echo 522 97 522 110 74 1 ) 522 110 522 111 71 1 ; 522 111 522 112 18446744073709551615 579 /**
 * Disables the ultrasonic sensor and voids the configuration on its ports.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as an ultrasonic
 *
 * \param ult
 *        The adi_ultrasonic_t object from adi_ultrasonic_init() to stop
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 524 1 538 4 18446744073709551615 7 int32_t 539 1 539 8 7 27 ext_adi_ultrasonic_shutdown 539 9 539 36 75 1 ( 539 36 539 37 75 20 ext_adi_ultrasonic_t 539 37 539 57 68 3 ult 539 58 539 61 76 1 ) 539 61 539 62 75 1 ; 539 62 539 63 18446744073709551615 227 /**
 * Reference type for an initialized gyroscope.
 *
 * This merely contains the port number for the gyroscope, unlike its use as an
 * object to store gyro data in PROS 2.
 *
 * (Might Be useless with the wire expander.)
 */ 541 1 548 4 18446744073709551615 7 typedef 549 1 549 8 18446744073709551615 7 int32_t 549 9 549 16 7 14 ext_adi_gyro_t 549 17 549 31 77 1 ; 549 31 549 32 18446744073709551615 731 /**
 * Gets the current gyro angle in tenths of a degree. Unless a multiplier is
 * applied to the gyro, the return value will be a whole number representing
 * the number of degrees of rotation times 10.
 *
 * There are 360 degrees in a circle, thus the gyro will return 3600 for one
 * whole rotation.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as a gyro
 *
 * \param gyro
 *        The adi_gyro_t object for which the angle will be returned
 *
 * \return The gyro angle in degrees.
 */ 551 1 569 4 18446744073709551615 6 double 570 1 570 7 18446744073709551615 16 ext_adi_gyro_get 570 8 570 24 78 1 ( 570 24 570 25 78 14 ext_adi_gyro_t 570 25 570 39 77 4 gyro 570 40 570 44 79 1 ) 570 44 570 45 78 1 ; 570 45 570 46 18446744073709551615 1027 /**
 * Initializes a gyroscope on the given port. If the given port has not
 * previously been configured as a gyro, then this function starts a 1300 ms
 * calibration period.
 *
 * It is highly recommended that this function be called from initialize() when
 * the robot is stationary to ensure proper calibration.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as a gyro
 *
 * \param smart_port
 *        The smart port number that the ADI Expander is in
 * \param adi_port
 *        The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H')
 * \param multiplier
 *        A scalar value that will be multiplied by the gyro heading value
 *        supplied by the ADI
 *
 * \return An adi_gyro_t object containing the given port, or PROS_ERR if the
 * initialization failed.
 */ 572 1 596 4 18446744073709551615 14 ext_adi_gyro_t 597 1 597 15 77 17 ext_adi_gyro_init 597 16 597 33 80 1 ( 597 33 597 34 80 7 uint8_t 597 34 597 41 4 10 smart_port 597 42 597 52 81 1 , 597 52 597 53 80 7 uint8_t 597 54 597 61 4 8 adi_port 597 62 597 70 82 1 , 597 70 597 71 80 6 double 597 72 597 78 18446744073709551615 10 multiplier 597 79 597 89 83 1 ) 597 89 597 90 80 1 ; 597 90 597 91 18446744073709551615 532 /**
 * Resets the gyroscope value to zero.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as a gyro
 *
 * \param gyro
 *        The adi_gyro_t object for which the angle will be returned
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 599 1 613 4 18446744073709551615 7 int32_t 614 1 614 8 7 18 ext_adi_gyro_reset 614 9 614 27 84 1 ( 614 27 614 28 84 14 ext_adi_gyro_t 614 28 614 42 77 4 gyro 614 43 614 47 85 1 ) 614 47 614 48 84 1 ; 614 48 614 49 18446744073709551615 534 /**
 * Disables the gyro and voids the configuration on its port.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - Either the ADI port value or the smart port value is not within its
 *	   valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).
 * EADDRINUSE - The port is not configured as a gyro
 *
 * \param gyro
 *        The adi_gyro_t object to be shut down
 *
 * \return 1 if the operation was successful or PROS_ERR if the operation
 * failed, setting errno.
 */ 616 1 630 4 18446744073709551615 7 int32_t 631 1 631 8 7 21 ext_adi_gyro_shutdown 631 9 631 30 86 1 ( 631 30 631 31 86 14 ext_adi_gyro_t 631 31 631 45 77 4 gyro 631 46 631 50 87 1 ) 631 50 631 51 86 1 ; 631 51 631 52 18446744073709551615 186 /**
 * Reference type for an initialized potentiometer.
 *
 * This merely contains the port number for the potentiometer, unlike its use as an
 * object to store gyro data in PROS 2.
 */ 633 1 638 4 18446744073709551615 7 typedef 639 1 639 8 18446744073709551615 7 int32_t 639 9 639 16 7 23 ext_adi_potentiometer_t 639 17 639 40 88 1 ; 639 40 639 41 18446744073709551615 686 /**
 * Initializes a potentiometer on the given port. 
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a potentiometer
 * 
 * \param smart_port
 *        The smart port with the adi expander (1-21)
 * \param adi_port
 *        The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H')
 * \param potentiometer_type
 *        An adi_potentiometer_type_e_t enum value specifying the potentiometer version type
 *
 * \return An adi_potentiometer_t object containing the given port, or PROS_ERR if the
 * initialization failed.
 */ 641 1 658 4 18446744073709551615 23 ext_adi_potentiometer_t 659 1 659 24 88 26 ext_adi_potentiometer_init 659 25 659 51 89 1 ( 659 51 659 52 89 7 uint8_t 659 52 659 59 4 10 smart_port 659 60 659 70 90 1 , 659 70 659 71 89 7 uint8_t 659 72 659 79 4 8 adi_port 659 80 659 88 91 1 , 659 88 659 89 89 26 adi_potentiometer_type_e_t 659 90 659 116 92 18 potentiometer_type 659 117 659 135 93 1 ) 659 135 659 136 89 1 ; 659 136 659 137 18446744073709551615 628 /**
 * Gets the current potentiometer angle in tenths of a degree.
 *
 * The original potentiometer rotates 250 degrees thus returning an angle between 0-250 degrees.
 * Potentiometer V2 rotates 333 degrees thus returning an angle between 0-333 degrees.
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EADDRINUSE - The port is not configured as a potentiometer
 *
 * \param potentiometer
 *        The adi_potentiometer_t object for which the angle will be returned
 *
 * \return The potentiometer angle in degrees.
 */ 661 1 676 4 18446744073709551615 6 double 677 1 677 7 18446744073709551615 31 ext_adi_potentiometer_get_angle 677 8 677 39 94 1 ( 677 39 677 40 94 23 ext_adi_potentiometer_t 677 40 677 63 88 13 potentiometer 677 64 677 77 95 1 ) 677 77 677 78 94 1 ; 677 78 677 79 18446744073709551615 98 /**
 * Reference type for an initialized addressable led, which stores its smart and adi port.
 */ 679 1 681 4 18446744073709551615 7 typedef 682 1 682 8 18446744073709551615 7 int32_t 682 9 682 16 7 13 ext_adi_led_t 682 17 682 30 96 1 ; 682 30 682 31 18446744073709551615 607 /**
 * Initializes a led on the given port. 
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - A given value is not correct, or the buffer is null
 * EADDRINUSE - The port is not configured for ADI output
 * 
 * \param smart_port
 *        The smart port with the adi expander (1-21)
 * \param adi_port
 *        The ADI port to initialize as a led (from 1-8, 'a'-'h', 'A'-'H')
 *
 * \return An ext_adi_led_t object containing the given port, or PROS_ERR if the
 * initialization failed.
 */ 684 1 700 4 18446744073709551615 13 ext_adi_led_t 701 1 701 14 96 16 ext_adi_led_init 701 15 701 31 97 1 ( 701 31 701 32 97 7 uint8_t 701 32 701 39 4 10 smart_port 701 40 701 50 98 1 , 701 50 701 51 97 7 uint8_t 701 52 701 59 4 8 adi_port 701 60 701 68 99 1 ) 701 68 701 69 97 1 ; 701 69 701 70 18446744073709551615 604 /**
 * @brief Clear the entire led strip of color
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - A given value is not correct, or the buffer is null
 * EADDRINUSE - The port is not configured for ADI output
 *
 * @param led port of type adi_led_t
 * @param buffer array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw
 * @param buffer_length length of buffer to clear
 * @return PROS_SUCCESS if successful, PROS_ERR if not
 */ 703 1 716 4 18446744073709551615 7 int32_t 717 1 717 8 7 21 ext_adi_led_clear_all 717 9 717 30 100 1 ( 717 30 717 31 100 13 ext_adi_led_t 717 31 717 44 96 3 led 717 45 717 48 101 1 , 717 48 717 49 100 8 uint32_t 717 50 717 58 102 1 * 717 58 717 59 18446744073709551615 6 buffer 717 60 717 66 103 1 , 717 66 717 67 100 8 uint32_t 717 68 717 76 102 13 buffer_length 717 77 717 90 104 1 ) 717 90 717 91 100 1 ; 717 91 717 92 18446744073709551615 634 /**
 * @brief Set the entire led strip using the colors contained in the buffer
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - A given value is not correct, or the buffer is null
 * EADDRINUSE - The port is not configured for ADI output
 *
 * @param led port of type adi_led_t
 * @param buffer array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw
 * @param buffer_length length of buffer to clear
 * @return PROS_SUCCESS if successful, PROS_ERR if not
 */ 719 1 732 4 18446744073709551615 7 int32_t 733 1 733 8 7 15 ext_adi_led_set 733 9 733 24 105 1 ( 733 24 733 25 105 13 ext_adi_led_t 733 25 733 38 96 3 led 733 39 733 42 106 1 , 733 42 733 43 105 8 uint32_t 733 44 733 52 102 1 * 733 52 733 53 18446744073709551615 6 buffer 733 54 733 60 107 1 , 733 60 733 61 105 8 uint32_t 733 62 733 70 102 13 buffer_length 733 71 733 84 108 1 ) 733 84 733 85 105 1 ; 733 85 733 86 18446744073709551615 662 /**
 * @brief Set the entire led strip to one color
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - A given value is not correct, or the buffer is null
 * EADDRINUSE - The port is not configured for ADI output
 *
 * @param led port of type adi_led_t
 * @param buffer array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw
 * @param buffer_length length of buffer to clear
 * @param color color to set all the led strip value to
 * @return PROS_SUCCESS if successful, PROS_ERR if not
 */ 735 1 749 4 18446744073709551615 7 int32_t 750 1 750 8 7 19 ext_adi_led_set_all 750 9 750 28 109 1 ( 750 28 750 29 109 13 ext_adi_led_t 750 29 750 42 96 3 led 750 43 750 46 110 1 , 750 46 750 47 109 8 uint32_t 750 48 750 56 102 1 * 750 56 750 57 18446744073709551615 6 buffer 750 58 750 64 111 1 , 750 64 750 65 109 8 uint32_t 750 66 750 74 102 13 buffer_length 750 75 750 88 112 1 , 750 88 750 89 109 8 uint32_t 750 90 750 98 102 5 color 750 99 750 104 113 1 ) 750 104 750 105 109 1 ; 750 105 750 106 18446744073709551615 720 /**
 * @brief Set one pixel on the led strip
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - A given value is not correct, or the buffer is null
 * EADDRINUSE - The port is not configured for ADI output
 *
 * @param led port of type adi_led_t
 * @param buffer array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw
 * @param buffer_length length of the input buffer
 * @param color color to clear all the led strip to
 * @param pixel_position position of the pixel to clear (0 indexed)
 * @return PROS_SUCCESS if successful, PROS_ERR if not
 */ 752 1 767 4 18446744073709551615 7 int32_t 768 1 768 8 7 21 ext_adi_led_set_pixel 768 9 768 30 114 1 ( 768 30 768 31 114 13 ext_adi_led_t 768 31 768 44 96 3 led 768 45 768 48 115 1 , 768 48 768 49 114 8 uint32_t 768 50 768 58 102 1 * 768 58 768 59 18446744073709551615 6 buffer 768 60 768 66 116 1 , 768 66 768 67 114 8 uint32_t 768 68 768 76 102 13 buffer_length 768 77 768 90 117 1 , 768 90 768 91 114 8 uint32_t 768 92 768 100 102 5 color 768 101 768 106 118 1 , 768 106 768 107 114 8 uint32_t 768 108 768 116 102 14 pixel_position 768 117 768 131 119 1 ) 768 131 768 132 114 1 ; 768 132 768 133 18446744073709551615 670 /**
 * @brief Clear one pixel on the led strip
 *
 * This function uses the following values of errno when an error state is
 * reached:
 * ENXIO - The given value is not within the range of ADI Ports
 * EINVAL - A given value is not correct, or the buffer is null
 * EADDRINUSE - The port is not configured for ADI output
 *
 * @param led port of type adi_led_t
 * @param buffer array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw
 * @param buffer_length length of the input buffer
 * @param pixel_position position of the pixel to clear (0 indexed)
 * @return PROS_SUCCESS if successful, PROS_ERR if not
 */ 770 1 784 4 18446744073709551615 7 int32_t 785 1 785 8 7 23 ext_adi_led_clear_pixel 785 9 785 32 120 1 ( 785 32 785 33 120 13 ext_adi_led_t 785 33 785 46 96 3 led 785 47 785 50 121 1 , 785 50 785 51 120 8 uint32_t 785 52 785 60 102 1 * 785 60 785 61 18446744073709551615 6 buffer 785 62 785 68 122 1 , 785 68 785 69 120 8 uint32_t 785 70 785 78 102 13 buffer_length 785 79 785 92 123 1 , 785 92 785 93 120 8 uint32_t 785 94 785 102 102 14 pixel_position 785 103 785 117 124 1 ) 785 117 785 118 120 1 ; 785 118 785 119 18446744073709551615 1 # 787 1 787 2 18446744073709551615 5 ifdef 787 2 787 7 18446744073709551615 11 __cplusplus 787 8 787 19 18446744073709551615 1 } 788 1 788 2 18446744073709551615 14 // namespace c 788 4 788 18 18446744073709551615 1 } 789 1 789 2 18446744073709551615 17 // namespace pros 789 4 789 21 18446744073709551615 1 } 790 1 790 2 18446744073709551615 1 # 791 1 791 2 18446744073709551615 5 endif 791 2 791 7 18446744073709551615 1 # 793 1 793 2 18446744073709551615 5 endif 793 2 793 7 18446744073709551615 15 // _PROS_ADI_H_ 793 9 793 24 18446744073709551615 0 0 125 0 0 0 22 0 0 1 13 0 4 pros 22 1 13 0 6 c:pros 20 1 13 0 24 adi_port_config_e_t:pros 8 1 13 0 30 ext_adi_port_get_config:c:pros 20 1 13 0 7 uint8_t 10 1 13 0 69 61:53:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 69 61:73:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 20 1 13 0 7 int32_t 8 1 13 0 29 ext_adi_port_get_value:c:pros 10 1 13 0 69 79:40:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 69 79:60:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 30 ext_adi_port_set_config:c:pros 10 1 13 0 69 99:41:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 69 99:61:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 69 99:91:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 29 ext_adi_port_set_value:c:pros 10 1 13 0 70 123:40:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 123:60:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 123:78:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 31 ext_adi_analog_calibrate:c:pros 10 1 13 0 70 151:42:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 151:62:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 26 ext_adi_analog_read:c:pros 10 1 13 0 70 174:37:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 174:57:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 37 ext_adi_analog_read_calibrated:c:pros 10 1 13 0 70 199:48:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 199:68:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 40 ext_adi_analog_read_calibrated_HR:c:pros 10 1 13 0 70 229:51:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 229:71:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 27 ext_adi_digital_read:c:pros 10 1 13 0 70 252:38:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 252:58:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 36 ext_adi_digital_get_new_press:c:pros 10 1 13 0 70 279:47:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 279:67:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 28 ext_adi_digital_write:c:pros 10 1 13 0 70 303:39:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 303:59:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 303:74:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 23 ext_adi_pin_mode:c:pros 10 1 13 0 70 323:34:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 323:54:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 323:72:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 24 ext_adi_motor_set:c:pros 10 1 13 0 70 345:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 345:55:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 20 1 13 0 6 int8_t 10 1 13 0 70 345:72:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 24 ext_adi_motor_get:c:pros 10 1 13 0 70 363:35:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 363:55:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 25 ext_adi_motor_stop:c:pros 10 1 13 0 70 382:36:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 382:56:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 20 1 13 0 24 ext_adi_encoder_t:c:pros 8 1 13 0 26 ext_adi_encoder_get:c:pros 10 1 13 0 70 409:47:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 27 ext_adi_encoder_init:c:pros 10 1 13 0 70 433:48:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 433:68:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 433:90:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 71 433:112:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 28 ext_adi_encoder_reset:c:pros 10 1 13 0 70 453:49:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 31 ext_adi_encoder_shutdown:c:pros 10 1 13 0 70 470:52:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 20 1 13 0 27 ext_adi_ultrasonic_t:c:pros 8 1 13 0 29 ext_adi_ultrasonic_get:c:pros 10 1 13 0 70 499:53:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 30 ext_adi_ultrasonic_init:c:pros 10 1 13 0 70 522:54:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 522:74:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 522:97:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 34 ext_adi_ultrasonic_shutdown:c:pros 10 1 13 0 70 539:58:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 20 1 13 0 21 ext_adi_gyro_t:c:pros 8 1 13 0 23 ext_adi_gyro_get:c:pros 10 1 13 0 70 570:40:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 24 ext_adi_gyro_init:c:pros 10 1 13 0 70 597:42:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 597:62:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 597:79:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 25 ext_adi_gyro_reset:c:pros 10 1 13 0 70 614:43:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 28 ext_adi_gyro_shutdown:c:pros 10 1 13 0 70 631:46:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 20 1 13 0 30 ext_adi_potentiometer_t:c:pros 8 1 13 0 33 ext_adi_potentiometer_init:c:pros 10 1 13 0 70 659:60:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 659:80:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 20 1 13 0 31 adi_potentiometer_type_e_t:pros 10 1 13 0 71 659:117:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 38 ext_adi_potentiometer_get_angle:c:pros 10 1 13 0 70 677:64:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 20 1 13 0 20 ext_adi_led_t:c:pros 8 1 13 0 23 ext_adi_led_init:c:pros 10 1 13 0 70 701:40:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 701:60:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 28 ext_adi_led_clear_all:c:pros 10 1 13 0 70 717:45:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 20 1 13 0 8 uint32_t 10 1 13 0 70 717:60:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 717:77:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 22 ext_adi_led_set:c:pros 10 1 13 0 70 733:39:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 733:54:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 733:71:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 26 ext_adi_led_set_all:c:pros 10 1 13 0 70 750:43:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 750:58:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 750:75:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 750:99:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 28 ext_adi_led_set_pixel:c:pros 10 1 13 0 70 768:45:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 768:60:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 768:77:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 71 768:101:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 71 768:117:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 8 1 13 0 30 ext_adi_led_clear_pixel:c:pros 10 1 13 0 70 785:47:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 785:62:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 70 785:79:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 10 1 13 0 71 785:103:/home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 0 0 1 0 0 0 63 /home/bluecore/Desktop/Pros/Main Project/include/pros/ext_adi.h 1698321188